
Path_Star.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800aad8  0800aad8  0001aad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe0  0800afe0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800afe0  0800afe0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afe0  0800afe0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe4  0800afe4  0001afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800afe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  200001f0  0800b1d8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800b1d8  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010342  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea8  00000000  00000000  0003059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00033448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b94  00000000  00000000  00034358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa84  00000000  00000000  00034eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153e5  00000000  00000000  0004f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d60a  00000000  00000000  00064d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000511c  00000000  00000000  000f2360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f747c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aabc 	.word	0x0800aabc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800aabc 	.word	0x0800aabc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__gesf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__lesf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpsf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpsf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b66:	d011      	beq.n	8000b8c <__cmpsf2+0x40>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b6e:	bf18      	it	ne
 8000b70:	ea90 0f01 	teqne	r0, r1
 8000b74:	bf58      	it	pl
 8000b76:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b7a:	bf88      	it	hi
 8000b7c:	17c8      	asrhi	r0, r1, #31
 8000b7e:	bf38      	it	cc
 8000b80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b84:	bf18      	it	ne
 8000b86:	f040 0001 	orrne.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	d102      	bne.n	8000b98 <__cmpsf2+0x4c>
 8000b92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b96:	d105      	bne.n	8000ba4 <__cmpsf2+0x58>
 8000b98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b9c:	d1e4      	bne.n	8000b68 <__cmpsf2+0x1c>
 8000b9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ba2:	d0e1      	beq.n	8000b68 <__cmpsf2+0x1c>
 8000ba4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_cfrcmple>:
 8000bac:	4684      	mov	ip, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4661      	mov	r1, ip
 8000bb2:	e7ff      	b.n	8000bb4 <__aeabi_cfcmpeq>

08000bb4 <__aeabi_cfcmpeq>:
 8000bb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bb6:	f7ff ffc9 	bl	8000b4c <__cmpsf2>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	bf48      	it	mi
 8000bbe:	f110 0f00 	cmnmi.w	r0, #0
 8000bc2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bc4 <__aeabi_fcmpeq>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff fff4 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000bcc:	bf0c      	ite	eq
 8000bce:	2001      	moveq	r0, #1
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmplt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffea 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmple>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffe0 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpge>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffd2 	bl	8000bac <__aeabi_cfrcmple>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_fcmpgt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffc8 	bl	8000bac <__aeabi_cfrcmple>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298_IN1_Pin|L298_IN2_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f248 0103 	movw	r1, #32771	; 0x8003
 8000c8a:	481d      	ldr	r0, [pc, #116]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000c8c:	f001 fe81 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger1_GPIO_Port, Trigger1_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c96:	481b      	ldr	r0, [pc, #108]	; (8000d04 <MX_GPIO_Init+0xdc>)
 8000c98:	f001 fe7b 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|Buzzer_Pin;
 8000c9c:	f248 0303 	movw	r3, #32771	; 0x8003
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cb6:	f001 fcd1 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = But2_Pin|But3_Pin|But4_Pin|But5_Pin
 8000cba:	f647 7330 	movw	r3, #32560	; 0x7f30
 8000cbe:	613b      	str	r3, [r7, #16]
                          |But6_Pin|Store_But_Pin|Send_But_Pin|PIR_Pin
                          |But1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cd0:	f001 fcc4 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger1_Pin;
 8000cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xdc>)
 8000cee:	f001 fcb5 	bl	800265c <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	40010800 	.word	0x40010800

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f001 fa83 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f877 	bl	8000e04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Sys_Init();
 8000d16:	f000 f8bb 	bl	8000e90 <Sys_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f7ff ff85 	bl	8000c28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d1e:	f001 f96d 	bl	8001ffc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d22:	f001 f995 	bl	8002050 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Check_Password();  /* Stuck here until entering correct password */
 8000d26:	f000 fb83 	bl	8001430 <Check_Password>

  UART_SendString(&huart1, "UART is ready for sending & receiving...\r\n");
 8000d2a:	4931      	ldr	r1, [pc, #196]	; (8000df0 <main+0xe8>)
 8000d2c:	4831      	ldr	r0, [pc, #196]	; (8000df4 <main+0xec>)
 8000d2e:	f000 fcf9 	bl	8001724 <UART_SendString>
  DELAY_MS(50);
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e01f      	b.n	8000d78 <main+0x70>
 8000d38:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <main+0xf0>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <main+0xf4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <main+0xf8>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4e:	fb03 f202 	mul.w	r2, r3, r2
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <main+0xf4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	492a      	ldr	r1, [pc, #168]	; (8000e00 <main+0xf8>)
 8000d58:	fba1 1303 	umull	r1, r3, r1, r3
 8000d5c:	0c9b      	lsrs	r3, r3, #18
 8000d5e:	085b      	lsrs	r3, r3, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <main+0xf0>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d8f8      	bhi.n	8000d64 <main+0x5c>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	2b31      	cmp	r3, #49	; 0x31
 8000d7c:	d9dc      	bls.n	8000d38 <main+0x30>

  Ringbuf_init();   /* Initialize the ring buffer for UART for handling the GPS data */
 8000d7e:	f000 ff2d 	bl	8001bdc <Ringbuf_init>
  DELAY_MS(50);
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	e01f      	b.n	8000dc8 <main+0xc0>
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <main+0xf0>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <main+0xf4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <main+0xf8>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9b      	lsrs	r3, r3, #18
 8000d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9e:	fb03 f202 	mul.w	r2, r3, r2
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <main+0xf4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4916      	ldr	r1, [pc, #88]	; (8000e00 <main+0xf8>)
 8000da8:	fba1 1303 	umull	r1, r3, r1, r3
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <main+0xf0>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d8f8      	bhi.n	8000db4 <main+0xac>
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2b31      	cmp	r3, #49	; 0x31
 8000dcc:	d9dc      	bls.n	8000d88 <main+0x80>

  /*Local variables begin*/
  float Distance1 = 0.0;      /* Variable to store the distance measured by the ultrasonic sensor */
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  /*Local variables end*/

  UART_Receiving_IT_Init();   /* Initialize UART receiving with interrupt */
 8000dd4:	f000 fc94 	bl	8001700 <UART_Receiving_IT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f005 fa2d 	bl	8006238 <HCSR04_Read>
 8000dde:	6178      	str	r0, [r7, #20]

	Ultraonic_Response(Distance1);
 8000de0:	6978      	ldr	r0, [r7, #20]
 8000de2:	f000 f8ad 	bl	8000f40 <Ultraonic_Response>

	PIR_Response();
 8000de6:	f000 f893 	bl	8000f10 <PIR_Response>

	Send_Braille();
 8000dea:	f000 faf7 	bl	80013dc <Send_Braille>
	Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8000dee:	e7f3      	b.n	8000dd8 <main+0xd0>
 8000df0:	0800aad8 	.word	0x0800aad8
 8000df4:	200008c4 	.word	0x200008c4
 8000df8:	e000e010 	.word	0xe000e010
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	431bde83 	.word	0x431bde83

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	; 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	; 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fe61 	bl	8007ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fdb9 	bl	80029c4 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e58:	f000 fcd6 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 f826 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e82:	f000 fcc1 	bl	8001808 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	; 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Sys_Init>:

/* USER CODE BEGIN 4 */
/* Function to initialize system peripherals */
static void Sys_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HCSR04_Init(HCSR04_SENSOR1, &htim4);
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <Sys_Init+0x24>)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f004 fd86 	bl	80059a8 <HCSR04_Init>
    DC_MOTOR_Init(DC_MOTOR1);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f004 faed 	bl	800547c <DC_MOTOR_Init>
    DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MIN_SPEED);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f004 fc88 	bl	80057bc <DC_MOTOR_Start>
    Buzzer_Init();
 8000eac:	f004 fac2 	bl	8005434 <Buzzer_Init>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000020c 	.word	0x2000020c

08000eb8 <HAL_TIM_IC_CaptureCallback>:

/* Timer input capture callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f004 ff71 	bl	8005da8 <HCSR04_TMR_IC_ISR>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_TIM_PeriodElapsedCallback>:

/* Timer period elapsed callback function */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_OVF_ISR(htim);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f004 ff2c 	bl	8005d34 <HCSR04_TMR_OVF_ISR>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SysTick_CallBack>:

/* SysTick callback function */
void SysTick_CallBack(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	TRIG_Ticks++;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <SysTick_CallBack+0x28>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SysTick_CallBack+0x28>)
 8000ef2:	801a      	strh	r2, [r3, #0]

    if(TRIG_Ticks >= 10) // Each 10msec
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_CallBack+0x28>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	d905      	bls.n	8000f08 <SysTick_CallBack+0x24>
    {
    	HCSR04_Trigger(HCSR04_SENSOR1);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f005 f9b1 	bl	8006264 <HCSR04_Trigger>
    	TRIG_Ticks = 0;
 8000f02:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <SysTick_CallBack+0x28>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
    }
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000254 	.word	0x20000254

08000f10 <PIR_Response>:

/* Function to handle PIR sensor response */
void PIR_Response(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin) == GPIO_PIN_SET) {
 8000f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <PIR_Response+0x2c>)
 8000f1a:	f001 fd23 	bl	8002964 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d106      	bne.n	8000f32 <PIR_Response+0x22>
		DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	2101      	movs	r1, #1
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f004 fc46 	bl	80057bc <DC_MOTOR_Start>
	} else{
		DC_MOTOR_Stop(DC_MOTOR1);
	}
}
 8000f30:	e002      	b.n	8000f38 <PIR_Response+0x28>
		DC_MOTOR_Stop(DC_MOTOR1);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f004 fcd2 	bl	80058dc <DC_MOTOR_Stop>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <Ultraonic_Response>:

/* Function to handle ultrasonic sensor response */
void Ultraonic_Response(float distance1){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	if(distance1 < THRESHOLD_DISTANCE){
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <Ultraonic_Response+0x3c>)
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe44 	bl	8000bd8 <__aeabi_fcmplt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d008      	beq.n	8000f68 <Ultraonic_Response+0x28>
		DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8000f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f004 fc2d 	bl	80057bc <DC_MOTOR_Start>
		Buzzer_ON();
 8000f62:	f004 fa73 	bl	800544c <Buzzer_ON>
	} else{
		DC_MOTOR_Stop(DC_MOTOR1);
		Buzzer_OFF();
	}
}
 8000f66:	e004      	b.n	8000f72 <Ultraonic_Response+0x32>
		DC_MOTOR_Stop(DC_MOTOR1);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f004 fcb7 	bl	80058dc <DC_MOTOR_Stop>
		Buzzer_OFF();
 8000f6e:	f004 fa79 	bl	8005464 <Buzzer_OFF>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	42480000 	.word	0x42480000

08000f80 <Read_Buttons>:

/* Function to read the Braille buttons */
void Read_Buttons(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(But1_GPIO_Port, But1_Pin) == GPIO_PIN_SET) {
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	4847      	ldr	r0, [pc, #284]	; (80010a8 <Read_Buttons+0x128>)
 8000f8a:	f001 fceb 	bl	8002964 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10f      	bne.n	8000fb4 <Read_Buttons+0x34>
    	braillePattern |= (1 << 5);
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <Read_Buttons+0x12c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b43      	ldr	r3, [pc, #268]	; (80010ac <Read_Buttons+0x12c>)
 8000fa0:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But1_Pin) == GPIO_PIN_SET);
 8000fa2:	bf00      	nop
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	483f      	ldr	r0, [pc, #252]	; (80010a8 <Read_Buttons+0x128>)
 8000faa:	f001 fcdb 	bl	8002964 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0f7      	beq.n	8000fa4 <Read_Buttons+0x24>
    }
    if (HAL_GPIO_ReadPin(But2_GPIO_Port, But2_Pin) == GPIO_PIN_SET) {
 8000fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb8:	483b      	ldr	r0, [pc, #236]	; (80010a8 <Read_Buttons+0x128>)
 8000fba:	f001 fcd3 	bl	8002964 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10f      	bne.n	8000fe4 <Read_Buttons+0x64>
    	braillePattern |= (1 << 4);
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <Read_Buttons+0x12c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <Read_Buttons+0x12c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But2_Pin) == GPIO_PIN_SET);
 8000fd2:	bf00      	nop
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	4833      	ldr	r0, [pc, #204]	; (80010a8 <Read_Buttons+0x128>)
 8000fda:	f001 fcc3 	bl	8002964 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d0f7      	beq.n	8000fd4 <Read_Buttons+0x54>
    }
    if (HAL_GPIO_ReadPin(But3_GPIO_Port, But3_Pin) == GPIO_PIN_SET) {
 8000fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe8:	482f      	ldr	r0, [pc, #188]	; (80010a8 <Read_Buttons+0x128>)
 8000fea:	f001 fcbb 	bl	8002964 <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10f      	bne.n	8001014 <Read_Buttons+0x94>
    	braillePattern |= (1 << 3);
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <Read_Buttons+0x12c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <Read_Buttons+0x12c>)
 8001000:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But3_Pin) == GPIO_PIN_SET);
 8001002:	bf00      	nop
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	4827      	ldr	r0, [pc, #156]	; (80010a8 <Read_Buttons+0x128>)
 800100a:	f001 fcab 	bl	8002964 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d0f7      	beq.n	8001004 <Read_Buttons+0x84>
    }
    if (HAL_GPIO_ReadPin(But4_GPIO_Port, But4_Pin) == GPIO_PIN_SET) {
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	4823      	ldr	r0, [pc, #140]	; (80010a8 <Read_Buttons+0x128>)
 800101a:	f001 fca3 	bl	8002964 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10f      	bne.n	8001044 <Read_Buttons+0xc4>
    	braillePattern |= (1 << 2);
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <Read_Buttons+0x12c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <Read_Buttons+0x12c>)
 8001030:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But4_Pin) == GPIO_PIN_SET);
 8001032:	bf00      	nop
 8001034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <Read_Buttons+0x128>)
 800103a:	f001 fc93 	bl	8002964 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d0f7      	beq.n	8001034 <Read_Buttons+0xb4>
    }
    if (HAL_GPIO_ReadPin(But5_GPIO_Port, But5_Pin) == GPIO_PIN_SET) {
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <Read_Buttons+0x128>)
 800104a:	f001 fc8b 	bl	8002964 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10f      	bne.n	8001074 <Read_Buttons+0xf4>
    	braillePattern |= (1 << 1);
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <Read_Buttons+0x12c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <Read_Buttons+0x12c>)
 8001060:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But5_Pin) == GPIO_PIN_SET);
 8001062:	bf00      	nop
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <Read_Buttons+0x128>)
 800106a:	f001 fc7b 	bl	8002964 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d0f7      	beq.n	8001064 <Read_Buttons+0xe4>
    }
    if (HAL_GPIO_ReadPin(But6_GPIO_Port, But6_Pin) == GPIO_PIN_SET) {
 8001074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <Read_Buttons+0x128>)
 800107a:	f001 fc73 	bl	8002964 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d10f      	bne.n	80010a4 <Read_Buttons+0x124>
    	braillePattern |= (1 << 0);
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <Read_Buttons+0x12c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <Read_Buttons+0x12c>)
 8001090:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But6_Pin) == GPIO_PIN_SET);
 8001092:	bf00      	nop
 8001094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <Read_Buttons+0x128>)
 800109a:	f001 fc63 	bl	8002964 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d0f7      	beq.n	8001094 <Read_Buttons+0x114>
    }
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	200004a2 	.word	0x200004a2

080010b0 <Translate_Braille>:

/* Function to translate the entered braille pattern into characters */
char Translate_Braille(uint8_t braillePattern, bool *isNumber) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
	if (braillePattern == 0b001111){
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d104      	bne.n	80010cc <Translate_Braille+0x1c>
		*isNumber = true;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
		return '\0';
 80010c8:	2300      	movs	r3, #0
 80010ca:	e12a      	b.n	8001322 <Translate_Braille+0x272>
	}

	if (*isNumber){
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d065      	beq.n	80011a0 <Translate_Braille+0xf0>
		*isNumber = false;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
		switch (braillePattern) {
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b14      	subs	r3, #20
 80010de:	2b22      	cmp	r3, #34	; 0x22
 80010e0:	d85c      	bhi.n	800119c <Translate_Braille+0xec>
 80010e2:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <Translate_Braille+0x38>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001195 	.word	0x08001195
 80010ec:	0800119d 	.word	0x0800119d
 80010f0:	08001199 	.word	0x08001199
 80010f4:	0800119d 	.word	0x0800119d
 80010f8:	0800119d 	.word	0x0800119d
 80010fc:	0800119d 	.word	0x0800119d
 8001100:	0800119d 	.word	0x0800119d
 8001104:	0800119d 	.word	0x0800119d
 8001108:	0800119d 	.word	0x0800119d
 800110c:	0800119d 	.word	0x0800119d
 8001110:	0800119d 	.word	0x0800119d
 8001114:	0800119d 	.word	0x0800119d
 8001118:	08001175 	.word	0x08001175
 800111c:	0800119d 	.word	0x0800119d
 8001120:	08001185 	.word	0x08001185
 8001124:	0800119d 	.word	0x0800119d
 8001128:	0800117d 	.word	0x0800117d
 800112c:	0800119d 	.word	0x0800119d
 8001130:	08001181 	.word	0x08001181
 8001134:	0800119d 	.word	0x0800119d
 8001138:	0800119d 	.word	0x0800119d
 800113c:	0800119d 	.word	0x0800119d
 8001140:	0800119d 	.word	0x0800119d
 8001144:	0800119d 	.word	0x0800119d
 8001148:	0800119d 	.word	0x0800119d
 800114c:	0800119d 	.word	0x0800119d
 8001150:	0800119d 	.word	0x0800119d
 8001154:	0800119d 	.word	0x0800119d
 8001158:	08001179 	.word	0x08001179
 800115c:	0800119d 	.word	0x0800119d
 8001160:	08001191 	.word	0x08001191
 8001164:	0800119d 	.word	0x0800119d
 8001168:	08001189 	.word	0x08001189
 800116c:	0800119d 	.word	0x0800119d
 8001170:	0800118d 	.word	0x0800118d
			case 0b100000: return '1';
 8001174:	2331      	movs	r3, #49	; 0x31
 8001176:	e0d4      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110000: return '2';
 8001178:	2332      	movs	r3, #50	; 0x32
 800117a:	e0d2      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100100: return '3';
 800117c:	2333      	movs	r3, #51	; 0x33
 800117e:	e0d0      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100110: return '4';
 8001180:	2334      	movs	r3, #52	; 0x34
 8001182:	e0ce      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100010: return '5';
 8001184:	2335      	movs	r3, #53	; 0x35
 8001186:	e0cc      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110100: return '6';
 8001188:	2336      	movs	r3, #54	; 0x36
 800118a:	e0ca      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110110: return '7';
 800118c:	2337      	movs	r3, #55	; 0x37
 800118e:	e0c8      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110010: return '8';
 8001190:	2338      	movs	r3, #56	; 0x38
 8001192:	e0c6      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010100: return '9';
 8001194:	2339      	movs	r3, #57	; 0x39
 8001196:	e0c4      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010110: return '0';
 8001198:	2330      	movs	r3, #48	; 0x30
 800119a:	e0c2      	b.n	8001322 <Translate_Braille+0x272>
			default: return '?';
 800119c:	233f      	movs	r3, #63	; 0x3f
 800119e:	e0c0      	b.n	8001322 <Translate_Braille+0x272>
		}
	} else{
		switch (braillePattern) {
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b3e      	cmp	r3, #62	; 0x3e
 80011a4:	f200 80bc 	bhi.w	8001320 <Translate_Braille+0x270>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <Translate_Braille+0x100>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080012ad 	.word	0x080012ad
 80011b4:	08001321 	.word	0x08001321
 80011b8:	08001321 	.word	0x08001321
 80011bc:	08001321 	.word	0x08001321
 80011c0:	08001321 	.word	0x08001321
 80011c4:	08001321 	.word	0x08001321
 80011c8:	08001321 	.word	0x08001321
 80011cc:	08001321 	.word	0x08001321
 80011d0:	08001321 	.word	0x08001321
 80011d4:	08001321 	.word	0x08001321
 80011d8:	08001321 	.word	0x08001321
 80011dc:	08001321 	.word	0x08001321
 80011e0:	08001321 	.word	0x08001321
 80011e4:	08001321 	.word	0x08001321
 80011e8:	08001321 	.word	0x08001321
 80011ec:	08001321 	.word	0x08001321
 80011f0:	0800131d 	.word	0x0800131d
 80011f4:	08001321 	.word	0x08001321
 80011f8:	08001321 	.word	0x08001321
 80011fc:	08001319 	.word	0x08001319
 8001200:	080012d1 	.word	0x080012d1
 8001204:	08001321 	.word	0x08001321
 8001208:	080012d5 	.word	0x080012d5
 800120c:	08001309 	.word	0x08001309
 8001210:	08001321 	.word	0x08001321
 8001214:	08001321 	.word	0x08001321
 8001218:	08001321 	.word	0x08001321
 800121c:	08001321 	.word	0x08001321
 8001220:	080012f9 	.word	0x080012f9
 8001224:	08001321 	.word	0x08001321
 8001228:	080012fd 	.word	0x080012fd
 800122c:	08001321 	.word	0x08001321
 8001230:	080012b1 	.word	0x080012b1
 8001234:	08001321 	.word	0x08001321
 8001238:	080012c1 	.word	0x080012c1
 800123c:	08001321 	.word	0x08001321
 8001240:	080012b9 	.word	0x080012b9
 8001244:	08001321 	.word	0x08001321
 8001248:	080012bd 	.word	0x080012bd
 800124c:	08001321 	.word	0x08001321
 8001250:	080012d9 	.word	0x080012d9
 8001254:	08001301 	.word	0x08001301
 8001258:	080012e9 	.word	0x080012e9
 800125c:	08001315 	.word	0x08001315
 8001260:	080012e1 	.word	0x080012e1
 8001264:	0800130d 	.word	0x0800130d
 8001268:	080012e5 	.word	0x080012e5
 800126c:	08001311 	.word	0x08001311
 8001270:	080012b5 	.word	0x080012b5
 8001274:	08001321 	.word	0x08001321
 8001278:	080012cd 	.word	0x080012cd
 800127c:	08001321 	.word	0x08001321
 8001280:	080012c5 	.word	0x080012c5
 8001284:	08001321 	.word	0x08001321
 8001288:	080012c9 	.word	0x080012c9
 800128c:	08001321 	.word	0x08001321
 8001290:	080012dd 	.word	0x080012dd
 8001294:	08001305 	.word	0x08001305
 8001298:	080012f5 	.word	0x080012f5
 800129c:	08001321 	.word	0x08001321
 80012a0:	080012ed 	.word	0x080012ed
 80012a4:	08001321 	.word	0x08001321
 80012a8:	080012f1 	.word	0x080012f1
			case 0b000000: return ' ';
 80012ac:	2320      	movs	r3, #32
 80012ae:	e038      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100000: return 'A';
 80012b0:	2341      	movs	r3, #65	; 0x41
 80012b2:	e036      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110000: return 'B';
 80012b4:	2342      	movs	r3, #66	; 0x42
 80012b6:	e034      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100100: return 'C';
 80012b8:	2343      	movs	r3, #67	; 0x43
 80012ba:	e032      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100110: return 'D';
 80012bc:	2344      	movs	r3, #68	; 0x44
 80012be:	e030      	b.n	8001322 <Translate_Braille+0x272>
			case 0b100010: return 'E';
 80012c0:	2345      	movs	r3, #69	; 0x45
 80012c2:	e02e      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110100: return 'F';
 80012c4:	2346      	movs	r3, #70	; 0x46
 80012c6:	e02c      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110110: return 'G';
 80012c8:	2347      	movs	r3, #71	; 0x47
 80012ca:	e02a      	b.n	8001322 <Translate_Braille+0x272>
			case 0b110010: return 'H';
 80012cc:	2348      	movs	r3, #72	; 0x48
 80012ce:	e028      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010100: return 'I';
 80012d0:	2349      	movs	r3, #73	; 0x49
 80012d2:	e026      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010110: return 'J';
 80012d4:	234a      	movs	r3, #74	; 0x4a
 80012d6:	e024      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101000: return 'K';
 80012d8:	234b      	movs	r3, #75	; 0x4b
 80012da:	e022      	b.n	8001322 <Translate_Braille+0x272>
			case 0b111000: return 'L';
 80012dc:	234c      	movs	r3, #76	; 0x4c
 80012de:	e020      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101100: return 'M';
 80012e0:	234d      	movs	r3, #77	; 0x4d
 80012e2:	e01e      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101110: return 'N';
 80012e4:	234e      	movs	r3, #78	; 0x4e
 80012e6:	e01c      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101010: return 'O';
 80012e8:	234f      	movs	r3, #79	; 0x4f
 80012ea:	e01a      	b.n	8001322 <Translate_Braille+0x272>
			case 0b111100: return 'P';
 80012ec:	2350      	movs	r3, #80	; 0x50
 80012ee:	e018      	b.n	8001322 <Translate_Braille+0x272>
			case 0b111110: return 'Q';
 80012f0:	2351      	movs	r3, #81	; 0x51
 80012f2:	e016      	b.n	8001322 <Translate_Braille+0x272>
			case 0b111010: return 'R';
 80012f4:	2352      	movs	r3, #82	; 0x52
 80012f6:	e014      	b.n	8001322 <Translate_Braille+0x272>
			case 0b011100: return 'S';
 80012f8:	2353      	movs	r3, #83	; 0x53
 80012fa:	e012      	b.n	8001322 <Translate_Braille+0x272>
			case 0b011110: return 'T';
 80012fc:	2354      	movs	r3, #84	; 0x54
 80012fe:	e010      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101001: return 'U';
 8001300:	2355      	movs	r3, #85	; 0x55
 8001302:	e00e      	b.n	8001322 <Translate_Braille+0x272>
			case 0b111001: return 'V';
 8001304:	2356      	movs	r3, #86	; 0x56
 8001306:	e00c      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010111: return 'W';
 8001308:	2357      	movs	r3, #87	; 0x57
 800130a:	e00a      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101101: return 'X';
 800130c:	2358      	movs	r3, #88	; 0x58
 800130e:	e008      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101111: return 'Y';
 8001310:	2359      	movs	r3, #89	; 0x59
 8001312:	e006      	b.n	8001322 <Translate_Braille+0x272>
			case 0b101011: return 'Z';
 8001314:	235a      	movs	r3, #90	; 0x5a
 8001316:	e004      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010011: return '.';
 8001318:	232e      	movs	r3, #46	; 0x2e
 800131a:	e002      	b.n	8001322 <Translate_Braille+0x272>
			case 0b010000: return ',';
 800131c:	232c      	movs	r3, #44	; 0x2c
 800131e:	e000      	b.n	8001322 <Translate_Braille+0x272>
			default: return '?';
 8001320:	233f      	movs	r3, #63	; 0x3f
		}
	}
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <Store_Character>:

/* Function to store the entered char so as it can be transmitted */
void Store_Character(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	char currentChar = Translate_Braille(braillePattern, &Is_Num);
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <Store_Character+0x54>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4913      	ldr	r1, [pc, #76]	; (8001384 <Store_Character+0x58>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff feb9 	bl	80010b0 <Translate_Braille>
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
    if ((currentChar != '\0') && (sentenceIndex < sizeof(sentenceBuffer) - 1)) {
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <Store_Character+0x44>
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <Store_Character+0x5c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2bff      	cmp	r3, #255	; 0xff
 800134e:	d00f      	beq.n	8001370 <Store_Character+0x44>
        sentenceBuffer[sentenceIndex++] = currentChar;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <Store_Character+0x5c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	b2d1      	uxtb	r1, r2
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <Store_Character+0x5c>)
 800135a:	7011      	strb	r1, [r2, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <Store_Character+0x60>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	5453      	strb	r3, [r2, r1]
        sentenceBuffer[sentenceIndex] = '\0';  // Null-terminate the string
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <Store_Character+0x5c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <Store_Character+0x60>)
 800136c:	2100      	movs	r1, #0
 800136e:	5499      	strb	r1, [r3, r2]
    }
    braillePattern = 0;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <Store_Character+0x54>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200004a2 	.word	0x200004a2
 8001384:	200004a1 	.word	0x200004a1
 8001388:	200004a0 	.word	0x200004a0
 800138c:	200003a0 	.word	0x200003a0

08001390 <Send_Sentence>:

/* Function to send the entered braille sentence over UART */
void Send_Sentence(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    // Implement sending the sentence via UART
	if((strcmp(sentenceBuffer, GPS_CODE)) == 0){
 8001394:	490d      	ldr	r1, [pc, #52]	; (80013cc <Send_Sentence+0x3c>)
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <Send_Sentence+0x40>)
 8001398:	f7fe feda 	bl	8000150 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <Send_Sentence+0x18>
		Send_GPS_Data();
 80013a2:	f000 f89d 	bl	80014e0 <Send_GPS_Data>
 80013a6:	e008      	b.n	80013ba <Send_Sentence+0x2a>
	} else{
		HAL_UART_Transmit(&huart1, (uint8_t *)sentenceBuffer, sentenceIndex, HAL_MAX_DELAY);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <Send_Sentence+0x44>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	4907      	ldr	r1, [pc, #28]	; (80013d0 <Send_Sentence+0x40>)
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <Send_Sentence+0x48>)
 80013b6:	f003 fa15 	bl	80047e4 <HAL_UART_Transmit>
	}

    sentenceIndex = 0;  // Reset the buffer index for the next sentence
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <Send_Sentence+0x44>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    sentenceBuffer[0] = '\0';  // Clear the buffer
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <Send_Sentence+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800ab04 	.word	0x0800ab04
 80013d0:	200003a0 	.word	0x200003a0
 80013d4:	200004a0 	.word	0x200004a0
 80013d8:	200008c4 	.word	0x200008c4

080013dc <Send_Braille>:

/* Function to handle the reading, storing, and sending processes of the braille interface */
void Send_Braille(void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	Read_Buttons();
 80013e0:	f7ff fdce 	bl	8000f80 <Read_Buttons>
	// Check if store char button is pressed (PB4)
	if (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET) {
 80013e4:	2110      	movs	r1, #16
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <Send_Braille+0x50>)
 80013e8:	f001 fabc 	bl	8002964 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d109      	bne.n	8001406 <Send_Braille+0x2a>
		Store_Character();
 80013f2:	f7ff ff9b 	bl	800132c <Store_Character>
		//braillePattern = 0;  // Reset the pattern for next input
		while (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 80013f6:	bf00      	nop
 80013f8:	2110      	movs	r1, #16
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <Send_Braille+0x50>)
 80013fc:	f001 fab2 	bl	8002964 <HAL_GPIO_ReadPin>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d0f8      	beq.n	80013f8 <Send_Braille+0x1c>
	}

	// Check if send button is pressed (PB2)
	if (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET) {
 8001406:	2120      	movs	r1, #32
 8001408:	4808      	ldr	r0, [pc, #32]	; (800142c <Send_Braille+0x50>)
 800140a:	f001 faab 	bl	8002964 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d109      	bne.n	8001428 <Send_Braille+0x4c>
		Send_Sentence();
 8001414:	f7ff ffbc 	bl	8001390 <Send_Sentence>
		while (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 8001418:	bf00      	nop
 800141a:	2120      	movs	r1, #32
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <Send_Braille+0x50>)
 800141e:	f001 faa1 	bl	8002964 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d0f8      	beq.n	800141a <Send_Braille+0x3e>
	}
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010c00 	.word	0x40010c00

08001430 <Check_Password>:


void Check_Password(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	while(1){
		Read_Buttons();
 8001434:	f7ff fda4 	bl	8000f80 <Read_Buttons>
		// Check if store char button is pressed (PB4)
		if (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET) {
 8001438:	2110      	movs	r1, #16
 800143a:	4821      	ldr	r0, [pc, #132]	; (80014c0 <Check_Password+0x90>)
 800143c:	f001 fa92 	bl	8002964 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d109      	bne.n	800145a <Check_Password+0x2a>
			Store_Character();
 8001446:	f7ff ff71 	bl	800132c <Store_Character>
			//braillePattern = 0;  // Reset the pattern for next input
			while (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 800144a:	bf00      	nop
 800144c:	2110      	movs	r1, #16
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <Check_Password+0x90>)
 8001450:	f001 fa88 	bl	8002964 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d0f8      	beq.n	800144c <Check_Password+0x1c>
		}

		// Check if send button is pressed (PB2)
		if (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET) {
 800145a:	2120      	movs	r1, #32
 800145c:	4818      	ldr	r0, [pc, #96]	; (80014c0 <Check_Password+0x90>)
 800145e:	f001 fa81 	bl	8002964 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d1e5      	bne.n	8001434 <Check_Password+0x4>
			if(strcmp(sentenceBuffer, PASSWORD) == 0){
 8001468:	4916      	ldr	r1, [pc, #88]	; (80014c4 <Check_Password+0x94>)
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <Check_Password+0x98>)
 800146c:	f7fe fe70 	bl	8000150 <strcmp>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <Check_Password+0x5c>
				UART_SendString(&huart1, "Welcome... \r\n");
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <Check_Password+0x9c>)
 8001478:	4815      	ldr	r0, [pc, #84]	; (80014d0 <Check_Password+0xa0>)
 800147a:	f000 f953 	bl	8001724 <UART_SendString>
				sentenceIndex = 0;  // Reset the buffer index for the next sentence
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <Check_Password+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
				sentenceBuffer[0] = '\0';  // Clear the buffer
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <Check_Password+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
				break;
 800148a:	e016      	b.n	80014ba <Check_Password+0x8a>
			} else{
				UART_SendString(&huart1, "Wrong password..!! \r\n");
 800148c:	4912      	ldr	r1, [pc, #72]	; (80014d8 <Check_Password+0xa8>)
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <Check_Password+0xa0>)
 8001490:	f000 f948 	bl	8001724 <UART_SendString>
				UART_SendString(&huart1, "Please try again \r\n");
 8001494:	4911      	ldr	r1, [pc, #68]	; (80014dc <Check_Password+0xac>)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <Check_Password+0xa0>)
 8001498:	f000 f944 	bl	8001724 <UART_SendString>
				sentenceIndex = 0;  // Reset the buffer index for the next sentence
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <Check_Password+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
				sentenceBuffer[0] = '\0';  // Clear the buffer
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <Check_Password+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
			}

			while (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 80014a8:	bf00      	nop
 80014aa:	2120      	movs	r1, #32
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <Check_Password+0x90>)
 80014ae:	f001 fa59 	bl	8002964 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d0f8      	beq.n	80014aa <Check_Password+0x7a>
		Read_Buttons();
 80014b8:	e7bc      	b.n	8001434 <Check_Password+0x4>
		}
	}
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	0800ab08 	.word	0x0800ab08
 80014c8:	200003a0 	.word	0x200003a0
 80014cc:	0800ab0c 	.word	0x0800ab0c
 80014d0:	200008c4 	.word	0x200008c4
 80014d4:	200004a0 	.word	0x200004a0
 80014d8:	0800ab1c 	.word	0x0800ab1c
 80014dc:	0800ab34 	.word	0x0800ab34

080014e0 <Send_GPS_Data>:


void Send_GPS_Data(void){
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af06      	add	r7, sp, #24
	uint32_t Duration_MS = 500;
 80014e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ea:	60fb      	str	r3, [r7, #12]
	uint32_t Start_Time = SysTick->VAL;
 80014ec:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <Send_GPS_Data+0x1c8>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	60bb      	str	r3, [r7, #8]
	while(1){
		uint32_t Current_Time = SysTick->VAL;
 80014f2:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <Send_GPS_Data+0x1c8>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	607b      	str	r3, [r7, #4]
		uint32_t Elapsed_Time = (Start_Time - Current_Time) / (SystemCoreClock / 1000);
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	1ad2      	subs	r2, r2, r3
 80014fe:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <Send_GPS_Data+0x1cc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	496b      	ldr	r1, [pc, #428]	; (80016b0 <Send_GPS_Data+0x1d0>)
 8001504:	fba1 1303 	umull	r1, r3, r1, r3
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	603b      	str	r3, [r7, #0]

		if (Elapsed_Time >= Duration_MS){
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	f080 80c2 	bcs.w	800169e <Send_GPS_Data+0x1be>
			break;
		}

		if (Wait_for("GGA") == 1) {
 800151a:	4866      	ldr	r0, [pc, #408]	; (80016b4 <Send_GPS_Data+0x1d4>)
 800151c:	f000 fc88 	bl	8001e30 <Wait_for>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d115      	bne.n	8001552 <Send_GPS_Data+0x72>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <Send_GPS_Data+0x1d8>)
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	601a      	str	r2, [r3, #0]
			Copy_upto("*", GGA);
 800152e:	4963      	ldr	r1, [pc, #396]	; (80016bc <Send_GPS_Data+0x1dc>)
 8001530:	4863      	ldr	r0, [pc, #396]	; (80016c0 <Send_GPS_Data+0x1e0>)
 8001532:	f000 fbfd 	bl	8001d30 <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0)
 8001536:	4963      	ldr	r1, [pc, #396]	; (80016c4 <Send_GPS_Data+0x1e4>)
 8001538:	4860      	ldr	r0, [pc, #384]	; (80016bc <Send_GPS_Data+0x1dc>)
 800153a:	f004 fee9 	bl	8006310 <decodeGGA>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <Send_GPS_Data+0x6c>
				flagGGA = 2;  // 2 indicates the data is valid
 8001544:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <Send_GPS_Data+0x1e8>)
 8001546:	2202      	movs	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e002      	b.n	8001552 <Send_GPS_Data+0x72>
			else
				flagGGA = 1;  // 1 indicates the data is invalid
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <Send_GPS_Data+0x1e8>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
		}

		if (Wait_for("RMC") == 1) {
 8001552:	485e      	ldr	r0, [pc, #376]	; (80016cc <Send_GPS_Data+0x1ec>)
 8001554:	f000 fc6c 	bl	8001e30 <Wait_for>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	d115      	bne.n	800158a <Send_GPS_Data+0xaa>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <Send_GPS_Data+0x1d8>)
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	601a      	str	r2, [r3, #0]
			Copy_upto("*", RMC);
 8001566:	495a      	ldr	r1, [pc, #360]	; (80016d0 <Send_GPS_Data+0x1f0>)
 8001568:	4855      	ldr	r0, [pc, #340]	; (80016c0 <Send_GPS_Data+0x1e0>)
 800156a:	f000 fbe1 	bl	8001d30 <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0)
 800156e:	4959      	ldr	r1, [pc, #356]	; (80016d4 <Send_GPS_Data+0x1f4>)
 8001570:	4857      	ldr	r0, [pc, #348]	; (80016d0 <Send_GPS_Data+0x1f0>)
 8001572:	f005 fa6b 	bl	8006a4c <decodeRMC>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d103      	bne.n	8001584 <Send_GPS_Data+0xa4>
				flagRMC = 2;  // 2 indicates the data is valid
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <Send_GPS_Data+0x1f8>)
 800157e:	2202      	movs	r2, #2
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e002      	b.n	800158a <Send_GPS_Data+0xaa>
			else
				flagRMC = 1;  // 1 indicates the data is invalid
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <Send_GPS_Data+0x1f8>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
		}

		if ((flagGGA == 2) | (flagRMC == 2)) {
 800158a:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <Send_GPS_Data+0x1e8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <Send_GPS_Data+0x1f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d044      	beq.n	8001638 <Send_GPS_Data+0x158>
			sprintf(GPS_Buffer, "%02d:%02d:%02d, %02d%02d%02d",
 80015ae:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015b0:	691c      	ldr	r4, [r3, #16]
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015b4:	695d      	ldr	r5, [r3, #20]
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a42      	ldr	r2, [pc, #264]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015be:	4941      	ldr	r1, [pc, #260]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015c0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80015c2:	4840      	ldr	r0, [pc, #256]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80015c6:	9003      	str	r0, [sp, #12]
 80015c8:	9102      	str	r1, [sp, #8]
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	462b      	mov	r3, r5
 80015d0:	4622      	mov	r2, r4
 80015d2:	4942      	ldr	r1, [pc, #264]	; (80016dc <Send_GPS_Data+0x1fc>)
 80015d4:	4842      	ldr	r0, [pc, #264]	; (80016e0 <Send_GPS_Data+0x200>)
 80015d6:	f006 fa1d 	bl	8007a14 <siprintf>
					gpsData.ggastruct.tim.hour, gpsData.ggastruct.tim.min,
					gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day,
					gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
			UART_SendString(&huart2, GPS_Buffer);
 80015da:	4941      	ldr	r1, [pc, #260]	; (80016e0 <Send_GPS_Data+0x200>)
 80015dc:	4841      	ldr	r0, [pc, #260]	; (80016e4 <Send_GPS_Data+0x204>)
 80015de:	f000 f8a1 	bl	8001724 <UART_SendString>
			UART_SendString(&huart2, "\r\n");
 80015e2:	4941      	ldr	r1, [pc, #260]	; (80016e8 <Send_GPS_Data+0x208>)
 80015e4:	483f      	ldr	r0, [pc, #252]	; (80016e4 <Send_GPS_Data+0x204>)
 80015e6:	f000 f89d 	bl	8001724 <UART_SendString>
			memset(GPS_Buffer, '\0', 50);
 80015ea:	2232      	movs	r2, #50	; 0x32
 80015ec:	2100      	movs	r1, #0
 80015ee:	483c      	ldr	r0, [pc, #240]	; (80016e0 <Send_GPS_Data+0x200>)
 80015f0:	f006 fa73 	bl	8007ada <memset>
			sprintf(GPS_Buffer, "%.2f%c, %.2f%c  ",
					gpsData.ggastruct.lcation.latitude,
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <Send_GPS_Data+0x1e4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
			sprintf(GPS_Buffer, "%.2f%c, %.2f%c  ",
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff1f 	bl	800043c <__aeabi_f2d>
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
					gpsData.ggastruct.lcation.NS,
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <Send_GPS_Data+0x1e4>)
 8001604:	791b      	ldrb	r3, [r3, #4]
			sprintf(GPS_Buffer, "%.2f%c, %.2f%c  ",
 8001606:	461e      	mov	r6, r3
					gpsData.ggastruct.lcation.longitude,
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <Send_GPS_Data+0x1e4>)
 800160a:	689b      	ldr	r3, [r3, #8]
			sprintf(GPS_Buffer, "%.2f%c, %.2f%c  ",
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff15 	bl	800043c <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.EW);
 8001616:	492b      	ldr	r1, [pc, #172]	; (80016c4 <Send_GPS_Data+0x1e4>)
 8001618:	7b09      	ldrb	r1, [r1, #12]
			sprintf(GPS_Buffer, "%.2f%c, %.2f%c  ",
 800161a:	9104      	str	r1, [sp, #16]
 800161c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001620:	9600      	str	r6, [sp, #0]
 8001622:	4622      	mov	r2, r4
 8001624:	462b      	mov	r3, r5
 8001626:	4931      	ldr	r1, [pc, #196]	; (80016ec <Send_GPS_Data+0x20c>)
 8001628:	482d      	ldr	r0, [pc, #180]	; (80016e0 <Send_GPS_Data+0x200>)
 800162a:	f006 f9f3 	bl	8007a14 <siprintf>
			UART_SendString(&huart2, GPS_Buffer);
 800162e:	492c      	ldr	r1, [pc, #176]	; (80016e0 <Send_GPS_Data+0x200>)
 8001630:	482c      	ldr	r0, [pc, #176]	; (80016e4 <Send_GPS_Data+0x204>)
 8001632:	f000 f877 	bl	8001724 <UART_SendString>
 8001636:	e019      	b.n	800166c <Send_GPS_Data+0x18c>
		}

		else if ((flagGGA == 1) | (flagRMC == 1)) {
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <Send_GPS_Data+0x1e8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <Send_GPS_Data+0x1f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <Send_GPS_Data+0x18c>
			UART_SendString(&huart2, "NO FIX YET \r\n");
 800165c:	4924      	ldr	r1, [pc, #144]	; (80016f0 <Send_GPS_Data+0x210>)
 800165e:	4821      	ldr	r0, [pc, #132]	; (80016e4 <Send_GPS_Data+0x204>)
 8001660:	f000 f860 	bl	8001724 <UART_SendString>
			UART_SendString(&huart2, "Please wait \r\n");
 8001664:	4923      	ldr	r1, [pc, #140]	; (80016f4 <Send_GPS_Data+0x214>)
 8001666:	481f      	ldr	r0, [pc, #124]	; (80016e4 <Send_GPS_Data+0x204>)
 8001668:	f000 f85c 	bl	8001724 <UART_SendString>
		}

		if (VCCTimeout <= 0) {
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <Send_GPS_Data+0x1d8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f73f af3e 	bgt.w	80014f2 <Send_GPS_Data+0x12>
			VCCTimeout = 5000;  // Reset the timeout
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <Send_GPS_Data+0x1d8>)
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	601a      	str	r2, [r3, #0]

			//reset flags
			flagGGA = flagRMC = 0;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <Send_GPS_Data+0x1f8>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <Send_GPS_Data+0x1f8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <Send_GPS_Data+0x1e8>)
 800168a:	6013      	str	r3, [r2, #0]

			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
			UART_SendString(&huart2, "VCC Issue \r\n");
 800168c:	491a      	ldr	r1, [pc, #104]	; (80016f8 <Send_GPS_Data+0x218>)
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <Send_GPS_Data+0x204>)
 8001690:	f000 f848 	bl	8001724 <UART_SendString>
			UART_SendString(&huart2, "Check Connection \r\n");
 8001694:	4919      	ldr	r1, [pc, #100]	; (80016fc <Send_GPS_Data+0x21c>)
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <Send_GPS_Data+0x204>)
 8001698:	f000 f844 	bl	8001724 <UART_SendString>
	while(1){
 800169c:	e729      	b.n	80014f2 <Send_GPS_Data+0x12>
			break;
 800169e:	bf00      	nop
		}
	}
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a8:	e000e010 	.word	0xe000e010
 80016ac:	20000004 	.word	0x20000004
 80016b0:	10624dd3 	.word	0x10624dd3
 80016b4:	0800ab48 	.word	0x0800ab48
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000258 	.word	0x20000258
 80016c0:	0800ab4c 	.word	0x0800ab4c
 80016c4:	20000320 	.word	0x20000320
 80016c8:	20000398 	.word	0x20000398
 80016cc:	0800ab50 	.word	0x0800ab50
 80016d0:	200002bc 	.word	0x200002bc
 80016d4:	2000034c 	.word	0x2000034c
 80016d8:	2000039c 	.word	0x2000039c
 80016dc:	0800ab54 	.word	0x0800ab54
 80016e0:	20000364 	.word	0x20000364
 80016e4:	2000090c 	.word	0x2000090c
 80016e8:	0800ab74 	.word	0x0800ab74
 80016ec:	0800ab78 	.word	0x0800ab78
 80016f0:	0800ab8c 	.word	0x0800ab8c
 80016f4:	0800ab9c 	.word	0x0800ab9c
 80016f8:	0800abac 	.word	0x0800abac
 80016fc:	0800abbc 	.word	0x0800abbc

08001700 <UART_Receiving_IT_Init>:


void UART_Receiving_IT_Init(void){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &RX_Data, 1) != HAL_OK) {
 8001704:	2201      	movs	r2, #1
 8001706:	4905      	ldr	r1, [pc, #20]	; (800171c <UART_Receiving_IT_Init+0x1c>)
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <UART_Receiving_IT_Init+0x20>)
 800170a:	f003 f8ee 	bl	80048ea <HAL_UART_Receive_IT>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <UART_Receiving_IT_Init+0x18>
		  Error_Handler();
 8001714:	f000 f878 	bl	8001808 <Error_Handler>
	  }
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000256 	.word	0x20000256
 8001720:	200008c4 	.word	0x200008c4

08001724 <UART_SendString>:

//Function to send string over UART(Blocking mode)
void UART_SendString(UART_HandleTypeDef *huart, char *string){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 8001732:	e002      	b.n	800173a <UART_SendString+0x16>
		length++;
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	3301      	adds	r3, #1
 8001738:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f6      	bne.n	8001734 <UART_SendString+0x10>
	}

	HAL_UART_Transmit(huart, (uint8_t *)string, length, HAL_MAX_DELAY);
 8001746:	89fa      	ldrh	r2, [r7, #14]
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f003 f848 	bl	80047e4 <HAL_UART_Transmit>
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_UART_RxCpltCallback>:
    sprintf(buffer, "%.2f", num);  // Convert float to string with 2 decimal places
    UART_SendString(huart, buffer);       // Send the string via UART
}

//Auto Called when receiving a new data over UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_UART_RxCpltCallback+0x94>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d13b      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x8a>
		HAL_UART_Receive_IT(&huart1, &RX_Data, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	4920      	ldr	r1, [pc, #128]	; (80017f4 <HAL_UART_RxCpltCallback+0x98>)
 8001772:	4821      	ldr	r0, [pc, #132]	; (80017f8 <HAL_UART_RxCpltCallback+0x9c>)
 8001774:	f003 f8b9 	bl	80048ea <HAL_UART_Receive_IT>
		if (ALARM_ON == RX_Data){
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_UART_RxCpltCallback+0x98>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b41      	cmp	r3, #65	; 0x41
 800177e:	d132      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x8a>
			DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8001780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001784:	2101      	movs	r1, #1
 8001786:	2000      	movs	r0, #0
 8001788:	f004 f818 	bl	80057bc <DC_MOTOR_Start>
			Buzzer_ON();
 800178c:	f003 fe5e 	bl	800544c <Buzzer_ON>

			DELAY_MS(100);
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e01f      	b.n	80017d6 <HAL_UART_RxCpltCallback+0x7a>
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_UART_RxCpltCallback+0xa0>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_RxCpltCallback+0xa4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_UART_RxCpltCallback+0xa8>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0c9b      	lsrs	r3, r3, #18
 80017a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ac:	fb03 f202 	mul.w	r2, r3, r2
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_UART_RxCpltCallback+0xa4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4913      	ldr	r1, [pc, #76]	; (8001804 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	fba1 1303 	umull	r1, r3, r1, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_UART_RxCpltCallback+0xa0>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d8f8      	bhi.n	80017c2 <HAL_UART_RxCpltCallback+0x66>
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b63      	cmp	r3, #99	; 0x63
 80017da:	d9dc      	bls.n	8001796 <HAL_UART_RxCpltCallback+0x3a>
			DC_MOTOR_Stop(DC_MOTOR1);
 80017dc:	2000      	movs	r0, #0
 80017de:	f004 f87d 	bl	80058dc <DC_MOTOR_Stop>
			Buzzer_OFF();
 80017e2:	f003 fe3f 	bl	8005464 <Buzzer_OFF>
    }

	if (huart->Instance == USART2) {
		//HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
	}
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40013800 	.word	0x40013800
 80017f4:	20000256 	.word	0x20000256
 80017f8:	200008c4 	.word	0x200008c4
 80017fc:	e000e010 	.word	0xe000e010
 8001800:	20000004 	.word	0x20000004
 8001804:	431bde83 	.word	0x431bde83

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_MspInit+0x5c>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_MspInit+0x5c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_MspInit+0x5c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_MspInit+0x60>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_MspInit+0x60>)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(timeout >0)  timeout--;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <SysTick_Handler+0x3c>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <SysTick_Handler+0x1c>
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <SysTick_Handler+0x3c>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SysTick_Handler+0x3c>)
 80018d6:	801a      	strh	r2, [r3, #0]
  if (VCCTimeout>0) VCCTimeout--;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <SysTick_Handler+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd04      	ble.n	80018ea <SysTick_Handler+0x2e>
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SysTick_Handler+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SysTick_Handler+0x40>)
 80018e8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 fcdb 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 80018ee:	f7ff faf9 	bl	8000ee4 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200004a8 	.word	0x200004a8
 80018fc:	20000000 	.word	0x20000000

08001900 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM4_IRQHandler+0x10>)
 8001906:	f001 ff6d 	bl	80037e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000020c 	.word	0x2000020c

08001914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <USART1_IRQHandler+0x10>)
 800191a:	f003 f80b 	bl	8004934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200008c4 	.word	0x200008c4

08001928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr(&huart2);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <USART2_IRQHandler+0x14>)
 800192e:	f000 fb07 	bl	8001f40 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001932:	4802      	ldr	r0, [pc, #8]	; (800193c <USART2_IRQHandler+0x14>)
 8001934:	f002 fffe 	bl	8004934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000090c 	.word	0x2000090c

08001940 <_getpid>:
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
 8001944:	2301      	movs	r3, #1
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_kill>:
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
 8001958:	f006 f912 	bl	8007b80 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	2216      	movs	r2, #22
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_exit>:
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	f04f 31ff 	mov.w	r1, #4294967295
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffe7 	bl	800194e <_kill>
 8001980:	e7fe      	b.n	8001980 <_exit+0x12>

08001982 <_read>:
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e00a      	b.n	80019aa <_read+0x28>
 8001994:	f3af 8000 	nop.w
 8001998:	4601      	mov	r1, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf0      	blt.n	8001994 <_read+0x12>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_write>:
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e009      	b.n	80019e2 <_write+0x26>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f3af 8000 	nop.w
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf1      	blt.n	80019ce <_write+0x12>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <_fstat>:
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <_isatty>:
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	2301      	movs	r3, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <_lseek>:
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <_sbrk>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
 8001a84:	f006 f87c 	bl	8007b80 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20005000 	.word	0x20005000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	200004a4 	.word	0x200004a4
 8001abc:	20000ae8 	.word	0x20000ae8

08001ac0 <SystemInit>:
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_TIM_Base_MspInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aea:	d10c      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	61d3      	str	r3, [r2, #28]
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b04:	e030      	b.n	8001b68 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM4)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_TIM_Base_MspInit+0xa8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12b      	bne.n	8001b68 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	61d3      	str	r3, [r2, #28]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_TIM_Base_MspInit+0xa4>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo1_Pin;
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0xac>)
 8001b54:	f000 fd82 	bl	800265c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	201e      	movs	r0, #30
 8001b5e:	f000 fc94 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b62:	201e      	movs	r0, #30
 8001b64:	f000 fcad 	bl	80024c2 <HAL_NVIC_EnableIRQ>
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40010c00 	.word	0x40010c00

08001b7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d117      	bne.n	8001bcc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_MspPostInit+0x58>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_MspPostInit+0x58>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_TIM_MspPostInit+0x58>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = L298_ENA_Pin;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(L298_ENA_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <HAL_TIM_MspPostInit+0x5c>)
 8001bc8:	f000 fd48 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010800 	.word	0x40010800

08001bdc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <Ringbuf_init+0x38>)
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <Ringbuf_init+0x3c>)
 8001be4:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <Ringbuf_init+0x40>)
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <Ringbuf_init+0x44>)
 8001bea:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <Ringbuf_init+0x48>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <Ringbuf_init+0x48>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <Ringbuf_init+0x48>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <Ringbuf_init+0x48>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0220 	orr.w	r2, r2, #32
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	200008bc 	.word	0x200008bc
 8001c18:	200004ac 	.word	0x200004ac
 8001c1c:	200008c0 	.word	0x200008c0
 8001c20:	200006b4 	.word	0x200006b4
 8001c24:	2000090c 	.word	0x2000090c

08001c28 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c40:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d009      	beq.n	8001c62 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	79f9      	ldrb	r1, [r7, #7]
 8001c58:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <Uart_read+0x54>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <Uart_read+0x54>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d102      	bne.n	8001c8c <Uart_read+0x20>
  {
    return -1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e013      	b.n	8001cb4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <Uart_read+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <Uart_read+0x54>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c98:	5cd3      	ldrb	r3, [r2, r3]
 8001c9a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <Uart_read+0x54>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <Uart_read+0x54>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200008bc 	.word	0x200008bc

08001cc4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <IsDataAvailable+0x30>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <IsDataAvailable+0x30>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200008bc 	.word	0x200008bc

08001cf8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <Uart_peek+0x34>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <Uart_peek+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d102      	bne.n	8001d16 <Uart_peek+0x1e>
  {
    return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	e006      	b.n	8001d24 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <Uart_peek+0x34>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <Uart_peek+0x34>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	200008bc 	.word	0x200008bc

08001d30 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fa10 	bl	8000164 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001d4c:	e01e      	b.n	8001d8c <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <Copy_upto+0xf8>)
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <Copy_upto+0xf8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	4403      	add	r3, r0
 8001d60:	5c8a      	ldrb	r2, [r1, r2]
 8001d62:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <Copy_upto+0xf8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <Copy_upto+0xf8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001d80:	bf00      	nop
 8001d82:	f7ff ff9f 	bl	8001cc4 <IsDataAvailable>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0fa      	beq.n	8001d82 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001d8c:	f7ff ffb4 	bl	8001cf8 <Uart_peek>
 8001d90:	4601      	mov	r1, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4299      	cmp	r1, r3
 8001d9c:	d1d7      	bne.n	8001d4e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001d9e:	e027      	b.n	8001df0 <Copy_upto+0xc0>
	{
		so_far++;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001da6:	f7ff ff61 	bl	8001c6c <Uart_read>
 8001daa:	4601      	mov	r1, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	613a      	str	r2, [r7, #16]
 8001db2:	461a      	mov	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d101      	bne.n	8001dc8 <Copy_upto+0x98>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e02a      	b.n	8001e1e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <Copy_upto+0xfc>)
 8001dca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dce:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001dd0:	bf00      	nop
 8001dd2:	f7ff ff77 	bl	8001cc4 <IsDataAvailable>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <Copy_upto+0xb4>
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <Copy_upto+0xfc>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f6      	bne.n	8001dd2 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <Copy_upto+0xfc>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <Copy_upto+0xc0>
 8001dec:	2300      	movs	r3, #0
 8001dee:	e016      	b.n	8001e1e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001df0:	f7ff ff82 	bl	8001cf8 <Uart_peek>
 8001df4:	4601      	mov	r1, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4299      	cmp	r1, r3
 8001e00:	d0ce      	beq.n	8001da0 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d002      	beq.n	8001e10 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
		goto again;
 8001e0e:	e79d      	b.n	8001d4c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d101      	bne.n	8001e1c <Copy_upto+0xec>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <Copy_upto+0xee>
	else return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200008bc 	.word	0x200008bc
 8001e2c:	200004a8 	.word	0x200004a8

08001e30 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe f991 	bl	8000164 <strlen>
 8001e42:	4603      	mov	r3, r0
 8001e44:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001e46:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <Wait_for+0x108>)
 8001e48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e4c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001e4e:	bf00      	nop
 8001e50:	f7ff ff38 	bl	8001cc4 <IsDataAvailable>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <Wait_for+0x32>
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <Wait_for+0x108>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f6      	bne.n	8001e50 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <Wait_for+0x108>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <Wait_for+0x6e>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e060      	b.n	8001f30 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <Wait_for+0x10c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <Wait_for+0x10c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d00b      	beq.n	8001e9a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <Wait_for+0x10c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <Wait_for+0x10c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e98:	e001      	b.n	8001e9e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e048      	b.n	8001f30 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001e9e:	f7ff ff2b 	bl	8001cf8 <Uart_peek>
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4299      	cmp	r1, r3
 8001eae:	d1de      	bne.n	8001e6e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001eb0:	e027      	b.n	8001f02 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <Wait_for+0x10c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <Wait_for+0x10c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d101      	bne.n	8001eda <Wait_for+0xaa>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e02a      	b.n	8001f30 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <Wait_for+0x108>)
 8001edc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ee0:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001ee2:	bf00      	nop
 8001ee4:	f7ff feee 	bl	8001cc4 <IsDataAvailable>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <Wait_for+0xc6>
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <Wait_for+0x108>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f6      	bne.n	8001ee4 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <Wait_for+0x108>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <Wait_for+0xd2>
 8001efe:	2300      	movs	r3, #0
 8001f00:	e016      	b.n	8001f30 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001f02:	f7ff fef9 	bl	8001cf8 <Uart_peek>
 8001f06:	4601      	mov	r1, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d0ce      	beq.n	8001eb2 <Wait_for+0x82>
	}

	if (so_far != len)
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d002      	beq.n	8001f22 <Wait_for+0xf2>
	{
		so_far = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f20:	e791      	b.n	8001e46 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d101      	bne.n	8001f2e <Wait_for+0xfe>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <Wait_for+0x100>
	else return 0;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200004a8 	.word	0x200004a8
 8001f3c:	200008bc 	.word	0x200008bc

08001f40 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d013      	beq.n	8001f8a <Uart_isr+0x4a>
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00e      	beq.n	8001f8a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <Uart_isr+0xb4>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe50 	bl	8001c28 <store_char>
        return;
 8001f88:	e031      	b.n	8001fee <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02c      	beq.n	8001fee <Uart_isr+0xae>
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d027      	beq.n	8001fee <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <Uart_isr+0xb8>)
 8001fa0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <Uart_isr+0xb8>)
 8001fa6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d108      	bne.n	8001fc0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fbc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001fbe:	e015      	b.n	8001fec <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <Uart_isr+0xb8>)
 8001fc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <Uart_isr+0xb8>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <Uart_isr+0xb8>)
 8001fce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <Uart_isr+0xb8>)
 8001fda:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	7bba      	ldrb	r2, [r7, #14]
 8001fea:	605a      	str	r2, [r3, #4]
    	return;
 8001fec:	bf00      	nop
    }
}
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200008bc 	.word	0x200008bc
 8001ff8:	200006b4 	.word	0x200006b4

08001ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_USART1_UART_Init+0x50>)
 8002004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800200c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002034:	f002 fb86 	bl	8004744 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800203e:	f7ff fbe3 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200008c4 	.word	0x200008c4
 800204c:	40013800 	.word	0x40013800

08002050 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART2_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800205c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002088:	f002 fb5c 	bl	8004744 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f7ff fbb9 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000090c 	.word	0x2000090c
 80020a0:	40004400 	.word	0x40004400

080020a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_UART_MspInit+0x118>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d13a      	bne.n	800213a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	4619      	mov	r1, r3
 8002108:	482e      	ldr	r0, [pc, #184]	; (80021c4 <HAL_UART_MspInit+0x120>)
 800210a:	f000 faa7 	bl	800265c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800210e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	4619      	mov	r1, r3
 8002122:	4828      	ldr	r0, [pc, #160]	; (80021c4 <HAL_UART_MspInit+0x120>)
 8002124:	f000 fa9a 	bl	800265c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2025      	movs	r0, #37	; 0x25
 800212e:	f000 f9ac 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002132:	2025      	movs	r0, #37	; 0x25
 8002134:	f000 f9c5 	bl	80024c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002138:	e03c      	b.n	80021b4 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_UART_MspInit+0x124>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d137      	bne.n	80021b4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 800214a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214e:	61d3      	str	r3, [r2, #28]
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_UART_MspInit+0x11c>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002174:	2304      	movs	r3, #4
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	4619      	mov	r1, r3
 8002186:	480f      	ldr	r0, [pc, #60]	; (80021c4 <HAL_UART_MspInit+0x120>)
 8002188:	f000 fa68 	bl	800265c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800218c:	2308      	movs	r3, #8
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	4619      	mov	r1, r3
 800219e:	4809      	ldr	r0, [pc, #36]	; (80021c4 <HAL_UART_MspInit+0x120>)
 80021a0:	f000 fa5c 	bl	800265c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2026      	movs	r0, #38	; 0x26
 80021aa:	f000 f96e 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ae:	2026      	movs	r0, #38	; 0x26
 80021b0:	f000 f987 	bl	80024c2 <HAL_NVIC_EnableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40004400 	.word	0x40004400

080021cc <Reset_Handler>:
 80021cc:	f7ff fc78 	bl	8001ac0 <SystemInit>
 80021d0:	480b      	ldr	r0, [pc, #44]	; (8002200 <LoopFillZerobss+0xe>)
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <LoopFillZerobss+0x12>)
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <LoopFillZerobss+0x16>)
 80021d6:	2300      	movs	r3, #0
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:
 80021da:	58d4      	ldr	r4, [r2, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:
 80021e0:	18c4      	adds	r4, r0, r3
 80021e2:	428c      	cmp	r4, r1
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <LoopFillZerobss+0x1a>)
 80021e8:	4c09      	ldr	r4, [pc, #36]	; (8002210 <LoopFillZerobss+0x1e>)
 80021ea:	2300      	movs	r3, #0
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>
 80021f6:	f005 fcc9 	bl	8007b8c <__libc_init_array>
 80021fa:	f7fe fd85 	bl	8000d08 <main>
 80021fe:	4770      	bx	lr
 8002200:	20000000 	.word	0x20000000
 8002204:	200001f0 	.word	0x200001f0
 8002208:	0800afe8 	.word	0x0800afe8
 800220c:	200001f0 	.word	0x200001f0
 8002210:	20000ae4 	.word	0x20000ae4

08002214 <ADC1_2_IRQHandler>:
 8002214:	e7fe      	b.n	8002214 <ADC1_2_IRQHandler>
	...

08002218 <HAL_Init>:
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f923 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>
 8002234:	f7ff faee 	bl	8001814 <HAL_MspInit>
 8002238:	2300      	movs	r3, #0
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f93b 	bl	80024de <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f903 	bl	800248a <HAL_NVIC_SetPriority>
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
 800228e:	2301      	movs	r3, #1
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000004 	.word	0x20000004
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_IncTick>:
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x1c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x20>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_IncTick+0x20>)
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	20000954 	.word	0x20000954

080022c8 <HAL_GetTick>:
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_GetTick+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000954 	.word	0x20000954

080022dc <__NVIC_SetPriorityGrouping>:
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <__NVIC_EnableIRQ+0x34>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
 8002424:	4313      	orrs	r3, r2
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <SysTick_Config>:
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff90 	bl	8002378 <__NVIC_SetPriority>
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff2d 	bl	80022dc <__NVIC_SetPriorityGrouping>
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	f7ff ff42 	bl	8002324 <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff90 	bl	80023cc <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5f 	bl	8002378 <__NVIC_SetPriority>
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff35 	bl	8002340 <__NVIC_EnableIRQ>
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_DMA_Abort>:
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d008      	beq.n	8002520 <HAL_DMA_Abort+0x2a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2020 	strb.w	r2, [r3, #32]
 800251c:	2301      	movs	r3, #1
 800251e:	e020      	b.n	8002562 <HAL_DMA_Abort+0x6c>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 020e 	bic.w	r2, r2, #14
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_DMA_Abort_IT>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d005      	beq.n	8002590 <HAL_DMA_Abort_IT+0x24>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2204      	movs	r2, #4
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e051      	b.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 020e 	bic.w	r2, r2, #14
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_DMA_Abort_IT+0xd4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d029      	beq.n	800260e <HAL_DMA_Abort_IT+0xa2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_DMA_Abort_IT+0xd8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Abort_IT+0x9e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_DMA_Abort_IT+0xdc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_Abort_IT+0x98>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_DMA_Abort_IT+0xe0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_Abort_IT+0x92>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_DMA_Abort_IT+0xe4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x8c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_DMA_Abort_IT+0xe8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_DMA_Abort_IT+0x86>
 80025ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f0:	e00e      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f6:	e00b      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fc:	e008      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	e005      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 8002604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002608:	e002      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 800260a:	2310      	movs	r3, #16
 800260c:	e000      	b.n	8002610 <HAL_DMA_Abort_IT+0xa4>
 800260e:	2301      	movs	r3, #1
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_DMA_Abort_IT+0xec>)
 8002612:	6053      	str	r3, [r2, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2020 	strb.w	r2, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_DMA_Abort_IT+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020008 	.word	0x40020008
 8002644:	4002001c 	.word	0x4002001c
 8002648:	40020030 	.word	0x40020030
 800264c:	40020044 	.word	0x40020044
 8002650:	40020058 	.word	0x40020058
 8002654:	4002006c 	.word	0x4002006c
 8002658:	40020000 	.word	0x40020000

0800265c <HAL_GPIO_Init>:
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	; 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	e169      	b.n	8002944 <HAL_GPIO_Init+0x2e8>
 8002670:	2201      	movs	r2, #1
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8158 	bne.w	800293e <HAL_GPIO_Init+0x2e2>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d05e      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 8002698:	4a98      	ldr	r2, [pc, #608]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d875      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 800269e:	4a98      	ldr	r2, [pc, #608]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d058      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026a4:	4a96      	ldr	r2, [pc, #600]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d86f      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026aa:	4a96      	ldr	r2, [pc, #600]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d052      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026b0:	4a94      	ldr	r2, [pc, #592]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d869      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026b6:	4a94      	ldr	r2, [pc, #592]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04c      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026bc:	4a92      	ldr	r2, [pc, #584]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d863      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026c2:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d046      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026c8:	4a90      	ldr	r2, [pc, #576]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d85d      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d82a      	bhi.n	8002728 <HAL_GPIO_Init+0xcc>
 80026d2:	2b12      	cmp	r3, #18
 80026d4:	d859      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_GPIO_Init+0x80>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002757 	.word	0x08002757
 80026e0:	08002731 	.word	0x08002731
 80026e4:	08002743 	.word	0x08002743
 80026e8:	08002785 	.word	0x08002785
 80026ec:	0800278b 	.word	0x0800278b
 80026f0:	0800278b 	.word	0x0800278b
 80026f4:	0800278b 	.word	0x0800278b
 80026f8:	0800278b 	.word	0x0800278b
 80026fc:	0800278b 	.word	0x0800278b
 8002700:	0800278b 	.word	0x0800278b
 8002704:	0800278b 	.word	0x0800278b
 8002708:	0800278b 	.word	0x0800278b
 800270c:	0800278b 	.word	0x0800278b
 8002710:	0800278b 	.word	0x0800278b
 8002714:	0800278b 	.word	0x0800278b
 8002718:	0800278b 	.word	0x0800278b
 800271c:	0800278b 	.word	0x0800278b
 8002720:	08002739 	.word	0x08002739
 8002724:	0800274d 	.word	0x0800274d
 8002728:	4a79      	ldr	r2, [pc, #484]	; (8002910 <HAL_GPIO_Init+0x2b4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 800272e:	e02c      	b.n	800278a <HAL_GPIO_Init+0x12e>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	e029      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	3304      	adds	r3, #4
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	e024      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	3308      	adds	r3, #8
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	e01f      	b.n	800278c <HAL_GPIO_Init+0x130>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	330c      	adds	r3, #12
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	e01a      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_GPIO_Init+0x108>
 800275e:	2304      	movs	r3, #4
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	e013      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_GPIO_Init+0x11c>
 800276c:	2308      	movs	r3, #8
 800276e:	623b      	str	r3, [r7, #32]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e009      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002778:	2308      	movs	r3, #8
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	e003      	b.n	800278c <HAL_GPIO_Init+0x130>
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x130>
 800278a:	bf00      	nop
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d801      	bhi.n	8002796 <HAL_GPIO_Init+0x13a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	e001      	b.n	800279a <HAL_GPIO_Init+0x13e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	d802      	bhi.n	80027a8 <HAL_GPIO_Init+0x14c>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x152>
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3b08      	subs	r3, #8
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	210f      	movs	r1, #15
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80b1 	beq.w	800293e <HAL_GPIO_Init+0x2e2>
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_GPIO_Init+0x2c0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_GPIO_Init+0x1ec>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HAL_GPIO_Init+0x2c4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00d      	beq.n	8002844 <HAL_GPIO_Init+0x1e8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3e      	ldr	r2, [pc, #248]	; (8002924 <HAL_GPIO_Init+0x2c8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <HAL_GPIO_Init+0x1e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3d      	ldr	r2, [pc, #244]	; (8002928 <HAL_GPIO_Init+0x2cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_GPIO_Init+0x1e0>
 8002838:	2303      	movs	r3, #3
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 800283c:	2304      	movs	r3, #4
 800283e:	e004      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002840:	2302      	movs	r3, #2
 8002842:	e002      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002848:	2300      	movs	r3, #0
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	f002 0203 	and.w	r2, r2, #3
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	4093      	lsls	r3, r2
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	492f      	ldr	r1, [pc, #188]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x226>
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	492c      	ldr	r1, [pc, #176]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x234>
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	4928      	ldr	r1, [pc, #160]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x24e>
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x25c>
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	491e      	ldr	r1, [pc, #120]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x276>
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4918      	ldr	r1, [pc, #96]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x284>
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4914      	ldr	r1, [pc, #80]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d021      	beq.n	8002930 <HAL_GPIO_Init+0x2d4>
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e021      	b.n	800293e <HAL_GPIO_Init+0x2e2>
 80028fa:	bf00      	nop
 80028fc:	10320000 	.word	0x10320000
 8002900:	10310000 	.word	0x10310000
 8002904:	10220000 	.word	0x10220000
 8002908:	10210000 	.word	0x10210000
 800290c:	10120000 	.word	0x10120000
 8002910:	10110000 	.word	0x10110000
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000
 800291c:	40010800 	.word	0x40010800
 8002920:	40010c00 	.word	0x40010c00
 8002924:	40011000 	.word	0x40011000
 8002928:	40011400 	.word	0x40011400
 800292c:	40010400 	.word	0x40010400
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_GPIO_Init+0x304>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	43db      	mvns	r3, r3
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <HAL_GPIO_Init+0x304>)
 800293a:	4013      	ands	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	f47f ae8e 	bne.w	8002670 <HAL_GPIO_Init+0x14>
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	372c      	adds	r7, #44	; 0x2c
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_GPIO_ReadPin>:
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_GPIO_ReadPin+0x1e>
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e001      	b.n	8002986 <HAL_GPIO_ReadPin+0x22>
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <HAL_GPIO_WritePin>:
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	807b      	strh	r3, [r7, #2]
 800299e:	4613      	mov	r3, r2
 80029a0:	707b      	strb	r3, [r7, #1]
 80029a2:	787b      	ldrb	r3, [r7, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_WritePin+0x1e>
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e003      	b.n	80029b8 <HAL_GPIO_WritePin+0x26>
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_OscConfig>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e272      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8087 	beq.w	8002af2 <HAL_RCC_OscConfig+0x12e>
 80029e4:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46>
 80029f0:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
 80029fc:	4b8c      	ldr	r3, [pc, #560]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5e>
 8002a0a:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d06c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x12c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d168      	bne.n	8002af0 <HAL_RCC_OscConfig+0x12c>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e24c      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x76>
 8002a2c:	4b80      	ldr	r3, [pc, #512]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7f      	ldr	r2, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e02e      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7a      	ldr	r2, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a77      	ldr	r2, [pc, #476]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xbc>
 8002a66:	4b72      	ldr	r3, [pc, #456]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a71      	ldr	r2, [pc, #452]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
 8002a80:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x104>
 8002aa0:	f7ff fc12 	bl	80022c8 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xf6>
 8002aa8:	f7ff fc0e 	bl	80022c8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xf6>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e200      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe4>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
 8002ac8:	f7ff fbfe 	bl	80022c8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
 8002ad0:	f7ff fbfa 	bl	80022c8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x11e>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1ec      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002ae2:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x10c>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x12e>
 8002af0:	bf00      	nop
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x202>
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x15e>
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x18c>
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x176>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c0      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4939      	ldr	r1, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1d6>
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f7ff fbb3 	bl	80022c8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
 8002b66:	f7ff fbaf 	bl	80022c8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1b4>
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002b78:	4b2d      	ldr	r3, [pc, #180]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1a2>
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4927      	ldr	r1, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x202>
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f7ff fb92 	bl	80022c8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1f6>
 8002ba8:	f7ff fb8e 	bl	80022c8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1f6>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e180      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1e4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d03a      	beq.n	8002c48 <HAL_RCC_OscConfig+0x284>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <HAL_RCC_OscConfig+0x24a>
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f7ff fb72 	bl	80022c8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x236>
 8002be8:	f7ff fb6e 	bl	80022c8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x236>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e160      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x224>
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 face 	bl	80031a8 <RCC_Delay>
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x284>
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_OscConfig+0x274>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f7ff fb58 	bl	80022c8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]
 8002c1a:	e00f      	b.n	8002c3c <HAL_RCC_OscConfig+0x278>
 8002c1c:	f7ff fb54 	bl	80022c8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d908      	bls.n	8002c3c <HAL_RCC_OscConfig+0x278>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e146      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	42420000 	.word	0x42420000
 8002c38:	42420480 	.word	0x42420480
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e9      	bne.n	8002c1c <HAL_RCC_OscConfig+0x258>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80a6 	beq.w	8002da2 <HAL_RCC_OscConfig+0x3de>
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2be>
 8002c66:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a87      	ldr	r2, [pc, #540]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
 8002c82:	4b82      	ldr	r3, [pc, #520]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2fc>
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	f7ff fb15 	bl	80022c8 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
 8002ca2:	f7ff fb11 	bl	80022c8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e103      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002cb4:	4b75      	ldr	r3, [pc, #468]	; (8002e8c <HAL_RCC_OscConfig+0x4c8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2de>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d106      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x312>
 8002cc8:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	e02d      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002cde:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6213      	str	r3, [r2, #32]
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	e01c      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCC_OscConfig+0x356>
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6213      	str	r3, [r2, #32]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d015      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3a2>
 8002d3a:	f7ff fac5 	bl	80022c8 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x394>
 8002d42:	f7ff fac1 	bl	80022c8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x394>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0b1      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ee      	beq.n	8002d42 <HAL_RCC_OscConfig+0x37e>
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
 8002d66:	f7ff faaf 	bl	80022c8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
 8002d6e:	f7ff faab 	bl	80022c8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e09b      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002d84:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3aa>
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3de>
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_RCC_OscConfig+0x4f6>
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d061      	beq.n	8002e7c <HAL_RCC_OscConfig+0x4b8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d146      	bne.n	8002e4e <HAL_RCC_OscConfig+0x48a>
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f7ff fa7f 	bl	80022c8 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x41c>
 8002dce:	f7ff fa7b 	bl	80022c8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x41c>
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e06d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x40a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4921      	ldr	r1, [pc, #132]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a19      	ldr	r1, [r3, #32]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	491b      	ldr	r1, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f7ff fa4f 	bl	80022c8 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x47c>
 8002e2e:	f7ff fa4b 	bl	80022c8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x47c>
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e03d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x46a>
 8002e4c:	e035      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f7ff fa38 	bl	80022c8 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
 8002e5c:	f7ff fa34 	bl	80022c8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4aa>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e026      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x498>
 8002e7a:	e01e      	b.n	8002eba <HAL_RCC_OscConfig+0x4f6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4d0>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e019      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42420060 	.word	0x42420060
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x500>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4f2>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4f6>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4f8>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_RCC_ClockConfig>:
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0d0      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4965      	ldr	r1, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x92>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x68>
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f2e:	6053      	str	r3, [r2, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x80>
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f46:	6053      	str	r3, [r2, #4]
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d040      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xb6>
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d115      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e073      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4936      	ldr	r1, [pc, #216]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	f7ff f986 	bl	80022c8 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
 8002fc0:	f7ff f982 	bl	80022c8 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e053      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d210      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x150>
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4922      	ldr	r1, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x150>
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1b6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x16e>
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x18e>
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f8e4 	bl	8002244 <HAL_InitTick>
 800307c:	2300      	movs	r3, #0
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40022000 	.word	0x40022000
 800308c:	40021000 	.word	0x40021000
 8003090:	0800abd8 	.word	0x0800abd8
 8003094:	20000004 	.word	0x20000004
 8003098:	20000008 	.word	0x20000008

0800309c <HAL_RCC_GetSysClockFreq>:
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x30>
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x36>
 80030ca:	e027      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x80>
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e027      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0c9b      	lsrs	r3, r3, #18
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x70>
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_GetSysClockFreq+0x94>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	0c5b      	lsrs	r3, r3, #17
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fe:	fb03 f202 	mul.w	r2, r3, r2
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x7a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a0c      	ldr	r2, [pc, #48]	; (8003140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x86>
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	bf00      	nop
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4618      	mov	r0, r3
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	007a1200 	.word	0x007a1200
 8003138:	0800abf0 	.word	0x0800abf0
 800313c:	0800ac00 	.word	0x0800ac00
 8003140:	003d0900 	.word	0x003d0900

08003144 <HAL_RCC_GetHCLKFreq>:
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
 8003148:	4b02      	ldr	r3, [pc, #8]	; (8003154 <HAL_RCC_GetHCLKFreq+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetPCLK1Freq>:
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
 800315c:	f7ff fff2 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	0800abe8 	.word	0x0800abe8

08003180 <HAL_RCC_GetPCLK2Freq>:
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
 8003184:	f7ff ffde 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	0800abe8 	.word	0x0800abe8

080031a8 <RCC_Delay>:
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <RCC_Delay+0x34>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <RCC_Delay+0x38>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0a5b      	lsrs	r3, r3, #9
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	bf00      	nop
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1e5a      	subs	r2, r3, #1
 80031ca:	60fa      	str	r2, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <RCC_Delay+0x1c>
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	20000004 	.word	0x20000004
 80031e0:	10624dd3 	.word	0x10624dd3

080031e4 <HAL_TIM_Base_Init>:
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_Base_Init+0x12>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e041      	b.n	800327a <HAL_TIM_Base_Init+0x96>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_TIM_Base_Init+0x2c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fc5e 	bl	8001acc <HAL_TIM_Base_MspInit>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f000 fe6c 	bl	8003f00 <TIM_Base_SetConfig>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003278:	2300      	movs	r3, #0
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_TIM_Base_Start_IT>:
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d001      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e03a      	b.n	8003312 <HAL_TIM_Base_Start_IT+0x8e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_TIM_Base_Start_IT+0x98>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d009      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_TIM_Base_Start_IT+0x9c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x58>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <HAL_TIM_Base_Start_IT+0xa0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_TIM_Base_Start_IT+0x7c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d010      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x8c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e007      	b.n	8003310 <HAL_TIM_Base_Start_IT+0x8c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	2300      	movs	r3, #0
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_TIM_PWM_Init>:
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_PWM_Init+0x12>
 8003336:	2301      	movs	r3, #1
 8003338:	e041      	b.n	80033be <HAL_TIM_PWM_Init+0x96>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_PWM_Init+0x2c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f839 	bl	80033c6 <HAL_TIM_PWM_MspInit>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 fdca 	bl	8003f00 <TIM_Base_SetConfig>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033bc:	2300      	movs	r3, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_PWM_MspInit>:
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_PWM_Start>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_TIM_PWM_Start+0x24>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e022      	b.n	8003442 <HAL_TIM_PWM_Start+0x6a>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d109      	bne.n	8003416 <HAL_TIM_PWM_Start+0x3e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e015      	b.n	8003442 <HAL_TIM_PWM_Start+0x6a>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d109      	bne.n	8003430 <HAL_TIM_PWM_Start+0x58>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e008      	b.n	8003442 <HAL_TIM_PWM_Start+0x6a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_TIM_PWM_Start+0x72>
 8003446:	2301      	movs	r3, #1
 8003448:	e05e      	b.n	8003508 <HAL_TIM_PWM_Start+0x130>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_TIM_PWM_Start+0x82>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003458:	e013      	b.n	8003482 <HAL_TIM_PWM_Start+0xaa>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d104      	bne.n	800346a <HAL_TIM_PWM_Start+0x92>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003468:	e00b      	b.n	8003482 <HAL_TIM_PWM_Start+0xaa>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d104      	bne.n	800347a <HAL_TIM_PWM_Start+0xa2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	e003      	b.n	8003482 <HAL_TIM_PWM_Start+0xaa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2201      	movs	r2, #1
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f8c5 	bl	800461a <TIM_CCxChannelCmd>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_TIM_PWM_Start+0x138>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d107      	bne.n	80034aa <HAL_TIM_PWM_Start+0xd2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIM_PWM_Start+0x138>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_TIM_PWM_Start+0xfa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d009      	beq.n	80034d2 <HAL_TIM_PWM_Start+0xfa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <HAL_TIM_PWM_Start+0x13c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIM_PWM_Start+0xfa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_TIM_PWM_Start+0x140>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d111      	bne.n	80034f6 <HAL_TIM_PWM_Start+0x11e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d010      	beq.n	8003506 <HAL_TIM_PWM_Start+0x12e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e007      	b.n	8003506 <HAL_TIM_PWM_Start+0x12e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	2300      	movs	r3, #0
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <HAL_TIM_IC_Init>:
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_IC_Init+0x12>
 800352a:	2301      	movs	r3, #1
 800352c:	e041      	b.n	80035b2 <HAL_TIM_IC_Init+0x96>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_IC_Init+0x2c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f839 	bl	80035ba <HAL_TIM_IC_MspInit>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fcd0 	bl	8003f00 <TIM_Base_SetConfig>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035b0:	2300      	movs	r3, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_IC_MspInit>:
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_IC_Start_IT>:
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0x1e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e013      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x46>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0x2e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x46>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0x3e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e003      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x46>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	73bb      	strb	r3, [r7, #14]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_TIM_IC_Start_IT+0x58>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e013      	b.n	800364c <HAL_TIM_IC_Start_IT+0x80>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b04      	cmp	r3, #4
 8003628:	d104      	bne.n	8003634 <HAL_TIM_IC_Start_IT+0x68>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e00b      	b.n	800364c <HAL_TIM_IC_Start_IT+0x80>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d104      	bne.n	8003644 <HAL_TIM_IC_Start_IT+0x78>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e003      	b.n	800364c <HAL_TIM_IC_Start_IT+0x80>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364a:	b2db      	uxtb	r3, r3
 800364c:	737b      	strb	r3, [r7, #13]
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_TIM_IC_Start_IT+0x8e>
 8003654:	7b7b      	ldrb	r3, [r7, #13]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_TIM_IC_Start_IT+0x92>
 800365a:	2301      	movs	r3, #1
 800365c:	e0b8      	b.n	80037d0 <HAL_TIM_IC_Start_IT+0x204>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	e013      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xca>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0xb2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	e00b      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xca>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d104      	bne.n	800368e <HAL_TIM_IC_Start_IT+0xc2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	e003      	b.n	8003696 <HAL_TIM_IC_Start_IT+0xca>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Start_IT+0xda>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a4:	e013      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x102>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_IC_Start_IT+0xea>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x102>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_IC_Start_IT+0xfa>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	e003      	b.n	80036ce <HAL_TIM_IC_Start_IT+0x102>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d841      	bhi.n	8003758 <HAL_TIM_IC_Start_IT+0x18c>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <HAL_TIM_IC_Start_IT+0x110>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003759 	.word	0x08003759
 80036e4:	08003759 	.word	0x08003759
 80036e8:	08003759 	.word	0x08003759
 80036ec:	08003723 	.word	0x08003723
 80036f0:	08003759 	.word	0x08003759
 80036f4:	08003759 	.word	0x08003759
 80036f8:	08003759 	.word	0x08003759
 80036fc:	08003735 	.word	0x08003735
 8003700:	08003759 	.word	0x08003759
 8003704:	08003759 	.word	0x08003759
 8003708:	08003759 	.word	0x08003759
 800370c:	08003747 	.word	0x08003747
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0202 	orr.w	r2, r2, #2
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e01d      	b.n	800375e <HAL_TIM_IC_Start_IT+0x192>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0204 	orr.w	r2, r2, #4
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e014      	b.n	800375e <HAL_TIM_IC_Start_IT+0x192>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	e00b      	b.n	800375e <HAL_TIM_IC_Start_IT+0x192>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0210 	orr.w	r2, r2, #16
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e002      	b.n	800375e <HAL_TIM_IC_Start_IT+0x192>
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	bf00      	nop
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d134      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0x202>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 ff54 	bl	800461a <TIM_CCxChannelCmd>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIM_IC_Start_IT+0x20c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_TIM_IC_Start_IT+0x1ce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d009      	beq.n	800379a <HAL_TIM_IC_Start_IT+0x1ce>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIM_IC_Start_IT+0x210>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIM_IC_Start_IT+0x1ce>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <HAL_TIM_IC_Start_IT+0x214>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d111      	bne.n	80037be <HAL_TIM_IC_Start_IT+0x1f2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d010      	beq.n	80037ce <HAL_TIM_IC_Start_IT+0x202>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e007      	b.n	80037ce <HAL_TIM_IC_Start_IT+0x202>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800

080037e4 <HAL_TIM_IRQHandler>:
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x5c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x5c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0202 	mvn.w	r2, #2
 8003810:	611a      	str	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x4a>
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fb46 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x56>
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb4a 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb50 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0xb0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0xb0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0204 	mvn.w	r2, #4
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	771a      	strb	r2, [r3, #28]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x9e>
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fb1c 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xaa>
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fb20 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fb26 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x104>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x104>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0208 	mvn.w	r2, #8
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	771a      	strb	r2, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0xf2>
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd faf2 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0xfe>
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 faf6 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fafc 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0x158>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0x158>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2208      	movs	r2, #8
 8003912:	771a      	strb	r2, [r3, #28]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x146>
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fac8 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x152>
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 facc 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fad2 	bl	8003eda <HAL_TIM_PWM_PulseFinishedCallback>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x184>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x184>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0201 	mvn.w	r2, #1
 8003960:	611a      	str	r2, [r3, #16]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fab3 	bl	8000ece <HAL_TIM_PeriodElapsedCallback>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1b0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1b0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fecf 	bl	8004732 <HAL_TIMEx_BreakCallback>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1dc>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1dc>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b8:	611a      	str	r2, [r3, #16]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa96 	bl	8003eec <HAL_TIM_TriggerCallback>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_IRQHandler+0x208>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d107      	bne.n	80039ec <HAL_TIM_IRQHandler+0x208>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0220 	mvn.w	r2, #32
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fe9a 	bl	8004720 <HAL_TIMEx_CommutCallback>
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_IC_ConfigChannel>:
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e088      	b.n	8003b24 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IC_ConfigChannel+0x64>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f000 fc50 	bl	80042d4 <TIM_TI1_SetConfig>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 020c 	bic.w	r2, r2, #12
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6999      	ldr	r1, [r3, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	619a      	str	r2, [r3, #24]
 8003a56:	e060      	b.n	8003b1a <HAL_TIM_IC_ConfigChannel+0x126>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d11c      	bne.n	8003a98 <HAL_TIM_IC_ConfigChannel+0xa4>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f000 fcb9 	bl	80043e4 <TIM_TI2_SetConfig>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a80:	619a      	str	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6999      	ldr	r1, [r3, #24]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	021a      	lsls	r2, r3, #8
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	619a      	str	r2, [r3, #24]
 8003a96:	e040      	b.n	8003b1a <HAL_TIM_IC_ConfigChannel+0x126>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11b      	bne.n	8003ad6 <HAL_TIM_IC_ConfigChannel+0xe2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f000 fd04 	bl	80044ba <TIM_TI3_SetConfig>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 020c 	bic.w	r2, r2, #12
 8003ac0:	61da      	str	r2, [r3, #28]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
 8003ad4:	e021      	b.n	8003b1a <HAL_TIM_IC_ConfigChannel+0x126>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d11c      	bne.n	8003b16 <HAL_TIM_IC_ConfigChannel+0x122>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f000 fd20 	bl	8004530 <TIM_TI4_SetConfig>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003afe:	61da      	str	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69d9      	ldr	r1, [r3, #28]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
 8003b14:	e001      	b.n	8003b1a <HAL_TIM_IC_ConfigChannel+0x126>
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_PWM_ConfigChannel>:
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0ae      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	f200 809f 	bhi.w	8003c98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003c99 	.word	0x08003c99
 8003b68:	08003c99 	.word	0x08003c99
 8003b6c:	08003c99 	.word	0x08003c99
 8003b70:	08003bd5 	.word	0x08003bd5
 8003b74:	08003c99 	.word	0x08003c99
 8003b78:	08003c99 	.word	0x08003c99
 8003b7c:	08003c99 	.word	0x08003c99
 8003b80:	08003c17 	.word	0x08003c17
 8003b84:	08003c99 	.word	0x08003c99
 8003b88:	08003c99 	.word	0x08003c99
 8003b8c:	08003c99 	.word	0x08003c99
 8003b90:	08003c57 	.word	0x08003c57
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fa12 	bl	8003fc4 <TIM_OC1_SetConfig>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	619a      	str	r2, [r3, #24]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	619a      	str	r2, [r3, #24]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6999      	ldr	r1, [r3, #24]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	619a      	str	r2, [r3, #24]
 8003bd2:	e064      	b.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fa58 	bl	8004090 <TIM_OC2_SetConfig>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bee:	619a      	str	r2, [r3, #24]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	619a      	str	r2, [r3, #24]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	619a      	str	r2, [r3, #24]
 8003c14:	e043      	b.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 faa1 	bl	8004164 <TIM_OC3_SetConfig>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0208 	orr.w	r2, r2, #8
 8003c30:	61da      	str	r2, [r3, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0204 	bic.w	r2, r2, #4
 8003c40:	61da      	str	r2, [r3, #28]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69d9      	ldr	r1, [r3, #28]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	61da      	str	r2, [r3, #28]
 8003c54:	e023      	b.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 faeb 	bl	8004238 <TIM_OC4_SetConfig>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c70:	61da      	str	r2, [r3, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	61da      	str	r2, [r3, #28]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	021a      	lsls	r2, r3, #8
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	61da      	str	r2, [r3, #28]
 8003c96:	e002      	b.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x172>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	75fb      	strb	r3, [r7, #23]
 8003c9c:	bf00      	nop
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_ConfigClockSource>:
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIM_ConfigClockSource+0x1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0b4      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x186>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d04:	d03e      	beq.n	8003d84 <HAL_TIM_ConfigClockSource+0xd4>
 8003d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0a:	f200 8087 	bhi.w	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	f000 8086 	beq.w	8003e22 <HAL_TIM_ConfigClockSource+0x172>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1a:	d87f      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d01a      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xa6>
 8003d20:	2b70      	cmp	r3, #112	; 0x70
 8003d22:	d87b      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b60      	cmp	r3, #96	; 0x60
 8003d26:	d050      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x11a>
 8003d28:	2b60      	cmp	r3, #96	; 0x60
 8003d2a:	d877      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b50      	cmp	r3, #80	; 0x50
 8003d2e:	d03c      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0xfa>
 8003d30:	2b50      	cmp	r3, #80	; 0x50
 8003d32:	d873      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d058      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x13a>
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d86f      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b30      	cmp	r3, #48	; 0x30
 8003d3e:	d064      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b30      	cmp	r3, #48	; 0x30
 8003d42:	d86b      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d060      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x15a>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d867      	bhi.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d05c      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x15a>
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d05a      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x15a>
 8003d54:	e062      	b.n	8003e1c <HAL_TIM_ConfigClockSource+0x16c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6899      	ldr	r1, [r3, #8]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f000 fc39 	bl	80045dc <TIM_ETR_SetConfig>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	e04f      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6899      	ldr	r1, [r3, #8]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f000 fc22 	bl	80045dc <TIM_ETR_SetConfig>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e03c      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 fae6 	bl	8004388 <TIM_TI1_ConfigInputStage>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2150      	movs	r1, #80	; 0x50
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fbf0 	bl	80045a8 <TIM_ITRx_SetConfig>
 8003dc8:	e02c      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 fb40 	bl	800445c <TIM_TI2_ConfigInputStage>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2160      	movs	r1, #96	; 0x60
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fbe0 	bl	80045a8 <TIM_ITRx_SetConfig>
 8003de8:	e01c      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f000 fac6 	bl	8004388 <TIM_TI1_ConfigInputStage>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fbd0 	bl	80045a8 <TIM_ITRx_SetConfig>
 8003e08:	e00c      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f000 fbc7 	bl	80045a8 <TIM_ITRx_SetConfig>
 8003e1a:	e003      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x174>
 8003e22:	bf00      	nop
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_ReadCapturedValue>:
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d831      	bhi.n	8003eb8 <HAL_TIM_ReadCapturedValue+0x78>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003eb9 	.word	0x08003eb9
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003e9b 	.word	0x08003e9b
 8003e70:	08003eb9 	.word	0x08003eb9
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003eb9 	.word	0x08003eb9
 8003e84:	08003eb9 	.word	0x08003eb9
 8003e88:	08003eb9 	.word	0x08003eb9
 8003e8c:	08003eaf 	.word	0x08003eaf
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e00f      	b.n	8003eba <HAL_TIM_ReadCapturedValue+0x7a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e00a      	b.n	8003eba <HAL_TIM_ReadCapturedValue+0x7a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e005      	b.n	8003eba <HAL_TIM_ReadCapturedValue+0x7a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e000      	b.n	8003eba <HAL_TIM_ReadCapturedValue+0x7a>
 8003eb8:	bf00      	nop
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop

08003ec8 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_TIM_PWM_PulseFinishedCallback>:
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_TriggerCallback>:
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
	...

08003f00 <TIM_Base_SetConfig>:
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <TIM_Base_SetConfig+0xb8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <TIM_Base_SetConfig+0xbc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x30>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <TIM_Base_SetConfig+0xc0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x42>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <TIM_Base_SetConfig+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <TIM_Base_SetConfig+0xbc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <TIM_Base_SetConfig+0xc0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x74>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <TIM_Base_SetConfig+0xb8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xa8>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800

08003fc4 <TIM_OC1_SetConfig>:
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f023 0201 	bic.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	621a      	str	r2, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <TIM_OC1_SetConfig+0xc8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10c      	bne.n	800403a <TIM_OC1_SetConfig+0x76>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0308 	bic.w	r3, r3, #8
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <TIM_OC1_SetConfig+0xc8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <TIM_OC1_SetConfig+0xa2>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	635a      	str	r2, [r3, #52]	; 0x34
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00

08004090 <TIM_OC2_SetConfig>:
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 0210 	bic.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0320 	bic.w	r3, r3, #32
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <TIM_OC2_SetConfig+0xd0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10d      	bne.n	800410c <TIM_OC2_SetConfig+0x7c>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <TIM_OC2_SetConfig+0xd0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d113      	bne.n	800413c <TIM_OC2_SetConfig+0xac>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00

08004164 <TIM_OC3_SetConfig>:
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <TIM_OC3_SetConfig+0x7a>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <TIM_OC3_SetConfig+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <TIM_OC3_SetConfig+0xaa>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40012c00 	.word	0x40012c00

08004238 <TIM_OC4_SetConfig>:
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <TIM_OC4_SetConfig+0x98>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d109      	bne.n	80042ac <TIM_OC4_SetConfig+0x74>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	61da      	str	r2, [r3, #28]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	621a      	str	r2, [r3, #32]
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	40012c00 	.word	0x40012c00

080042d4 <TIM_TI1_SetConfig>:
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0201 	bic.w	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <TIM_TI1_SetConfig+0xa8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_TI1_SetConfig+0x46>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d007      	beq.n	800431a <TIM_TI1_SetConfig+0x46>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <TIM_TI1_SetConfig+0xac>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_TI1_SetConfig+0x46>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <TIM_TI1_SetConfig+0xb0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <TIM_TI1_SetConfig+0x4a>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <TIM_TI1_SetConfig+0x4c>
 800431e:	2300      	movs	r3, #0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <TIM_TI1_SetConfig+0x62>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e003      	b.n	800433e <TIM_TI1_SetConfig+0x6a>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	b2db      	uxtb	r3, r3
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f003 030a 	and.w	r3, r3, #10
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	619a      	str	r2, [r3, #24]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	621a      	str	r2, [r3, #32]
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800

08004388 <TIM_TI1_ConfigInputStage>:
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 030a 	bic.w	r3, r3, #10
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	621a      	str	r2, [r3, #32]
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <TIM_TI2_SetConfig>:
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f023 0210 	bic.w	r2, r3, #16
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	031b      	lsls	r3, r3, #12
 8004428:	b29b      	uxth	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <TIM_TI2_ConfigInputStage>:
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	619a      	str	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
 80044b0:	bf00      	nop
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <TIM_TI3_SetConfig>:
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	61da      	str	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_TI4_SetConfig>:
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	621a      	str	r2, [r3, #32]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	031b      	lsls	r3, r3, #12
 8004574:	b29b      	uxth	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	031b      	lsls	r3, r3, #12
 8004588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	61da      	str	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <TIM_ITRx_SetConfig>:
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f043 0307 	orr.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <TIM_ETR_SetConfig>:
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	431a      	orrs	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_CCxChannelCmd>:
 800461a:	b480      	push	{r7}
 800461c:	b087      	sub	sp, #28
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	2201      	movs	r2, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	43db      	mvns	r3, r3
 800463c:	401a      	ands	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	621a      	str	r2, [r3, #32]
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
	...

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e046      	b.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d009      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10c      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004708:	2300      	movs	r3, #0
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800

08004720 <HAL_TIMEx_CommutCallback>:
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr

08004732 <HAL_TIMEx_BreakCallback>:
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <HAL_UART_Init>:
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x12>
 8004752:	2301      	movs	r3, #1
 8004754:	e042      	b.n	80047dc <HAL_UART_Init+0x98>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x2c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd fc9a 	bl	80020a4 <HAL_UART_MspInit>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fdc5 	bl	8005318 <UART_SetConfig>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ac:	615a      	str	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34
 80047da:	2300      	movs	r3, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	d16d      	bne.n	80048e0 <HAL_UART_Transmit+0xfc>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_UART_Transmit+0x2c>
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x30>
 8004810:	2301      	movs	r3, #1
 8004812:	e066      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2221      	movs	r2, #33	; 0x21
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004822:	f7fd fd51 	bl	80022c8 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	849a      	strh	r2, [r3, #36]	; 0x24
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x74>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e02a      	b.n	80048b0 <HAL_UART_Transmit+0xcc>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fb14 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0x90>
 8004870:	2303      	movs	r3, #3
 8004872:	e036      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_UART_Transmit+0xae>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3302      	adds	r3, #2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e007      	b.n	80048a2 <HAL_UART_Transmit+0xbe>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	84da      	strh	r2, [r3, #38]	; 0x26
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1cf      	bne.n	800485a <HAL_UART_Transmit+0x76>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fae4 	bl	8004e92 <UART_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_UART_Transmit+0xf0>
 80048d0:	2303      	movs	r3, #3
 80048d2:	e006      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
 80048e0:	2302      	movs	r3, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_UART_Receive_IT>:
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	d112      	bne.n	800492a <HAL_UART_Receive_IT+0x40>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_UART_Receive_IT+0x26>
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_UART_Receive_IT+0x2a>
 8004910:	2301      	movs	r3, #1
 8004912:	e00b      	b.n	800492c <HAL_UART_Receive_IT+0x42>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	461a      	mov	r2, r3
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fb24 	bl	8004f6e <UART_Start_Receive_IT>
 8004926:	4603      	mov	r3, r0
 8004928:	e000      	b.n	800492c <HAL_UART_Receive_IT+0x42>
 800492a:	2302      	movs	r3, #2
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_IRQHandler>:
 8004934:	b580      	push	{r7, lr}
 8004936:	b0ba      	sub	sp, #232	; 0xe8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <HAL_UART_IRQHandler+0x66>
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_UART_IRQHandler+0x66>
 8004986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_UART_IRQHandler+0x66>
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fc01 	bl	800519a <UART_Receive_IT>
 8004998:	e25b      	b.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 800499a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80de 	beq.w	8004b60 <HAL_UART_IRQHandler+0x22c>
 80049a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <HAL_UART_IRQHandler+0x8a>
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80d1 	beq.w	8004b60 <HAL_UART_IRQHandler+0x22c>
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xae>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_UART_IRQHandler+0xae>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f043 0201 	orr.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_UART_IRQHandler+0xd2>
 80049ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_UART_IRQHandler+0xd2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
 8004a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_UART_IRQHandler+0xf6>
 8004a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0xf6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f043 0204 	orr.w	r2, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d011      	beq.n	8004a5a <HAL_UART_IRQHandler+0x126>
 8004a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d105      	bne.n	8004a4e <HAL_UART_IRQHandler+0x11a>
 8004a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_IRQHandler+0x126>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f043 0208 	orr.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 81f2 	beq.w	8004e48 <HAL_UART_IRQHandler+0x514>
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_UART_IRQHandler+0x14e>
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_UART_IRQHandler+0x14e>
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fb8c 	bl	800519a <UART_Receive_IT>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <HAL_UART_IRQHandler+0x17a>
 8004aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04f      	beq.n	8004b4e <HAL_UART_IRQHandler+0x21a>
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa96 	bl	8004fe0 <UART_EndRxTransfer>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d041      	beq.n	8004b46 <HAL_UART_IRQHandler+0x212>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3314      	adds	r3, #20
 8004ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1d9      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x18e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <HAL_UART_IRQHandler+0x20a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	; (8004d14 <HAL_UART_IRQHandler+0x3e0>)
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd fd22 	bl	800256c <HAL_DMA_Abort_IT>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_UART_IRQHandler+0x228>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4798      	blx	r3
 8004b3c:	e00e      	b.n	8004b5c <HAL_UART_IRQHandler+0x228>
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f993 	bl	8004e6a <HAL_UART_ErrorCallback>
 8004b44:	e00a      	b.n	8004b5c <HAL_UART_IRQHandler+0x228>
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f98f 	bl	8004e6a <HAL_UART_ErrorCallback>
 8004b4c:	e006      	b.n	8004b5c <HAL_UART_IRQHandler+0x228>
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f98b 	bl	8004e6a <HAL_UART_ErrorCallback>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
 8004b5a:	e175      	b.n	8004e48 <HAL_UART_IRQHandler+0x514>
 8004b5c:	bf00      	nop
 8004b5e:	e173      	b.n	8004e48 <HAL_UART_IRQHandler+0x514>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f040 814f 	bne.w	8004e08 <HAL_UART_IRQHandler+0x4d4>
 8004b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8148 	beq.w	8004e08 <HAL_UART_IRQHandler+0x4d4>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8141 	beq.w	8004e08 <HAL_UART_IRQHandler+0x4d4>
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80b6 	beq.w	8004d18 <HAL_UART_IRQHandler+0x3e4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8145 	beq.w	8004e4c <HAL_UART_IRQHandler+0x518>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f080 813e 	bcs.w	8004e4c <HAL_UART_IRQHandler+0x518>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bd6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	f000 8088 	beq.w	8004cf4 <HAL_UART_IRQHandler+0x3c0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c10:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1d9      	bne.n	8004be4 <HAL_UART_IRQHandler+0x2b0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3314      	adds	r3, #20
 8004c36:	677b      	str	r3, [r7, #116]	; 0x74
 8004c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e1      	bne.n	8004c30 <HAL_UART_IRQHandler+0x2fc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	663b      	str	r3, [r7, #96]	; 0x60
 8004c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e3      	bne.n	8004c6c <HAL_UART_IRQHandler+0x338>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc4:	f023 0310 	bic.w	r3, r3, #16
 8004cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004cd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cd8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x37e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd fc01 	bl	80024f6 <HAL_DMA_Abort>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8b6 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
 8004d10:	e09c      	b.n	8004e4c <HAL_UART_IRQHandler+0x518>
 8004d12:	bf00      	nop
 8004d14:	080050a5 	.word	0x080050a5
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 808e 	beq.w	8004e50 <HAL_UART_IRQHandler+0x51c>
 8004d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8089 	beq.w	8004e50 <HAL_UART_IRQHandler+0x51c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d62:	647a      	str	r2, [r7, #68]	; 0x44
 8004d64:	643b      	str	r3, [r7, #64]	; 0x40
 8004d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e3      	bne.n	8004d3e <HAL_UART_IRQHandler+0x40a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e3      	bne.n	8004d76 <HAL_UART_IRQHandler+0x442>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0310 	bic.w	r3, r3, #16
 8004dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e3      	bne.n	8004dbc <HAL_UART_IRQHandler+0x488>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f83b 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
 8004e06:	e023      	b.n	8004e50 <HAL_UART_IRQHandler+0x51c>
 8004e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_UART_IRQHandler+0x4f4>
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_UART_IRQHandler+0x4f4>
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f953 	bl	80050cc <UART_Transmit_IT>
 8004e26:	e014      	b.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f992 	bl	800516a <UART_EndTransmit_IT>
 8004e46:	e004      	b.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e48:	bf00      	nop
 8004e4a:	e002      	b.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e4c:	bf00      	nop
 8004e4e:	e000      	b.n	8004e52 <HAL_UART_IRQHandler+0x51e>
 8004e50:	bf00      	nop
 8004e52:	37e8      	adds	r7, #232	; 0xe8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_UART_TxCpltCallback>:
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <HAL_UART_ErrorCallback>:
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_UARTEx_RxEventCallback>:
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	807b      	strh	r3, [r7, #2]
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <UART_WaitOnFlagUntilTimeout>:
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b090      	sub	sp, #64	; 0x40
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
 8004ea2:	e050      	b.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xb4>
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d04c      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xb4>
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb2:	f7fd fa09 	bl	80022c8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d241      	bcs.n	8004f46 <UART_WaitOnFlagUntilTimeout+0xb4>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	623a      	str	r2, [r7, #32]
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	69f9      	ldr	r1, [r7, #28]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x64>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f42:	2303      	movs	r3, #3
 8004f44:	e00f      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xd4>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d09f      	beq.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x12>
 8004f64:	2300      	movs	r3, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	3740      	adds	r7, #64	; 0x40
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_Start_Receive_IT>:
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2222      	movs	r2, #34	; 0x22
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <UART_Start_Receive_IT+0x46>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	615a      	str	r2, [r3, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0220 	orr.w	r2, r2, #32
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <UART_EndRxTransfer>:
 8004fe0:	b480      	push	{r7}
 8004fe2:	b095      	sub	sp, #84	; 0x54
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005008:	643a      	str	r2, [r7, #64]	; 0x40
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800500e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_EndRxTransfer+0x8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x3c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	2b01      	cmp	r3, #1
 8005056:	d119      	bne.n	800508c <UART_EndRxTransfer+0xac>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0310 	bic.w	r3, r3, #16
 800506e:	647b      	str	r3, [r7, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005078:	61ba      	str	r2, [r7, #24]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_EndRxTransfer+0x78>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
 800509a:	bf00      	nop
 800509c:	3754      	adds	r7, #84	; 0x54
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <UART_DMAAbortOnError>:
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	84da      	strh	r2, [r3, #38]	; 0x26
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fed3 	bl	8004e6a <HAL_UART_ErrorCallback>
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_Transmit_IT>:
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b21      	cmp	r3, #33	; 0x21
 80050de:	d13e      	bne.n	800515e <UART_Transmit_IT+0x92>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	d114      	bne.n	8005114 <UART_Transmit_IT+0x48>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d110      	bne.n	8005114 <UART_Transmit_IT+0x48>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]
 8005112:	e008      	b.n	8005126 <UART_Transmit_IT+0x5a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6211      	str	r1, [r2, #32]
 800511e:	781a      	ldrb	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4619      	mov	r1, r3
 8005134:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <UART_Transmit_IT+0x8e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	2300      	movs	r3, #0
 800515c:	e000      	b.n	8005160 <UART_Transmit_IT+0x94>
 800515e:	2302      	movs	r3, #2
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <UART_EndTransmit_IT>:
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fe64 	bl	8004e58 <HAL_UART_TxCpltCallback>
 8005190:	2300      	movs	r3, #0
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_Receive_IT>:
 800519a:	b580      	push	{r7, lr}
 800519c:	b08c      	sub	sp, #48	; 0x30
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b22      	cmp	r3, #34	; 0x22
 80051ac:	f040 80ae 	bne.w	800530c <UART_Receive_IT+0x172>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b8:	d117      	bne.n	80051ea <UART_Receive_IT+0x50>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <UART_Receive_IT+0x50>
 80051c2:	2300      	movs	r3, #0
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
 80051e8:	e026      	b.n	8005238 <UART_Receive_IT+0x9e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f0:	2300      	movs	r3, #0
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fc:	d007      	beq.n	800520e <UART_Receive_IT+0x74>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <UART_Receive_IT+0x82>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <UART_Receive_IT+0x82>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e008      	b.n	800522e <UART_Receive_IT+0x94>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	b2da      	uxtb	r2, r3
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4619      	mov	r1, r3
 8005246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15d      	bne.n	8005308 <UART_Receive_IT+0x16e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0220 	bic.w	r2, r2, #32
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	615a      	str	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	635a      	str	r2, [r3, #52]	; 0x34
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	2b01      	cmp	r3, #1
 8005290:	d135      	bne.n	80052fe <UART_Receive_IT+0x164>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f023 0310 	bic.w	r3, r3, #16
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	623a      	str	r2, [r7, #32]
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_Receive_IT+0xfe>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d10a      	bne.n	80052f0 <UART_Receive_IT+0x156>
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff fdc0 	bl	8004e7c <HAL_UARTEx_RxEventCallback>
 80052fc:	e002      	b.n	8005304 <UART_Receive_IT+0x16a>
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc fa2c 	bl	800175c <HAL_UART_RxCpltCallback>
 8005304:	2300      	movs	r3, #0
 8005306:	e002      	b.n	800530e <UART_Receive_IT+0x174>
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <UART_Receive_IT+0x174>
 800530c:	2302      	movs	r3, #2
 800530e:	4618      	mov	r0, r3
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <UART_SetConfig>:
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005352:	f023 030c 	bic.w	r3, r3, #12
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	430b      	orrs	r3, r1
 800535e:	60d3      	str	r3, [r2, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	615a      	str	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <UART_SetConfig+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d103      	bne.n	8005388 <UART_SetConfig+0x70>
 8005380:	f7fd fefe 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	e002      	b.n	800538e <UART_SetConfig+0x76>
 8005388:	f7fd fee6 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009a      	lsls	r2, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <UART_SetConfig+0x118>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	0119      	lsls	r1, r3, #4
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <UART_SetConfig+0x118>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	; 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e4:	4419      	add	r1, r3
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	009a      	lsls	r2, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <UART_SetConfig+0x118>)
 80053fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2064      	movs	r0, #100	; 0x64
 8005406:	fb00 f303 	mul.w	r3, r0, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	3332      	adds	r3, #50	; 0x32
 8005410:	4a07      	ldr	r2, [pc, #28]	; (8005430 <UART_SetConfig+0x118>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	440a      	add	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40013800 	.word	0x40013800
 8005430:	51eb851f 	.word	0x51eb851f

08005434 <Buzzer_Init>:
 *      Author: Abdallah Alnemr
 */

#include "../Inc/Buzzer.h"

void Buzzer_Init(void){
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800543e:	4802      	ldr	r0, [pc, #8]	; (8005448 <Buzzer_Init+0x14>)
 8005440:	f7fd faa7 	bl	8002992 <HAL_GPIO_WritePin>
}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40010c00 	.word	0x40010c00

0800544c <Buzzer_ON>:

void Buzzer_ON(void){
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8005450:	2201      	movs	r2, #1
 8005452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005456:	4802      	ldr	r0, [pc, #8]	; (8005460 <Buzzer_ON+0x14>)
 8005458:	f7fd fa9b 	bl	8002992 <HAL_GPIO_WritePin>
}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40010c00 	.word	0x40010c00

08005464 <Buzzer_OFF>:

void Buzzer_OFF(void){
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8005468:	2200      	movs	r2, #0
 800546a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800546e:	4802      	ldr	r0, [pc, #8]	; (8005478 <Buzzer_OFF+0x14>)
 8005470:	f7fd fa8f 	bl	8002992 <HAL_GPIO_WritePin>
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40010c00 	.word	0x40010c00

0800547c <DC_MOTOR_Init>:
#include "../Inc/DC_MOTOR.h"
#include "../Inc/DC_MOTOR_cfg.h"
#include "../../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b0ac      	sub	sp, #176	; 0xb0
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005486:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005494:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80054ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	60da      	str	r2, [r3, #12]
 80054ba:	611a      	str	r2, [r3, #16]
 80054bc:	615a      	str	r2, [r3, #20]
 80054be:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t ARR_Value = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint8_t i = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	4ab2      	ldr	r2, [pc, #712]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80054d6:	015b      	lsls	r3, r3, #5
 80054d8:	4413      	add	r3, r2
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4ab1      	ldr	r2, [pc, #708]	; (80057a4 <DC_MOTOR_Init+0x328>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d008      	beq.n	80054f4 <DC_MOTOR_Init+0x78>
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	4aae      	ldr	r2, [pc, #696]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80054e6:	015b      	lsls	r3, r3, #5
 80054e8:	4413      	add	r3, r2
 80054ea:	3304      	adds	r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4aad      	ldr	r2, [pc, #692]	; (80057a4 <DC_MOTOR_Init+0x328>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d10c      	bne.n	800550e <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80054f4:	4bac      	ldr	r3, [pc, #688]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	4aab      	ldr	r2, [pc, #684]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	6193      	str	r3, [r2, #24]
 8005500:	4ba9      	ldr	r3, [pc, #676]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	e058      	b.n	80055c0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	4aa3      	ldr	r2, [pc, #652]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005512:	015b      	lsls	r3, r3, #5
 8005514:	4413      	add	r3, r2
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4aa4      	ldr	r2, [pc, #656]	; (80057ac <DC_MOTOR_Init+0x330>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d008      	beq.n	8005530 <DC_MOTOR_Init+0xb4>
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	4a9f      	ldr	r2, [pc, #636]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005522:	015b      	lsls	r3, r3, #5
 8005524:	4413      	add	r3, r2
 8005526:	3304      	adds	r3, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4aa0      	ldr	r2, [pc, #640]	; (80057ac <DC_MOTOR_Init+0x330>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10c      	bne.n	800554a <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005530:	4b9d      	ldr	r3, [pc, #628]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4a9c      	ldr	r2, [pc, #624]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 8005536:	f043 0308 	orr.w	r3, r3, #8
 800553a:	6193      	str	r3, [r2, #24]
 800553c:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	e03a      	b.n	80055c0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	4a94      	ldr	r2, [pc, #592]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800554e:	015b      	lsls	r3, r3, #5
 8005550:	4413      	add	r3, r2
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a96      	ldr	r2, [pc, #600]	; (80057b0 <DC_MOTOR_Init+0x334>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d008      	beq.n	800556c <DC_MOTOR_Init+0xf0>
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4a90      	ldr	r2, [pc, #576]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800555e:	015b      	lsls	r3, r3, #5
 8005560:	4413      	add	r3, r2
 8005562:	3304      	adds	r3, #4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a92      	ldr	r2, [pc, #584]	; (80057b0 <DC_MOTOR_Init+0x334>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10c      	bne.n	8005586 <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 800556c:	4b8e      	ldr	r3, [pc, #568]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	4a8d      	ldr	r2, [pc, #564]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 8005572:	f043 0310 	orr.w	r3, r3, #16
 8005576:	6193      	str	r3, [r2, #24]
 8005578:	4b8b      	ldr	r3, [pc, #556]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	e01c      	b.n	80055c0 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	4a85      	ldr	r2, [pc, #532]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800558a:	015b      	lsls	r3, r3, #5
 800558c:	4413      	add	r3, r2
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a88      	ldr	r2, [pc, #544]	; (80057b4 <DC_MOTOR_Init+0x338>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d008      	beq.n	80055a8 <DC_MOTOR_Init+0x12c>
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4a81      	ldr	r2, [pc, #516]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a84      	ldr	r2, [pc, #528]	; (80057b4 <DC_MOTOR_Init+0x338>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10b      	bne.n	80055c0 <DC_MOTOR_Init+0x144>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80055a8:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	4a7e      	ldr	r2, [pc, #504]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 80055ae:	f043 0320 	orr.w	r3, r3, #32
 80055b2:	6193      	str	r3, [r2, #24]
 80055b4:	4b7c      	ldr	r3, [pc, #496]	; (80057a8 <DC_MOTOR_Init+0x32c>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	4a77      	ldr	r2, [pc, #476]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80055c4:	015b      	lsls	r3, r3, #5
 80055c6:	4413      	add	r3, r2
 80055c8:	3308      	adds	r3, #8
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d6:	2302      	movs	r3, #2
 80055d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	4a70      	ldr	r2, [pc, #448]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80055e0:	015b      	lsls	r3, r3, #5
 80055e2:	4413      	add	r3, r2
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fd f835 	bl	800265c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	4a6a      	ldr	r2, [pc, #424]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	4413      	add	r3, r2
 80055fa:	330a      	adds	r3, #10
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005602:	2301      	movs	r3, #1
 8005604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005608:	2302      	movs	r3, #2
 800560a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4a63      	ldr	r2, [pc, #396]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005612:	015b      	lsls	r3, r3, #5
 8005614:	4413      	add	r3, r2
 8005616:	3304      	adds	r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd f81b 	bl	800265c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	4a5d      	ldr	r2, [pc, #372]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800562a:	015b      	lsls	r3, r3, #5
 800562c:	4413      	add	r3, r2
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005634:	015b      	lsls	r3, r3, #5
 8005636:	4413      	add	r3, r2
 8005638:	3308      	adds	r3, #8
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	4619      	mov	r1, r3
 8005640:	f7fd f9a7 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	4a56      	ldr	r2, [pc, #344]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	4a53      	ldr	r2, [pc, #332]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005654:	015b      	lsls	r3, r3, #5
 8005656:	4413      	add	r3, r2
 8005658:	330a      	adds	r3, #10
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	2200      	movs	r2, #0
 800565e:	4619      	mov	r1, r3
 8005660:	f7fd f997 	bl	8002992 <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 8005664:	2301      	movs	r3, #1
 8005666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8005670:	e009      	b.n	8005686 <DC_MOTOR_Init+0x20a>
	{
		ARR_Value *= 2;
 8005672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 800567c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8005680:	3301      	adds	r3, #1
 8005682:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	4a45      	ldr	r2, [pc, #276]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800568a:	015b      	lsls	r3, r3, #5
 800568c:	4413      	add	r3, r2
 800568e:	331c      	adds	r3, #28
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8005696:	429a      	cmp	r2, r3
 8005698:	d3eb      	bcc.n	8005672 <DC_MOTOR_Init+0x1f6>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <DC_MOTOR_Init+0x324>)
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	4413      	add	r3, r2
 80056a2:	3314      	adds	r3, #20
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <DC_MOTOR_Init+0x33c>)
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	4619      	mov	r1, r3
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80056b4:	015b      	lsls	r3, r3, #5
 80056b6:	4413      	add	r3, r2
 80056b8:	3318      	adds	r3, #24
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PSC_Value--;
 80056cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	ARR_Value -= 2;
 80056d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056da:	3b02      	subs	r3, #2
 80056dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4a2f      	ldr	r2, [pc, #188]	; (80057a0 <DC_MOTOR_Init+0x324>)
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	4413      	add	r3, r2
 80056e8:	330c      	adds	r3, #12
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	61bb      	str	r3, [r7, #24]
	htim.Init.Prescaler = PSC_Value;
 80056ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056f2:	61fb      	str	r3, [r7, #28]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
	htim.Init.Period = ARR_Value;
 80056f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fe:	2300      	movs	r3, #0
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_Base_Init(&htim);
 8005706:	f107 0318 	add.w	r3, r7, #24
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fd6a 	bl	80031e4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8005718:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800571c:	f107 0318 	add.w	r3, r7, #24
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fac4 	bl	8003cb0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8005728:	f107 0318 	add.w	r3, r7, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd fdfb 	bl	8003328 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800573c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005740:	f107 0318 	add.w	r3, r7, #24
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe ff8c 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800574c:	2360      	movs	r3, #96	; 0x60
 800574e:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005754:	2300      	movs	r3, #0
 8005756:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005758:	2300      	movs	r3, #0
 800575a:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005760:	015b      	lsls	r3, r3, #5
 8005762:	4413      	add	r3, r2
 8005764:	3310      	adds	r3, #16
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800576c:	f107 0318 	add.w	r3, r7, #24
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe f9db 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8005776:	f107 0318 	add.w	r3, r7, #24
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc f9fe 	bl	8001b7c <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <DC_MOTOR_Init+0x324>)
 8005784:	015b      	lsls	r3, r3, #5
 8005786:	4413      	add	r3, r2
 8005788:	3310      	adds	r3, #16
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f107 0318 	add.w	r3, r7, #24
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7fd fe20 	bl	80033d8 <HAL_TIM_PWM_Start>
}
 8005798:	bf00      	nop
 800579a:	37b0      	adds	r7, #176	; 0xb0
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	0800ac04 	.word	0x0800ac04
 80057a4:	40010800 	.word	0x40010800
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40010c00 	.word	0x40010c00
 80057b0:	40011000 	.word	0x40011000
 80057b4:	40011400 	.word	0x40011400
 80057b8:	000f4240 	.word	0x000f4240

080057bc <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
 80057c6:	460b      	mov	r3, r1
 80057c8:	71bb      	strb	r3, [r7, #6]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 80057ce:	79bb      	ldrb	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11f      	bne.n	8005814 <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80057d8:	015b      	lsls	r3, r3, #5
 80057da:	4413      	add	r3, r2
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	4a3d      	ldr	r2, [pc, #244]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80057e2:	015b      	lsls	r3, r3, #5
 80057e4:	4413      	add	r3, r2
 80057e6:	3308      	adds	r3, #8
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7fd f8d0 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80057f6:	015b      	lsls	r3, r3, #5
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 8005802:	015b      	lsls	r3, r3, #5
 8005804:	4413      	add	r3, r2
 8005806:	330a      	adds	r3, #10
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	4619      	mov	r1, r3
 800580e:	f7fd f8c0 	bl	8002992 <HAL_GPIO_WritePin>
 8005812:	e021      	b.n	8005858 <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 8005814:	79bb      	ldrb	r3, [r7, #6]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d11e      	bne.n	8005858 <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	4a2e      	ldr	r2, [pc, #184]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800581e:	015b      	lsls	r3, r3, #5
 8005820:	4413      	add	r3, r2
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 8005828:	015b      	lsls	r3, r3, #5
 800582a:	4413      	add	r3, r2
 800582c:	3308      	adds	r3, #8
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	4619      	mov	r1, r3
 8005834:	f7fd f8ad 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4a27      	ldr	r2, [pc, #156]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800583c:	015b      	lsls	r3, r3, #5
 800583e:	4413      	add	r3, r2
 8005840:	3304      	adds	r3, #4
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 8005848:	015b      	lsls	r3, r3, #5
 800584a:	4413      	add	r3, r2
 800584c:	330a      	adds	r3, #10
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	f7fd f89d 	bl	8002992 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800585c:	015b      	lsls	r3, r3, #5
 800585e:	4413      	add	r3, r2
 8005860:	3310      	adds	r3, #16
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d108      	bne.n	800587a <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800586c:	015b      	lsls	r3, r3, #5
 800586e:	4413      	add	r3, r2
 8005870:	330c      	adds	r3, #12
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	88ba      	ldrh	r2, [r7, #4]
 8005876:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 8005878:	e029      	b.n	80058ce <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	4a16      	ldr	r2, [pc, #88]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800587e:	015b      	lsls	r3, r3, #5
 8005880:	4413      	add	r3, r2
 8005882:	3310      	adds	r3, #16
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d108      	bne.n	800589c <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 800588e:	015b      	lsls	r3, r3, #5
 8005890:	4413      	add	r3, r2
 8005892:	330c      	adds	r3, #12
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	88ba      	ldrh	r2, [r7, #4]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
}
 800589a:	e018      	b.n	80058ce <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	4a0e      	ldr	r2, [pc, #56]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80058a0:	015b      	lsls	r3, r3, #5
 80058a2:	4413      	add	r3, r2
 80058a4:	3310      	adds	r3, #16
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d108      	bne.n	80058be <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80058b0:	015b      	lsls	r3, r3, #5
 80058b2:	4413      	add	r3, r2
 80058b4:	330c      	adds	r3, #12
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	88ba      	ldrh	r2, [r7, #4]
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80058bc:	e007      	b.n	80058ce <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	4a05      	ldr	r2, [pc, #20]	; (80058d8 <DC_MOTOR_Start+0x11c>)
 80058c2:	015b      	lsls	r3, r3, #5
 80058c4:	4413      	add	r3, r2
 80058c6:	330c      	adds	r3, #12
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	88ba      	ldrh	r2, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	0800ac04 	.word	0x0800ac04

080058dc <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	4a2e      	ldr	r2, [pc, #184]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 80058ea:	015b      	lsls	r3, r3, #5
 80058ec:	4413      	add	r3, r2
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 80058f4:	015b      	lsls	r3, r3, #5
 80058f6:	4413      	add	r3, r2
 80058f8:	3308      	adds	r3, #8
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	2200      	movs	r2, #0
 80058fe:	4619      	mov	r1, r3
 8005900:	f7fd f847 	bl	8002992 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 8005908:	015b      	lsls	r3, r3, #5
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 8005914:	015b      	lsls	r3, r3, #5
 8005916:	4413      	add	r3, r2
 8005918:	330a      	adds	r3, #10
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	4619      	mov	r1, r3
 8005920:	f7fd f837 	bl	8002992 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 8005928:	015b      	lsls	r3, r3, #5
 800592a:	4413      	add	r3, r2
 800592c:	3310      	adds	r3, #16
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d108      	bne.n	8005946 <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 8005938:	015b      	lsls	r3, r3, #5
 800593a:	4413      	add	r3, r2
 800593c:	330c      	adds	r3, #12
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 8005944:	e029      	b.n	800599a <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 800594a:	015b      	lsls	r3, r3, #5
 800594c:	4413      	add	r3, r2
 800594e:	3310      	adds	r3, #16
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d108      	bne.n	8005968 <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 800595a:	015b      	lsls	r3, r3, #5
 800595c:	4413      	add	r3, r2
 800595e:	330c      	adds	r3, #12
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005966:	e018      	b.n	800599a <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	4a0e      	ldr	r2, [pc, #56]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 800596c:	015b      	lsls	r3, r3, #5
 800596e:	4413      	add	r3, r2
 8005970:	3310      	adds	r3, #16
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d108      	bne.n	800598a <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 800597c:	015b      	lsls	r3, r3, #5
 800597e:	4413      	add	r3, r2
 8005980:	330c      	adds	r3, #12
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2200      	movs	r2, #0
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005988:	e007      	b.n	800599a <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <DC_MOTOR_Stop+0xc8>)
 800598e:	015b      	lsls	r3, r3, #5
 8005990:	4413      	add	r3, r2
 8005992:	330c      	adds	r3, #12
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	0800ac04 	.word	0x0800ac04

080059a8 <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b094      	sub	sp, #80	; 0x50
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 80059b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	609a      	str	r2, [r3, #8]
 80059ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80059da:	f107 0318 	add.w	r3, r7, #24
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 80059e8:	79fa      	ldrb	r2, [r7, #7]
 80059ea:	4987      	ldr	r1, [pc, #540]	; (8005c08 <HCSR04_Init+0x260>)
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a84      	ldr	r2, [pc, #528]	; (8005c0c <HCSR04_Init+0x264>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80059fe:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <HCSR04_Init+0x268>)
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	4a83      	ldr	r2, [pc, #524]	; (8005c10 <HCSR04_Init+0x268>)
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	6193      	str	r3, [r2, #24]
 8005a0a:	4b81      	ldr	r3, [pc, #516]	; (8005c10 <HCSR04_Init+0x268>)
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	e046      	b.n	8005aa6 <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 8005a18:	79fa      	ldrb	r2, [r7, #7]
 8005a1a:	497b      	ldr	r1, [pc, #492]	; (8005c08 <HCSR04_Init+0x260>)
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a7a      	ldr	r2, [pc, #488]	; (8005c14 <HCSR04_Init+0x26c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d10c      	bne.n	8005a48 <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005a2e:	4b78      	ldr	r3, [pc, #480]	; (8005c10 <HCSR04_Init+0x268>)
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4a77      	ldr	r2, [pc, #476]	; (8005c10 <HCSR04_Init+0x268>)
 8005a34:	f043 0308 	orr.w	r3, r3, #8
 8005a38:	6193      	str	r3, [r2, #24]
 8005a3a:	4b75      	ldr	r3, [pc, #468]	; (8005c10 <HCSR04_Init+0x268>)
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	e02e      	b.n	8005aa6 <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 8005a48:	79fa      	ldrb	r2, [r7, #7]
 8005a4a:	496f      	ldr	r1, [pc, #444]	; (8005c08 <HCSR04_Init+0x260>)
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6f      	ldr	r2, [pc, #444]	; (8005c18 <HCSR04_Init+0x270>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10c      	bne.n	8005a78 <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a5e:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <HCSR04_Init+0x268>)
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	4a6b      	ldr	r2, [pc, #428]	; (8005c10 <HCSR04_Init+0x268>)
 8005a64:	f043 0310 	orr.w	r3, r3, #16
 8005a68:	6193      	str	r3, [r2, #24]
 8005a6a:	4b69      	ldr	r3, [pc, #420]	; (8005c10 <HCSR04_Init+0x268>)
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	e016      	b.n	8005aa6 <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	4963      	ldr	r1, [pc, #396]	; (8005c08 <HCSR04_Init+0x260>)
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a64      	ldr	r2, [pc, #400]	; (8005c1c <HCSR04_Init+0x274>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10b      	bne.n	8005aa6 <HCSR04_Init+0xfe>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a8e:	4b60      	ldr	r3, [pc, #384]	; (8005c10 <HCSR04_Init+0x268>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4a5f      	ldr	r2, [pc, #380]	; (8005c10 <HCSR04_Init+0x268>)
 8005a94:	f043 0320 	orr.w	r3, r3, #32
 8005a98:	6193      	str	r3, [r2, #24]
 8005a9a:	4b5d      	ldr	r3, [pc, #372]	; (8005c10 <HCSR04_Init+0x268>)
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8005aa6:	79fa      	ldrb	r2, [r7, #7]
 8005aa8:	4957      	ldr	r1, [pc, #348]	; (8005c08 <HCSR04_Init+0x260>)
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	643b      	str	r3, [r7, #64]	; 0x40
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aba:	2301      	movs	r3, #1
 8005abc:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8005ac6:	79fa      	ldrb	r2, [r7, #7]
 8005ac8:	494f      	ldr	r1, [pc, #316]	; (8005c08 <HCSR04_Init+0x260>)
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fc fdbd 	bl	800265c <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8005ae2:	79fa      	ldrb	r2, [r7, #7]
 8005ae4:	4948      	ldr	r1, [pc, #288]	; (8005c08 <HCSR04_Init+0x260>)
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	3308      	adds	r3, #8
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	79fa      	ldrb	r2, [r7, #7]
 8005af6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005af8:	4849      	ldr	r0, [pc, #292]	; (8005c20 <HCSR04_Init+0x278>)
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4403      	add	r3, r0
 8005b04:	3304      	adds	r3, #4
 8005b06:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8005b08:	79fa      	ldrb	r2, [r7, #7]
 8005b0a:	493f      	ldr	r1, [pc, #252]	; (8005c08 <HCSR04_Init+0x260>)
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	3308      	adds	r3, #8
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	79fa      	ldrb	r2, [r7, #7]
 8005b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b1e:	4840      	ldr	r0, [pc, #256]	; (8005c20 <HCSR04_Init+0x278>)
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4403      	add	r3, r0
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8005b2e:	79fa      	ldrb	r2, [r7, #7]
 8005b30:	493b      	ldr	r1, [pc, #236]	; (8005c20 <HCSR04_Init+0x278>)
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8005b42:	79fa      	ldrb	r2, [r7, #7]
 8005b44:	4936      	ldr	r1, [pc, #216]	; (8005c20 <HCSR04_Init+0x278>)
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	331c      	adds	r3, #28
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8005b56:	79fa      	ldrb	r2, [r7, #7]
 8005b58:	4931      	ldr	r1, [pc, #196]	; (8005c20 <HCSR04_Init+0x278>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3308      	adds	r3, #8
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <HCSR04_Init+0x1da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8005b6c:	79fa      	ldrb	r2, [r7, #7]
 8005b6e:	492c      	ldr	r1, [pc, #176]	; (8005c20 <HCSR04_Init+0x278>)
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b80:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8005b82:	79fa      	ldrb	r2, [r7, #7]
 8005b84:	4920      	ldr	r1, [pc, #128]	; (8005c08 <HCSR04_Init+0x260>)
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	330c      	adds	r3, #12
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <HCSR04_Init+0x206>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b98:	79fa      	ldrb	r2, [r7, #7]
 8005b9a:	4921      	ldr	r1, [pc, #132]	; (8005c20 <HCSR04_Init+0x278>)
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3320      	adds	r3, #32
 8005ba8:	2201      	movs	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e04f      	b.n	8005c4e <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8005bae:	79fa      	ldrb	r2, [r7, #7]
 8005bb0:	4915      	ldr	r1, [pc, #84]	; (8005c08 <HCSR04_Init+0x260>)
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d10a      	bne.n	8005bda <HCSR04_Init+0x232>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc4:	79fa      	ldrb	r2, [r7, #7]
 8005bc6:	4916      	ldr	r1, [pc, #88]	; (8005c20 <HCSR04_Init+0x278>)
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	3320      	adds	r3, #32
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e039      	b.n	8005c4e <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8005bda:	79fa      	ldrb	r2, [r7, #7]
 8005bdc:	490a      	ldr	r1, [pc, #40]	; (8005c08 <HCSR04_Init+0x260>)
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	330c      	adds	r3, #12
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d119      	bne.n	8005c24 <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf0:	79fa      	ldrb	r2, [r7, #7]
 8005bf2:	490b      	ldr	r1, [pc, #44]	; (8005c20 <HCSR04_Init+0x278>)
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	3320      	adds	r3, #32
 8005c00:	2204      	movs	r2, #4
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e023      	b.n	8005c4e <HCSR04_Init+0x2a6>
 8005c06:	bf00      	nop
 8005c08:	0800ac24 	.word	0x0800ac24
 8005c0c:	40010800 	.word	0x40010800
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40010c00 	.word	0x40010c00
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	40011400 	.word	0x40011400
 8005c20:	20000958 	.word	0x20000958
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8005c24:	79fa      	ldrb	r2, [r7, #7]
 8005c26:	4941      	ldr	r1, [pc, #260]	; (8005d2c <HCSR04_Init+0x384>)
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	330c      	adds	r3, #12
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b0c      	cmp	r3, #12
 8005c38:	d109      	bne.n	8005c4e <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3a:	79fa      	ldrb	r2, [r7, #7]
 8005c3c:	493c      	ldr	r1, [pc, #240]	; (8005d30 <HCSR04_Init+0x388>)
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	3320      	adds	r3, #32
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8005c4e:	79fa      	ldrb	r2, [r7, #7]
 8005c50:	4936      	ldr	r1, [pc, #216]	; (8005d2c <HCSR04_Init+0x384>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8005c64:	79fa      	ldrb	r2, [r7, #7]
 8005c66:	4932      	ldr	r1, [pc, #200]	; (8005d30 <HCSR04_Init+0x388>)
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	3304      	adds	r3, #4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8005c80:	79fa      	ldrb	r2, [r7, #7]
 8005c82:	492b      	ldr	r1, [pc, #172]	; (8005d30 <HCSR04_Init+0x388>)
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	3308      	adds	r3, #8
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2280      	movs	r2, #128	; 0x80
 8005ca0:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8005ca2:	6838      	ldr	r0, [r7, #0]
 8005ca4:	f7fd fa9e 	bl	80031e4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cac:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8005cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6838      	ldr	r0, [r7, #0]
 8005cb6:	f7fd fffb 	bl	8003cb0 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f7fd fc2e 	bl	800351c <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f7fe fcc8 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005ce4:	79fa      	ldrb	r2, [r7, #7]
 8005ce6:	4911      	ldr	r1, [pc, #68]	; (8005d2c <HCSR04_Init+0x384>)
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	f107 0318 	add.w	r3, r7, #24
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f7fd fe79 	bl	80039f4 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f7fd fabe 	bl	8003284 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005d08:	79fa      	ldrb	r2, [r7, #7]
 8005d0a:	4908      	ldr	r1, [pc, #32]	; (8005d2c <HCSR04_Init+0x384>)
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	330c      	adds	r3, #12
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6838      	ldr	r0, [r7, #0]
 8005d1e:	f7fd fc55 	bl	80035cc <HAL_TIM_IC_Start_IT>
}
 8005d22:	bf00      	nop
 8005d24:	3750      	adds	r7, #80	; 0x50
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	0800ac24 	.word	0x0800ac24
 8005d30:	20000958 	.word	0x20000958

08005d34 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e023      	b.n	8005d8e <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6819      	ldr	r1, [r3, #0]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	4814      	ldr	r0, [pc, #80]	; (8005da0 <HCSR04_TMR_OVF_ISR+0x6c>)
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4403      	add	r3, r0
 8005d58:	3308      	adds	r3, #8
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	d113      	bne.n	8005d88 <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	4910      	ldr	r1, [pc, #64]	; (8005da4 <HCSR04_TMR_OVF_ISR+0x70>)
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3302      	adds	r3, #2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	b298      	uxth	r0, r3
 8005d76:	490b      	ldr	r1, [pc, #44]	; (8005da4 <HCSR04_TMR_OVF_ISR+0x70>)
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3302      	adds	r3, #2
 8005d84:	4602      	mov	r2, r0
 8005d86:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0d8      	beq.n	8005d46 <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	0800ac24 	.word	0x0800ac24
 8005da4:	20000958 	.word	0x20000958

08005da8 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8005da8:	b5b0      	push	{r4, r5, r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
 8005dbc:	e22a      	b.n	8006214 <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6819      	ldr	r1, [r3, #0]
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	486b      	ldr	r0, [pc, #428]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4403      	add	r3, r0
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	f040 821a 	bne.w	800620e <HCSR04_TMR_IC_ISR+0x466>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7f19      	ldrb	r1, [r3, #28]
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	4865      	ldr	r0, [pc, #404]	; (8005f78 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4403      	add	r3, r0
 8005dec:	3320      	adds	r3, #32
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4299      	cmp	r1, r3
 8005df2:	f040 820c 	bne.w	800620e <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	495f      	ldr	r1, [pc, #380]	; (8005f78 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 80b8 	bne.w	8005f7c <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005e0c:	7bfa      	ldrb	r2, [r7, #15]
 8005e0e:	4959      	ldr	r1, [pc, #356]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	7bfc      	ldrb	r4, [r7, #15]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fe f80c 	bl	8003e40 <HAL_TIM_ReadCapturedValue>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4953      	ldr	r1, [pc, #332]	; (8005f78 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005e2c:	4623      	mov	r3, r4
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4423      	add	r3, r4
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	330c      	adds	r3, #12
 8005e38:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8005e3a:	7bfa      	ldrb	r2, [r7, #15]
 8005e3c:	494e      	ldr	r1, [pc, #312]	; (8005f78 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	4949      	ldr	r1, [pc, #292]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <HCSR04_TMR_IC_ISR+0xcc>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 020a 	bic.w	r2, r2, #10
 8005e70:	621a      	str	r2, [r3, #32]
 8005e72:	e02f      	b.n	8005ed4 <HCSR04_TMR_IC_ISR+0x12c>
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	493f      	ldr	r1, [pc, #252]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	330c      	adds	r3, #12
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d108      	bne.n	8005e9c <HCSR04_TMR_IC_ISR+0xf4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e98:	6213      	str	r3, [r2, #32]
 8005e9a:	e01b      	b.n	8005ed4 <HCSR04_TMR_IC_ISR+0x12c>
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	4935      	ldr	r1, [pc, #212]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	330c      	adds	r3, #12
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d108      	bne.n	8005ec4 <HCSR04_TMR_IC_ISR+0x11c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec0:	6213      	str	r3, [r2, #32]
 8005ec2:	e007      	b.n	8005ed4 <HCSR04_TMR_IC_ISR+0x12c>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed2:	6213      	str	r3, [r2, #32]
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	4927      	ldr	r1, [pc, #156]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <HCSR04_TMR_IC_ISR+0x154>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0202 	orr.w	r2, r2, #2
 8005ef8:	621a      	str	r2, [r3, #32]
 8005efa:	e02f      	b.n	8005f5c <HCSR04_TMR_IC_ISR+0x1b4>
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	491d      	ldr	r1, [pc, #116]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d108      	bne.n	8005f24 <HCSR04_TMR_IC_ISR+0x17c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	f043 0320 	orr.w	r3, r3, #32
 8005f20:	6213      	str	r3, [r2, #32]
 8005f22:	e01b      	b.n	8005f5c <HCSR04_TMR_IC_ISR+0x1b4>
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	4913      	ldr	r1, [pc, #76]	; (8005f74 <HCSR04_TMR_IC_ISR+0x1cc>)
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	330c      	adds	r3, #12
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d108      	bne.n	8005f4c <HCSR04_TMR_IC_ISR+0x1a4>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f48:	6213      	str	r3, [r2, #32]
 8005f4a:	e007      	b.n	8005f5c <HCSR04_TMR_IC_ISR+0x1b4>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f5a:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	4906      	ldr	r1, [pc, #24]	; (8005f78 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e14d      	b.n	800620e <HCSR04_TMR_IC_ISR+0x466>
 8005f72:	bf00      	nop
 8005f74:	0800ac24 	.word	0x0800ac24
 8005f78:	20000958 	.word	0x20000958
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8005f7c:	7bfa      	ldrb	r2, [r7, #15]
 8005f7e:	49ac      	ldr	r1, [pc, #688]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 813e 	bne.w	800620e <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	49a7      	ldr	r1, [pc, #668]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	49a2      	ldr	r1, [pc, #648]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fbe:	489c      	ldr	r0, [pc, #624]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4403      	add	r3, r0
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	4998      	ldr	r1, [pc, #608]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	330c      	adds	r3, #12
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	7bfc      	ldrb	r4, [r7, #15]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fd ff2b 	bl	8003e40 <HAL_TIM_ReadCapturedValue>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4990      	ldr	r1, [pc, #576]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8005fee:	4623      	mov	r3, r4
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4423      	add	r3, r4
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8005ffc:	7bfa      	ldrb	r2, [r7, #15]
 8005ffe:	498c      	ldr	r1, [pc, #560]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	3310      	adds	r3, #16
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	7bfa      	ldrb	r2, [r7, #15]
 8006010:	4887      	ldr	r0, [pc, #540]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4403      	add	r3, r0
 800601c:	3302      	adds	r3, #2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	461c      	mov	r4, r3
 8006022:	7bfa      	ldrb	r2, [r7, #15]
 8006024:	4882      	ldr	r0, [pc, #520]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4403      	add	r3, r0
 8006030:	3308      	adds	r3, #8
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	fb04 f303 	mul.w	r3, r4, r3
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	4419      	add	r1, r3
 800603e:	487c      	ldr	r0, [pc, #496]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4403      	add	r3, r0
 800604a:	3310      	adds	r3, #16
 800604c:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	4977      	ldr	r1, [pc, #476]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006052:	4613      	mov	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3310      	adds	r3, #16
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	4873      	ldr	r0, [pc, #460]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4403      	add	r3, r0
 800606e:	330c      	adds	r3, #12
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	1ac9      	subs	r1, r1, r3
 8006076:	486e      	ldr	r0, [pc, #440]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4403      	add	r3, r0
 8006082:	3314      	adds	r3, #20
 8006084:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	4969      	ldr	r1, [pc, #420]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	3314      	adds	r3, #20
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa f9ad 	bl	80003f8 <__aeabi_ui2d>
 800609e:	a362      	add	r3, pc, #392	; (adr r3, 8006228 <HCSR04_TMR_IC_ISR+0x480>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa fa22 	bl	80004ec <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	7bfa      	ldrb	r2, [r7, #15]
 80060b2:	4960      	ldr	r1, [pc, #384]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	3310      	adds	r3, #16
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	3301      	adds	r3, #1
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa f994 	bl	80003f8 <__aeabi_ui2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4620      	mov	r0, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7fa fb32 	bl	8000740 <__aeabi_ddiv>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	7bfc      	ldrb	r4, [r7, #15]
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fa fcd9 	bl	8000a9c <__aeabi_d2f>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4950      	ldr	r1, [pc, #320]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 80060ee:	4623      	mov	r3, r4
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	4423      	add	r3, r4
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	3318      	adds	r3, #24
 80060fa:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 80060fc:	7bfa      	ldrb	r2, [r7, #15]
 80060fe:	494c      	ldr	r1, [pc, #304]	; (8006230 <HCSR04_TMR_IC_ISR+0x488>)
 8006100:	4613      	mov	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	4948      	ldr	r1, [pc, #288]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	330c      	adds	r3, #12
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <HCSR04_TMR_IC_ISR+0x38e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 020a 	bic.w	r2, r2, #10
 8006132:	621a      	str	r2, [r3, #32]
 8006134:	e02f      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x3ee>
 8006136:	7bfa      	ldrb	r2, [r7, #15]
 8006138:	493e      	ldr	r1, [pc, #248]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	330c      	adds	r3, #12
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d108      	bne.n	800615e <HCSR04_TMR_IC_ISR+0x3b6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615a:	6213      	str	r3, [r2, #32]
 800615c:	e01b      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x3ee>
 800615e:	7bfa      	ldrb	r2, [r7, #15]
 8006160:	4934      	ldr	r1, [pc, #208]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	330c      	adds	r3, #12
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d108      	bne.n	8006186 <HCSR04_TMR_IC_ISR+0x3de>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006182:	6213      	str	r3, [r2, #32]
 8006184:	e007      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x3ee>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006194:	6213      	str	r3, [r2, #32]
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	4926      	ldr	r1, [pc, #152]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	330c      	adds	r3, #12
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HCSR04_TMR_IC_ISR+0x412>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a12      	ldr	r2, [r2, #32]
 80061b6:	621a      	str	r2, [r3, #32]
 80061b8:	e029      	b.n	800620e <HCSR04_TMR_IC_ISR+0x466>
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	491d      	ldr	r1, [pc, #116]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	330c      	adds	r3, #12
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d106      	bne.n	80061de <HCSR04_TMR_IC_ISR+0x436>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	6213      	str	r3, [r2, #32]
 80061dc:	e017      	b.n	800620e <HCSR04_TMR_IC_ISR+0x466>
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	4914      	ldr	r1, [pc, #80]	; (8006234 <HCSR04_TMR_IC_ISR+0x48c>)
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	330c      	adds	r3, #12
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d106      	bne.n	8006202 <HCSR04_TMR_IC_ISR+0x45a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	6213      	str	r3, [r2, #32]
 8006200:	e005      	b.n	800620e <HCSR04_TMR_IC_ISR+0x466>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	3301      	adds	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f43f add1 	beq.w	8005dbe <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bdb0      	pop	{r4, r5, r7, pc}
 8006226:	bf00      	nop
 8006228:	b020c49c 	.word	0xb020c49c
 800622c:	3f916872 	.word	0x3f916872
 8006230:	20000958 	.word	0x20000958
 8006234:	0800ac24 	.word	0x0800ac24

08006238 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
	/* float Distance_meters = gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;

	float Distance_centimeters = Distance_meters * 100.0; */

	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 8006242:	79fa      	ldrb	r2, [r7, #7]
 8006244:	4906      	ldr	r1, [pc, #24]	; (8006260 <HCSR04_Read+0x28>)
 8006246:	4613      	mov	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3318      	adds	r3, #24
 8006252:	681b      	ldr	r3, [r3, #0]
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000958 	.word	0x20000958

08006264 <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 800626e:	79fa      	ldrb	r2, [r7, #7]
 8006270:	4923      	ldr	r1, [pc, #140]	; (8006300 <HCSR04_Trigger+0x9c>)
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	79fa      	ldrb	r2, [r7, #7]
 8006280:	491f      	ldr	r1, [pc, #124]	; (8006300 <HCSR04_Trigger+0x9c>)
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3304      	adds	r3, #4
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	4619      	mov	r1, r3
 8006294:	f7fc fb7d 	bl	8002992 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8006298:	4b1a      	ldr	r3, [pc, #104]	; (8006304 <HCSR04_Trigger+0xa0>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <HCSR04_Trigger+0xa4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HCSR04_Trigger+0xa8>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	0c9b      	lsrs	r3, r3, #18
 80062aa:	005a      	lsls	r2, r3, #1
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <HCSR04_Trigger+0xa4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4916      	ldr	r1, [pc, #88]	; (800630c <HCSR04_Trigger+0xa8>)
 80062b2:	fba1 1303 	umull	r1, r3, r1, r3
 80062b6:	0c9b      	lsrs	r3, r3, #18
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HCSR04_Trigger+0xa0>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d8f8      	bhi.n	80062be <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 80062cc:	79fa      	ldrb	r2, [r7, #7]
 80062ce:	490c      	ldr	r1, [pc, #48]	; (8006300 <HCSR04_Trigger+0x9c>)
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	79fa      	ldrb	r2, [r7, #7]
 80062de:	4908      	ldr	r1, [pc, #32]	; (8006300 <HCSR04_Trigger+0x9c>)
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	3304      	adds	r3, #4
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	2200      	movs	r2, #0
 80062f0:	4619      	mov	r1, r3
 80062f2:	f7fc fb4e 	bl	8002992 <HAL_GPIO_WritePin>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	0800ac24 	.word	0x0800ac24
 8006304:	e000e010 	.word	0xe000e010
 8006308:	20000004 	.word	0x20000004
 800630c:	431bde83 	.word	0x431bde83

08006310 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8006310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006314:	b08c      	sub	sp, #48	; 0x30
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800631c:	4b5b      	ldr	r3, [pc, #364]	; (800648c <decodeGGA+0x17c>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8006326:	e004      	b.n	8006332 <decodeGGA+0x22>
 8006328:	4b58      	ldr	r3, [pc, #352]	; (800648c <decodeGGA+0x17c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	4a57      	ldr	r2, [pc, #348]	; (800648c <decodeGGA+0x17c>)
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	4b56      	ldr	r3, [pc, #344]	; (800648c <decodeGGA+0x17c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b2c      	cmp	r3, #44	; 0x2c
 8006340:	d1f2      	bne.n	8006328 <decodeGGA+0x18>
	inx++;
 8006342:	4b52      	ldr	r3, [pc, #328]	; (800648c <decodeGGA+0x17c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a50      	ldr	r2, [pc, #320]	; (800648c <decodeGGA+0x17c>)
 800634a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 800634c:	e004      	b.n	8006358 <decodeGGA+0x48>
 800634e:	4b4f      	ldr	r3, [pc, #316]	; (800648c <decodeGGA+0x17c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a4d      	ldr	r2, [pc, #308]	; (800648c <decodeGGA+0x17c>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	4b4c      	ldr	r3, [pc, #304]	; (800648c <decodeGGA+0x17c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b2c      	cmp	r3, #44	; 0x2c
 8006366:	d1f2      	bne.n	800634e <decodeGGA+0x3e>
	inx++;
 8006368:	4b48      	ldr	r3, [pc, #288]	; (800648c <decodeGGA+0x17c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	4a47      	ldr	r2, [pc, #284]	; (800648c <decodeGGA+0x17c>)
 8006370:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8006372:	e004      	b.n	800637e <decodeGGA+0x6e>
 8006374:	4b45      	ldr	r3, [pc, #276]	; (800648c <decodeGGA+0x17c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	4a44      	ldr	r2, [pc, #272]	; (800648c <decodeGGA+0x17c>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b43      	ldr	r3, [pc, #268]	; (800648c <decodeGGA+0x17c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b2c      	cmp	r3, #44	; 0x2c
 800638c:	d1f2      	bne.n	8006374 <decodeGGA+0x64>
	inx++;
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <decodeGGA+0x17c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a3d      	ldr	r2, [pc, #244]	; (800648c <decodeGGA+0x17c>)
 8006396:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8006398:	e004      	b.n	80063a4 <decodeGGA+0x94>
 800639a:	4b3c      	ldr	r3, [pc, #240]	; (800648c <decodeGGA+0x17c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	4a3a      	ldr	r2, [pc, #232]	; (800648c <decodeGGA+0x17c>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b39      	ldr	r3, [pc, #228]	; (800648c <decodeGGA+0x17c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4413      	add	r3, r2
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	2b2c      	cmp	r3, #44	; 0x2c
 80063b2:	d1f2      	bne.n	800639a <decodeGGA+0x8a>
	inx++;
 80063b4:	4b35      	ldr	r3, [pc, #212]	; (800648c <decodeGGA+0x17c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <decodeGGA+0x17c>)
 80063bc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 80063be:	e004      	b.n	80063ca <decodeGGA+0xba>
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <decodeGGA+0x17c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a31      	ldr	r2, [pc, #196]	; (800648c <decodeGGA+0x17c>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4b30      	ldr	r3, [pc, #192]	; (800648c <decodeGGA+0x17c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b2c      	cmp	r3, #44	; 0x2c
 80063d8:	d1f2      	bne.n	80063c0 <decodeGGA+0xb0>
	inx++;
 80063da:	4b2c      	ldr	r3, [pc, #176]	; (800648c <decodeGGA+0x17c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <decodeGGA+0x17c>)
 80063e2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80063e4:	e004      	b.n	80063f0 <decodeGGA+0xe0>
 80063e6:	4b29      	ldr	r3, [pc, #164]	; (800648c <decodeGGA+0x17c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a27      	ldr	r2, [pc, #156]	; (800648c <decodeGGA+0x17c>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b26      	ldr	r3, [pc, #152]	; (800648c <decodeGGA+0x17c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4413      	add	r3, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b2c      	cmp	r3, #44	; 0x2c
 80063fe:	d1f2      	bne.n	80063e6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8006400:	4b22      	ldr	r3, [pc, #136]	; (800648c <decodeGGA+0x17c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a21      	ldr	r2, [pc, #132]	; (800648c <decodeGGA+0x17c>)
 8006408:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800640a:	4b20      	ldr	r3, [pc, #128]	; (800648c <decodeGGA+0x17c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b31      	cmp	r3, #49	; 0x31
 8006418:	d00f      	beq.n	800643a <decodeGGA+0x12a>
 800641a:	4b1c      	ldr	r3, [pc, #112]	; (800648c <decodeGGA+0x17c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b32      	cmp	r3, #50	; 0x32
 8006428:	d007      	beq.n	800643a <decodeGGA+0x12a>
 800642a:	4b18      	ldr	r3, [pc, #96]	; (800648c <decodeGGA+0x17c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b36      	cmp	r3, #54	; 0x36
 8006438:	d106      	bne.n	8006448 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <decodeGGA+0x17c>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8006446:	e009      	b.n	800645c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800644e:	2301      	movs	r3, #1
 8006450:	e2f2      	b.n	8006a38 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <decodeGGA+0x17c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3301      	adds	r3, #1
 8006458:	4a0c      	ldr	r2, [pc, #48]	; (800648c <decodeGGA+0x17c>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <decodeGGA+0x17c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b2c      	cmp	r3, #44	; 0x2c
 800646a:	d1f2      	bne.n	8006452 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <decodeGGA+0x17c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	4a06      	ldr	r2, [pc, #24]	; (800648c <decodeGGA+0x17c>)
 8006474:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8006476:	f107 030c 	add.w	r3, r7, #12
 800647a:	220c      	movs	r2, #12
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f001 fb2b 	bl	8007ada <memset>
	i=0;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8006488:	e016      	b.n	80064b8 <decodeGGA+0x1a8>
 800648a:	bf00      	nop
 800648c:	2000097c 	.word	0x2000097c
	{
		buffer[i] = GGAbuffer[inx];
 8006490:	4ba7      	ldr	r3, [pc, #668]	; (8006730 <decodeGGA+0x420>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	7819      	ldrb	r1, [r3, #0]
 800649c:	f107 020c 	add.w	r2, r7, #12
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	4413      	add	r3, r2
 80064a4:	460a      	mov	r2, r1
 80064a6:	701a      	strb	r2, [r3, #0]
		i++;
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	3301      	adds	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80064ae:	4ba0      	ldr	r3, [pc, #640]	; (8006730 <decodeGGA+0x420>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a9e      	ldr	r2, [pc, #632]	; (8006730 <decodeGGA+0x420>)
 80064b6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80064b8:	4b9d      	ldr	r3, [pc, #628]	; (8006730 <decodeGGA+0x420>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b2c      	cmp	r3, #44	; 0x2c
 80064c6:	d1e3      	bne.n	8006490 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fcf5 	bl	8006ebc <atoi>
 80064d2:	4603      	mov	r3, r0
 80064d4:	4a97      	ldr	r2, [pc, #604]	; (8006734 <decodeGGA+0x424>)
 80064d6:	fb82 1203 	smull	r1, r2, r2, r3
 80064da:	1312      	asrs	r2, r2, #12
 80064dc:	17db      	asrs	r3, r3, #31
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	4b95      	ldr	r3, [pc, #596]	; (8006738 <decodeGGA+0x428>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4995      	ldr	r1, [pc, #596]	; (800673c <decodeGGA+0x42c>)
 80064e6:	fb81 0103 	smull	r0, r1, r1, r3
 80064ea:	1149      	asrs	r1, r1, #5
 80064ec:	17db      	asrs	r3, r3, #31
 80064ee:	1acb      	subs	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	4a93      	ldr	r2, [pc, #588]	; (8006740 <decodeGGA+0x430>)
 80064f4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80064f6:	f107 030c 	add.w	r3, r7, #12
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fcde 	bl	8006ebc <atoi>
 8006500:	4603      	mov	r3, r0
 8006502:	4a8e      	ldr	r2, [pc, #568]	; (800673c <decodeGGA+0x42c>)
 8006504:	fb82 1203 	smull	r1, r2, r2, r3
 8006508:	1152      	asrs	r2, r2, #5
 800650a:	17db      	asrs	r3, r3, #31
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	4a8b      	ldr	r2, [pc, #556]	; (800673c <decodeGGA+0x42c>)
 8006510:	fb82 1203 	smull	r1, r2, r2, r3
 8006514:	1151      	asrs	r1, r2, #5
 8006516:	17da      	asrs	r2, r3, #31
 8006518:	1a8a      	subs	r2, r1, r2
 800651a:	2164      	movs	r1, #100	; 0x64
 800651c:	fb01 f202 	mul.w	r2, r1, r2
 8006520:	1a9a      	subs	r2, r3, r2
 8006522:	4b85      	ldr	r3, [pc, #532]	; (8006738 <decodeGGA+0x428>)
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	4b85      	ldr	r3, [pc, #532]	; (800673c <decodeGGA+0x42c>)
 8006528:	fb83 0301 	smull	r0, r3, r3, r1
 800652c:	1158      	asrs	r0, r3, #5
 800652e:	17cb      	asrs	r3, r1, #31
 8006530:	1ac3      	subs	r3, r0, r3
 8006532:	2064      	movs	r0, #100	; 0x64
 8006534:	fb00 f303 	mul.w	r3, r0, r3
 8006538:	1acb      	subs	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	4a81      	ldr	r2, [pc, #516]	; (8006744 <decodeGGA+0x434>)
 800653e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8006540:	4b80      	ldr	r3, [pc, #512]	; (8006744 <decodeGGA+0x434>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b3b      	cmp	r3, #59	; 0x3b
 8006546:	dd09      	ble.n	800655c <decodeGGA+0x24c>
	{
		min = min-60;
 8006548:	4b7e      	ldr	r3, [pc, #504]	; (8006744 <decodeGGA+0x434>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b3c      	subs	r3, #60	; 0x3c
 800654e:	4a7d      	ldr	r2, [pc, #500]	; (8006744 <decodeGGA+0x434>)
 8006550:	6013      	str	r3, [r2, #0]
		hr++;
 8006552:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <decodeGGA+0x430>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a79      	ldr	r2, [pc, #484]	; (8006740 <decodeGGA+0x430>)
 800655a:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 800655c:	4b78      	ldr	r3, [pc, #480]	; (8006740 <decodeGGA+0x430>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da09      	bge.n	8006578 <decodeGGA+0x268>
	{
		hr=24+hr;
 8006564:	4b76      	ldr	r3, [pc, #472]	; (8006740 <decodeGGA+0x430>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3318      	adds	r3, #24
 800656a:	4a75      	ldr	r2, [pc, #468]	; (8006740 <decodeGGA+0x430>)
 800656c:	6013      	str	r3, [r2, #0]
		daychange--;
 800656e:	4b76      	ldr	r3, [pc, #472]	; (8006748 <decodeGGA+0x438>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3b01      	subs	r3, #1
 8006574:	4a74      	ldr	r2, [pc, #464]	; (8006748 <decodeGGA+0x438>)
 8006576:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8006578:	4b71      	ldr	r3, [pc, #452]	; (8006740 <decodeGGA+0x430>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b17      	cmp	r3, #23
 800657e:	dd09      	ble.n	8006594 <decodeGGA+0x284>
	{
		hr=hr-24;
 8006580:	4b6f      	ldr	r3, [pc, #444]	; (8006740 <decodeGGA+0x430>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3b18      	subs	r3, #24
 8006586:	4a6e      	ldr	r2, [pc, #440]	; (8006740 <decodeGGA+0x430>)
 8006588:	6013      	str	r3, [r2, #0]
		daychange++;
 800658a:	4b6f      	ldr	r3, [pc, #444]	; (8006748 <decodeGGA+0x438>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3301      	adds	r3, #1
 8006590:	4a6d      	ldr	r2, [pc, #436]	; (8006748 <decodeGGA+0x438>)
 8006592:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8006594:	4b6a      	ldr	r3, [pc, #424]	; (8006740 <decodeGGA+0x430>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 800659c:	4b69      	ldr	r3, [pc, #420]	; (8006744 <decodeGGA+0x434>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fc87 	bl	8006ebc <atoi>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b62      	ldr	r3, [pc, #392]	; (800673c <decodeGGA+0x42c>)
 80065b2:	fb83 1302 	smull	r1, r3, r3, r2
 80065b6:	1159      	asrs	r1, r3, #5
 80065b8:	17d3      	asrs	r3, r2, #31
 80065ba:	1acb      	subs	r3, r1, r3
 80065bc:	2164      	movs	r1, #100	; 0x64
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80065c8:	4b59      	ldr	r3, [pc, #356]	; (8006730 <decodeGGA+0x420>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a58      	ldr	r2, [pc, #352]	; (8006730 <decodeGGA+0x420>)
 80065d0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	220c      	movs	r2, #12
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fa7d 	bl	8007ada <memset>
	i=0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80065e4:	e013      	b.n	800660e <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80065e6:	4b52      	ldr	r3, [pc, #328]	; (8006730 <decodeGGA+0x420>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4413      	add	r3, r2
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	f107 020c 	add.w	r2, r7, #12
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	4413      	add	r3, r2
 80065fa:	460a      	mov	r2, r1
 80065fc:	701a      	strb	r2, [r3, #0]
		i++;
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	3301      	adds	r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8006604:	4b4a      	ldr	r3, [pc, #296]	; (8006730 <decodeGGA+0x420>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a49      	ldr	r2, [pc, #292]	; (8006730 <decodeGGA+0x420>)
 800660c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800660e:	4b48      	ldr	r3, [pc, #288]	; (8006730 <decodeGGA+0x420>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b2c      	cmp	r3, #44	; 0x2c
 800661c:	d1e3      	bne.n	80065e6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800661e:	f107 030c 	add.w	r3, r7, #12
 8006622:	4618      	mov	r0, r3
 8006624:	f7f9 fd9e 	bl	8000164 <strlen>
 8006628:	4603      	mov	r3, r0
 800662a:	2b05      	cmp	r3, #5
 800662c:	d801      	bhi.n	8006632 <decodeGGA+0x322>
 800662e:	2302      	movs	r3, #2
 8006630:	e202      	b.n	8006a38 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8006632:	f107 030c 	add.w	r3, r7, #12
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fc40 	bl	8006ebc <atoi>
 800663c:	4603      	mov	r3, r0
 800663e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8006644:	e002      	b.n	800664c <decodeGGA+0x33c>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	3301      	adds	r3, #1
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
 800664c:	f107 020c 	add.w	r2, r7, #12
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	4413      	add	r3, r2
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b2e      	cmp	r3, #46	; 0x2e
 8006658:	d1f5      	bne.n	8006646 <decodeGGA+0x336>
	j++;
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	3301      	adds	r3, #1
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8006660:	f107 030c 	add.w	r3, r7, #12
 8006664:	4618      	mov	r0, r3
 8006666:	f7f9 fd7d 	bl	8000164 <strlen>
 800666a:	4602      	mov	r2, r0
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	f107 020c 	add.w	r2, r7, #12
 8006678:	4413      	add	r3, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fc1e 	bl	8006ebc <atoi>
 8006680:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8006682:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 fec6 	bl	8000418 <__aeabi_i2d>
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	4b2e      	ldr	r3, [pc, #184]	; (800674c <decodeGGA+0x43c>)
 8006692:	f7fa f855 	bl	8000740 <__aeabi_ddiv>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4690      	mov	r8, r2
 800669c:	4699      	mov	r9, r3
 800669e:	69f8      	ldr	r0, [r7, #28]
 80066a0:	f7f9 feba 	bl	8000418 <__aeabi_i2d>
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	3302      	adds	r3, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7f9 feb3 	bl	8000418 <__aeabi_i2d>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	f04f 0000 	mov.w	r0, #0
 80066ba:	4925      	ldr	r1, [pc, #148]	; (8006750 <decodeGGA+0x440>)
 80066bc:	f003 faf6 	bl	8009cac <pow>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7fa f83a 	bl	8000740 <__aeabi_ddiv>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 fd54 	bl	8000180 <__adddf3>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4610      	mov	r0, r2
 80066de:	4619      	mov	r1, r3
 80066e0:	f7fa f9dc 	bl	8000a9c <__aeabi_d2f>
 80066e4:	4603      	mov	r3, r0
 80066e6:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	601a      	str	r2, [r3, #0]
	inx++;  
 80066ee:	4b10      	ldr	r3, [pc, #64]	; (8006730 <decodeGGA+0x420>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <decodeGGA+0x420>)
 80066f6:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <decodeGGA+0x420>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	461a      	mov	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <decodeGGA+0x420>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <decodeGGA+0x420>)
 8006710:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <decodeGGA+0x420>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <decodeGGA+0x420>)
 800671a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	220c      	movs	r2, #12
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f001 f9d8 	bl	8007ada <memset>
	i=0;
 800672a:	2300      	movs	r3, #0
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800672e:	e025      	b.n	800677c <decodeGGA+0x46c>
 8006730:	2000097c 	.word	0x2000097c
 8006734:	68db8bad 	.word	0x68db8bad
 8006738:	20000010 	.word	0x20000010
 800673c:	51eb851f 	.word	0x51eb851f
 8006740:	20000980 	.word	0x20000980
 8006744:	20000984 	.word	0x20000984
 8006748:	20000994 	.word	0x20000994
 800674c:	40590000 	.word	0x40590000
 8006750:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8006754:	4b88      	ldr	r3, [pc, #544]	; (8006978 <decodeGGA+0x668>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	7819      	ldrb	r1, [r3, #0]
 8006760:	f107 020c 	add.w	r2, r7, #12
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	4413      	add	r3, r2
 8006768:	460a      	mov	r2, r1
 800676a:	701a      	strb	r2, [r3, #0]
		i++;
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	3301      	adds	r3, #1
 8006770:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8006772:	4b81      	ldr	r3, [pc, #516]	; (8006978 <decodeGGA+0x668>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	4a7f      	ldr	r2, [pc, #508]	; (8006978 <decodeGGA+0x668>)
 800677a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800677c:	4b7e      	ldr	r3, [pc, #504]	; (8006978 <decodeGGA+0x668>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b2c      	cmp	r3, #44	; 0x2c
 800678a:	d1e3      	bne.n	8006754 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 800678c:	f107 030c 	add.w	r3, r7, #12
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fb93 	bl	8006ebc <atoi>
 8006796:	4603      	mov	r3, r0
 8006798:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 800679e:	e002      	b.n	80067a6 <decodeGGA+0x496>
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	3301      	adds	r3, #1
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a6:	f107 020c 	add.w	r2, r7, #12
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	4413      	add	r3, r2
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b2e      	cmp	r3, #46	; 0x2e
 80067b2:	d1f5      	bne.n	80067a0 <decodeGGA+0x490>
	j++;
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	3301      	adds	r3, #1
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80067ba:	f107 030c 	add.w	r3, r7, #12
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 fcd0 	bl	8000164 <strlen>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80067cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ce:	f107 020c 	add.w	r2, r7, #12
 80067d2:	4413      	add	r3, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fb71 	bl	8006ebc <atoi>
 80067da:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80067dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fe19 	bl	8000418 <__aeabi_i2d>
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	4b64      	ldr	r3, [pc, #400]	; (800697c <decodeGGA+0x66c>)
 80067ec:	f7f9 ffa8 	bl	8000740 <__aeabi_ddiv>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4690      	mov	r8, r2
 80067f6:	4699      	mov	r9, r3
 80067f8:	69f8      	ldr	r0, [r7, #28]
 80067fa:	f7f9 fe0d 	bl	8000418 <__aeabi_i2d>
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	3302      	adds	r3, #2
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fe06 	bl	8000418 <__aeabi_i2d>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	f04f 0000 	mov.w	r0, #0
 8006814:	495a      	ldr	r1, [pc, #360]	; (8006980 <decodeGGA+0x670>)
 8006816:	f003 fa49 	bl	8009cac <pow>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7f9 ff8d 	bl	8000740 <__aeabi_ddiv>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fca7 	bl	8000180 <__adddf3>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	f7fa f92f 	bl	8000a9c <__aeabi_d2f>
 800683e:	4603      	mov	r3, r0
 8006840:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	609a      	str	r2, [r3, #8]
	inx++;
 8006848:	4b4b      	ldr	r3, [pc, #300]	; (8006978 <decodeGGA+0x668>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3301      	adds	r3, #1
 800684e:	4a4a      	ldr	r2, [pc, #296]	; (8006978 <decodeGGA+0x668>)
 8006850:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8006852:	4b49      	ldr	r3, [pc, #292]	; (8006978 <decodeGGA+0x668>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8006862:	4b45      	ldr	r3, [pc, #276]	; (8006978 <decodeGGA+0x668>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	4a43      	ldr	r2, [pc, #268]	; (8006978 <decodeGGA+0x668>)
 800686a:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800686c:	4b42      	ldr	r3, [pc, #264]	; (8006978 <decodeGGA+0x668>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a41      	ldr	r2, [pc, #260]	; (8006978 <decodeGGA+0x668>)
 8006874:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8006876:	4b40      	ldr	r3, [pc, #256]	; (8006978 <decodeGGA+0x668>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	4a3e      	ldr	r2, [pc, #248]	; (8006978 <decodeGGA+0x668>)
 800687e:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8006880:	4b3d      	ldr	r3, [pc, #244]	; (8006978 <decodeGGA+0x668>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a3c      	ldr	r2, [pc, #240]	; (8006978 <decodeGGA+0x668>)
 8006888:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	220c      	movs	r2, #12
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f921 	bl	8007ada <memset>
	i=0;
 8006898:	2300      	movs	r3, #0
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800689c:	e013      	b.n	80068c6 <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <decodeGGA+0x668>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	7819      	ldrb	r1, [r3, #0]
 80068aa:	f107 020c 	add.w	r2, r7, #12
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	4413      	add	r3, r2
 80068b2:	460a      	mov	r2, r1
 80068b4:	701a      	strb	r2, [r3, #0]
		i++;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	3301      	adds	r3, #1
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80068bc:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <decodeGGA+0x668>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a2d      	ldr	r2, [pc, #180]	; (8006978 <decodeGGA+0x668>)
 80068c4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <decodeGGA+0x668>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b2c      	cmp	r3, #44	; 0x2c
 80068d4:	d1e3      	bne.n	800689e <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 faee 	bl	8006ebc <atoi>
 80068e0:	4602      	mov	r2, r0
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <decodeGGA+0x668>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <decodeGGA+0x668>)
 80068ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80068f0:	e004      	b.n	80068fc <decodeGGA+0x5ec>
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <decodeGGA+0x668>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <decodeGGA+0x668>)
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <decodeGGA+0x668>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b2c      	cmp	r3, #44	; 0x2c
 800690a:	d1f2      	bne.n	80068f2 <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <decodeGGA+0x668>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a19      	ldr	r2, [pc, #100]	; (8006978 <decodeGGA+0x668>)
 8006914:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	220c      	movs	r2, #12
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f001 f8db 	bl	8007ada <memset>
	i=0;
 8006924:	2300      	movs	r3, #0
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8006928:	e013      	b.n	8006952 <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <decodeGGA+0x668>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4413      	add	r3, r2
 8006934:	7819      	ldrb	r1, [r3, #0]
 8006936:	f107 020c 	add.w	r2, r7, #12
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	4413      	add	r3, r2
 800693e:	460a      	mov	r2, r1
 8006940:	701a      	strb	r2, [r3, #0]
		i++;
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	3301      	adds	r3, #1
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <decodeGGA+0x668>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <decodeGGA+0x668>)
 8006950:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <decodeGGA+0x668>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b2c      	cmp	r3, #44	; 0x2c
 8006960:	d1e3      	bne.n	800692a <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	4618      	mov	r0, r3
 8006968:	f000 faa8 	bl	8006ebc <atoi>
 800696c:	4603      	mov	r3, r0
 800696e:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 8006974:	e009      	b.n	800698a <decodeGGA+0x67a>
 8006976:	bf00      	nop
 8006978:	2000097c 	.word	0x2000097c
 800697c:	40590000 	.word	0x40590000
 8006980:	40240000 	.word	0x40240000
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	3301      	adds	r3, #1
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
 800698a:	f107 020c 	add.w	r2, r7, #12
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	4413      	add	r3, r2
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b2e      	cmp	r3, #46	; 0x2e
 8006996:	d1f5      	bne.n	8006984 <decodeGGA+0x674>
	j++;
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	3301      	adds	r3, #1
 800699c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 800699e:	f107 030c 	add.w	r3, r7, #12
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7f9 fbde 	bl	8000164 <strlen>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	f107 020c 	add.w	r2, r7, #12
 80069b6:	4413      	add	r3, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fa7f 	bl	8006ebc <atoi>
 80069be:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80069c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7f9 fd27 	bl	8000418 <__aeabi_i2d>
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f7f9 fd22 	bl	8000418 <__aeabi_i2d>
 80069d4:	4680      	mov	r8, r0
 80069d6:	4689      	mov	r9, r1
 80069d8:	6a38      	ldr	r0, [r7, #32]
 80069da:	f7f9 fd1d 	bl	8000418 <__aeabi_i2d>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	4917      	ldr	r1, [pc, #92]	; (8006a44 <decodeGGA+0x734>)
 80069e8:	f003 f960 	bl	8009cac <pow>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7f9 fea4 	bl	8000740 <__aeabi_ddiv>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4620      	mov	r0, r4
 80069fe:	4629      	mov	r1, r5
 8006a00:	f7f9 fbbe 	bl	8000180 <__adddf3>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f7fa f846 	bl	8000a9c <__aeabi_d2f>
 8006a10:	4603      	mov	r3, r0
 8006a12:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	621a      	str	r2, [r3, #32]

	inx++;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <decodeGGA+0x738>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <decodeGGA+0x738>)
 8006a22:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8006a24:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <decodeGGA+0x738>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8006a36:	2300      	movs	r3, #0

}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	; 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a42:	bf00      	nop
 8006a44:	40240000 	.word	0x40240000
 8006a48:	2000097c 	.word	0x2000097c

08006a4c <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8006a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a50:	b090      	sub	sp, #64	; 0x40
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
	inx = 0;
 8006a58:	4b92      	ldr	r3, [pc, #584]	; (8006ca4 <decodeRMC+0x258>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8006a62:	e004      	b.n	8006a6e <decodeRMC+0x22>
 8006a64:	4b8f      	ldr	r3, [pc, #572]	; (8006ca4 <decodeRMC+0x258>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	4a8e      	ldr	r2, [pc, #568]	; (8006ca4 <decodeRMC+0x258>)
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <decodeRMC+0x258>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4413      	add	r3, r2
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b2c      	cmp	r3, #44	; 0x2c
 8006a7c:	d1f2      	bne.n	8006a64 <decodeRMC+0x18>
	inx++;
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <decodeRMC+0x258>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3301      	adds	r3, #1
 8006a84:	4a87      	ldr	r2, [pc, #540]	; (8006ca4 <decodeRMC+0x258>)
 8006a86:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8006a88:	e004      	b.n	8006a94 <decodeRMC+0x48>
 8006a8a:	4b86      	ldr	r3, [pc, #536]	; (8006ca4 <decodeRMC+0x258>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	4a84      	ldr	r2, [pc, #528]	; (8006ca4 <decodeRMC+0x258>)
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4b83      	ldr	r3, [pc, #524]	; (8006ca4 <decodeRMC+0x258>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b2c      	cmp	r3, #44	; 0x2c
 8006aa2:	d1f2      	bne.n	8006a8a <decodeRMC+0x3e>
	inx++;
 8006aa4:	4b7f      	ldr	r3, [pc, #508]	; (8006ca4 <decodeRMC+0x258>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	4a7e      	ldr	r2, [pc, #504]	; (8006ca4 <decodeRMC+0x258>)
 8006aac:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8006aae:	4b7d      	ldr	r3, [pc, #500]	; (8006ca4 <decodeRMC+0x258>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b41      	cmp	r3, #65	; 0x41
 8006abc:	d10d      	bne.n	8006ada <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8006ac4:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <decodeRMC+0x258>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	4a76      	ldr	r2, [pc, #472]	; (8006ca4 <decodeRMC+0x258>)
 8006acc:	6013      	str	r3, [r2, #0]
	inx++;
 8006ace:	4b75      	ldr	r3, [pc, #468]	; (8006ca4 <decodeRMC+0x258>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	4a73      	ldr	r2, [pc, #460]	; (8006ca4 <decodeRMC+0x258>)
 8006ad6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8006ad8:	e009      	b.n	8006aee <decodeRMC+0xa2>
		rmc->isValid =0;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	615a      	str	r2, [r3, #20]
		return 1;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e1d5      	b.n	8006e90 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8006ae4:	4b6f      	ldr	r3, [pc, #444]	; (8006ca4 <decodeRMC+0x258>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a6e      	ldr	r2, [pc, #440]	; (8006ca4 <decodeRMC+0x258>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	4b6d      	ldr	r3, [pc, #436]	; (8006ca4 <decodeRMC+0x258>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b2c      	cmp	r3, #44	; 0x2c
 8006afc:	d1f2      	bne.n	8006ae4 <decodeRMC+0x98>
	inx++;
 8006afe:	4b69      	ldr	r3, [pc, #420]	; (8006ca4 <decodeRMC+0x258>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a67      	ldr	r2, [pc, #412]	; (8006ca4 <decodeRMC+0x258>)
 8006b06:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8006b08:	e004      	b.n	8006b14 <decodeRMC+0xc8>
 8006b0a:	4b66      	ldr	r3, [pc, #408]	; (8006ca4 <decodeRMC+0x258>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	4a64      	ldr	r2, [pc, #400]	; (8006ca4 <decodeRMC+0x258>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	4b63      	ldr	r3, [pc, #396]	; (8006ca4 <decodeRMC+0x258>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b2c      	cmp	r3, #44	; 0x2c
 8006b22:	d1f2      	bne.n	8006b0a <decodeRMC+0xbe>
	inx++;
 8006b24:	4b5f      	ldr	r3, [pc, #380]	; (8006ca4 <decodeRMC+0x258>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	4a5e      	ldr	r2, [pc, #376]	; (8006ca4 <decodeRMC+0x258>)
 8006b2c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8006b2e:	e004      	b.n	8006b3a <decodeRMC+0xee>
 8006b30:	4b5c      	ldr	r3, [pc, #368]	; (8006ca4 <decodeRMC+0x258>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	4a5b      	ldr	r2, [pc, #364]	; (8006ca4 <decodeRMC+0x258>)
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	4b5a      	ldr	r3, [pc, #360]	; (8006ca4 <decodeRMC+0x258>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4413      	add	r3, r2
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b2c      	cmp	r3, #44	; 0x2c
 8006b48:	d1f2      	bne.n	8006b30 <decodeRMC+0xe4>
	inx++;
 8006b4a:	4b56      	ldr	r3, [pc, #344]	; (8006ca4 <decodeRMC+0x258>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	4a54      	ldr	r2, [pc, #336]	; (8006ca4 <decodeRMC+0x258>)
 8006b52:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8006b54:	e004      	b.n	8006b60 <decodeRMC+0x114>
 8006b56:	4b53      	ldr	r3, [pc, #332]	; (8006ca4 <decodeRMC+0x258>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	4a51      	ldr	r2, [pc, #324]	; (8006ca4 <decodeRMC+0x258>)
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	4b50      	ldr	r3, [pc, #320]	; (8006ca4 <decodeRMC+0x258>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b2c      	cmp	r3, #44	; 0x2c
 8006b6e:	d1f2      	bne.n	8006b56 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8006b70:	4b4c      	ldr	r3, [pc, #304]	; (8006ca4 <decodeRMC+0x258>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a4b      	ldr	r2, [pc, #300]	; (8006ca4 <decodeRMC+0x258>)
 8006b78:	6013      	str	r3, [r2, #0]
	i=0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	220c      	movs	r2, #12
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 ffa7 	bl	8007ada <memset>
	while (RMCbuffer[inx] != ',')
 8006b8c:	e013      	b.n	8006bb6 <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8006b8e:	4b45      	ldr	r3, [pc, #276]	; (8006ca4 <decodeRMC+0x258>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4413      	add	r3, r2
 8006b98:	7819      	ldrb	r1, [r3, #0]
 8006b9a:	f107 0208 	add.w	r2, r7, #8
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	4413      	add	r3, r2
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	701a      	strb	r2, [r3, #0]
		i++;
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba8:	3301      	adds	r3, #1
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006bac:	4b3d      	ldr	r3, [pc, #244]	; (8006ca4 <decodeRMC+0x258>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	4a3c      	ldr	r2, [pc, #240]	; (8006ca4 <decodeRMC+0x258>)
 8006bb4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <decodeRMC+0x258>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b2c      	cmp	r3, #44	; 0x2c
 8006bc4:	d1e3      	bne.n	8006b8e <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d055      	beq.n	8006c7c <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8006bd0:	f107 0308 	add.w	r3, r7, #8
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f971 	bl	8006ebc <atoi>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8006be2:	e002      	b.n	8006bea <decodeRMC+0x19e>
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	3301      	adds	r3, #1
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bea:	f107 0208 	add.w	r2, r7, #8
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf6:	d1f5      	bne.n	8006be4 <decodeRMC+0x198>
		j++;
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8006bfe:	f107 0308 	add.w	r3, r7, #8
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 faae 	bl	8000164 <strlen>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f107 0208 	add.w	r2, r7, #8
 8006c16:	4413      	add	r3, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f94f 	bl	8006ebc <atoi>
 8006c1e:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8006c20:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7f9 fbf7 	bl	8000418 <__aeabi_i2d>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c30:	f7f9 fbf2 	bl	8000418 <__aeabi_i2d>
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c3a:	f7f9 fbed 	bl	8000418 <__aeabi_i2d>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	4918      	ldr	r1, [pc, #96]	; (8006ca8 <decodeRMC+0x25c>)
 8006c48:	f003 f830 	bl	8009cac <pow>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4640      	mov	r0, r8
 8006c52:	4649      	mov	r1, r9
 8006c54:	f7f9 fd74 	bl	8000740 <__aeabi_ddiv>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fa8e 	bl	8000180 <__adddf3>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f7f9 ff16 	bl	8000a9c <__aeabi_d2f>
 8006c70:	4603      	mov	r3, r0
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	e003      	b.n	8006c84 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <decodeRMC+0x258>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <decodeRMC+0x258>)
 8006c8c:	6013      	str	r3, [r2, #0]
	i=0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	220c      	movs	r2, #12
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ff1d 	bl	8007ada <memset>
	while (RMCbuffer[inx] != ',')
 8006ca0:	e018      	b.n	8006cd4 <decodeRMC+0x288>
 8006ca2:	bf00      	nop
 8006ca4:	2000097c 	.word	0x2000097c
 8006ca8:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8006cac:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <decodeRMC+0x450>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	7819      	ldrb	r1, [r3, #0]
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	4413      	add	r3, r2
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	701a      	strb	r2, [r3, #0]
		i++;
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006cca:	4b74      	ldr	r3, [pc, #464]	; (8006e9c <decodeRMC+0x450>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	4a72      	ldr	r2, [pc, #456]	; (8006e9c <decodeRMC+0x450>)
 8006cd2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006cd4:	4b71      	ldr	r3, [pc, #452]	; (8006e9c <decodeRMC+0x450>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b2c      	cmp	r3, #44	; 0x2c
 8006ce2:	d1e3      	bne.n	8006cac <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d055      	beq.n	8006d9a <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f8e2 	bl	8006ebc <atoi>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8006d00:	e002      	b.n	8006d08 <decodeRMC+0x2bc>
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	3301      	adds	r3, #1
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
 8006d08:	f107 0208 	add.w	r2, r7, #8
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b2e      	cmp	r3, #46	; 0x2e
 8006d14:	d1f5      	bne.n	8006d02 <decodeRMC+0x2b6>
		j++;
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	3301      	adds	r3, #1
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8006d1c:	f107 0308 	add.w	r3, r7, #8
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7f9 fa1f 	bl	8000164 <strlen>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f107 0208 	add.w	r2, r7, #8
 8006d34:	4413      	add	r3, r2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f8c0 	bl	8006ebc <atoi>
 8006d3c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8006d3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7f9 fb68 	bl	8000418 <__aeabi_i2d>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	69b8      	ldr	r0, [r7, #24]
 8006d4e:	f7f9 fb63 	bl	8000418 <__aeabi_i2d>
 8006d52:	4680      	mov	r8, r0
 8006d54:	4689      	mov	r9, r1
 8006d56:	69f8      	ldr	r0, [r7, #28]
 8006d58:	f7f9 fb5e 	bl	8000418 <__aeabi_i2d>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	f04f 0000 	mov.w	r0, #0
 8006d64:	494e      	ldr	r1, [pc, #312]	; (8006ea0 <decodeRMC+0x454>)
 8006d66:	f002 ffa1 	bl	8009cac <pow>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 fce5 	bl	8000740 <__aeabi_ddiv>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f7f9 f9ff 	bl	8000180 <__adddf3>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f7f9 fe87 	bl	8000a9c <__aeabi_d2f>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	611a      	str	r2, [r3, #16]
 8006d98:	e003      	b.n	8006da2 <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8006da2:	4b3e      	ldr	r3, [pc, #248]	; (8006e9c <decodeRMC+0x450>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <decodeRMC+0x450>)
 8006daa:	6013      	str	r3, [r2, #0]
	i=0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	220c      	movs	r2, #12
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fe8e 	bl	8007ada <memset>
	while (RMCbuffer[inx] != ',')
 8006dbe:	e013      	b.n	8006de8 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <decodeRMC+0x450>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4413      	add	r3, r2
 8006dca:	7819      	ldrb	r1, [r3, #0]
 8006dcc:	f107 0208 	add.w	r2, r7, #8
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd2:	4413      	add	r3, r2
 8006dd4:	460a      	mov	r2, r1
 8006dd6:	701a      	strb	r2, [r3, #0]
		i++;
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	3301      	adds	r3, #1
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006dde:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <decodeRMC+0x450>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <decodeRMC+0x450>)
 8006de6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006de8:	4b2c      	ldr	r3, [pc, #176]	; (8006e9c <decodeRMC+0x450>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b2c      	cmp	r3, #44	; 0x2c
 8006df6:	d1e3      	bne.n	8006dc0 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8006df8:	f107 0308 	add.w	r3, r7, #8
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f85d 	bl	8006ebc <atoi>
 8006e02:	4603      	mov	r3, r0
 8006e04:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <decodeRMC+0x458>)
 8006e06:	fb82 1203 	smull	r1, r2, r2, r3
 8006e0a:	1312      	asrs	r2, r2, #12
 8006e0c:	17db      	asrs	r3, r3, #31
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	4a25      	ldr	r2, [pc, #148]	; (8006ea8 <decodeRMC+0x45c>)
 8006e12:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f84f 	bl	8006ebc <atoi>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4a22      	ldr	r2, [pc, #136]	; (8006eac <decodeRMC+0x460>)
 8006e22:	fb82 1203 	smull	r1, r2, r2, r3
 8006e26:	1152      	asrs	r2, r2, #5
 8006e28:	17db      	asrs	r3, r3, #31
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	; (8006eac <decodeRMC+0x460>)
 8006e2e:	fb83 1302 	smull	r1, r3, r3, r2
 8006e32:	1159      	asrs	r1, r3, #5
 8006e34:	17d3      	asrs	r3, r2, #31
 8006e36:	1acb      	subs	r3, r1, r3
 8006e38:	2164      	movs	r1, #100	; 0x64
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	4a1b      	ldr	r2, [pc, #108]	; (8006eb0 <decodeRMC+0x464>)
 8006e42:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8006e44:	f107 0308 	add.w	r3, r7, #8
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 f837 	bl	8006ebc <atoi>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <decodeRMC+0x460>)
 8006e52:	fb83 1302 	smull	r1, r3, r3, r2
 8006e56:	1159      	asrs	r1, r3, #5
 8006e58:	17d3      	asrs	r3, r2, #31
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <decodeRMC+0x468>)
 8006e66:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <decodeRMC+0x45c>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <decodeRMC+0x46c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4413      	add	r3, r2
 8006e72:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <decodeRMC+0x45c>)
 8006e74:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <decodeRMC+0x45c>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <decodeRMC+0x464>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8006e86:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <decodeRMC+0x468>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	609a      	str	r2, [r3, #8]

	return 0;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3740      	adds	r7, #64	; 0x40
 8006e94:	46bd      	mov	sp, r7
 8006e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000097c 	.word	0x2000097c
 8006ea0:	40240000 	.word	0x40240000
 8006ea4:	68db8bad 	.word	0x68db8bad
 8006ea8:	20000988 	.word	0x20000988
 8006eac:	51eb851f 	.word	0x51eb851f
 8006eb0:	2000098c 	.word	0x2000098c
 8006eb4:	20000990 	.word	0x20000990
 8006eb8:	20000994 	.word	0x20000994

08006ebc <atoi>:
 8006ebc:	220a      	movs	r2, #10
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	f000 b87e 	b.w	8006fc0 <strtol>

08006ec4 <_strtol_l.constprop.0>:
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eca:	4686      	mov	lr, r0
 8006ecc:	4690      	mov	r8, r2
 8006ece:	d001      	beq.n	8006ed4 <_strtol_l.constprop.0+0x10>
 8006ed0:	2b24      	cmp	r3, #36	; 0x24
 8006ed2:	d906      	bls.n	8006ee2 <_strtol_l.constprop.0+0x1e>
 8006ed4:	f000 fe54 	bl	8007b80 <__errno>
 8006ed8:	2316      	movs	r3, #22
 8006eda:	6003      	str	r3, [r0, #0]
 8006edc:	2000      	movs	r0, #0
 8006ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee2:	460d      	mov	r5, r1
 8006ee4:	4835      	ldr	r0, [pc, #212]	; (8006fbc <_strtol_l.constprop.0+0xf8>)
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eec:	5d06      	ldrb	r6, [r0, r4]
 8006eee:	f016 0608 	ands.w	r6, r6, #8
 8006ef2:	d1f8      	bne.n	8006ee6 <_strtol_l.constprop.0+0x22>
 8006ef4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ef6:	d12e      	bne.n	8006f56 <_strtol_l.constprop.0+0x92>
 8006ef8:	2601      	movs	r6, #1
 8006efa:	782c      	ldrb	r4, [r5, #0]
 8006efc:	1c95      	adds	r5, r2, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d057      	beq.n	8006fb2 <_strtol_l.constprop.0+0xee>
 8006f02:	2b10      	cmp	r3, #16
 8006f04:	d109      	bne.n	8006f1a <_strtol_l.constprop.0+0x56>
 8006f06:	2c30      	cmp	r4, #48	; 0x30
 8006f08:	d107      	bne.n	8006f1a <_strtol_l.constprop.0+0x56>
 8006f0a:	782a      	ldrb	r2, [r5, #0]
 8006f0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006f10:	2a58      	cmp	r2, #88	; 0x58
 8006f12:	d149      	bne.n	8006fa8 <_strtol_l.constprop.0+0xe4>
 8006f14:	2310      	movs	r3, #16
 8006f16:	786c      	ldrb	r4, [r5, #1]
 8006f18:	3502      	adds	r5, #2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006f20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f24:	fbbc f9f3 	udiv	r9, ip, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006f32:	2f09      	cmp	r7, #9
 8006f34:	d814      	bhi.n	8006f60 <_strtol_l.constprop.0+0x9c>
 8006f36:	463c      	mov	r4, r7
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	dd20      	ble.n	8006f7e <_strtol_l.constprop.0+0xba>
 8006f3c:	1c57      	adds	r7, r2, #1
 8006f3e:	d007      	beq.n	8006f50 <_strtol_l.constprop.0+0x8c>
 8006f40:	4581      	cmp	r9, r0
 8006f42:	d319      	bcc.n	8006f78 <_strtol_l.constprop.0+0xb4>
 8006f44:	d101      	bne.n	8006f4a <_strtol_l.constprop.0+0x86>
 8006f46:	45a2      	cmp	sl, r4
 8006f48:	db16      	blt.n	8006f78 <_strtol_l.constprop.0+0xb4>
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	fb00 4003 	mla	r0, r0, r3, r4
 8006f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f54:	e7eb      	b.n	8006f2e <_strtol_l.constprop.0+0x6a>
 8006f56:	2c2b      	cmp	r4, #43	; 0x2b
 8006f58:	bf04      	itt	eq
 8006f5a:	782c      	ldrbeq	r4, [r5, #0]
 8006f5c:	1c95      	addeq	r5, r2, #2
 8006f5e:	e7ce      	b.n	8006efe <_strtol_l.constprop.0+0x3a>
 8006f60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006f64:	2f19      	cmp	r7, #25
 8006f66:	d801      	bhi.n	8006f6c <_strtol_l.constprop.0+0xa8>
 8006f68:	3c37      	subs	r4, #55	; 0x37
 8006f6a:	e7e5      	b.n	8006f38 <_strtol_l.constprop.0+0x74>
 8006f6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006f70:	2f19      	cmp	r7, #25
 8006f72:	d804      	bhi.n	8006f7e <_strtol_l.constprop.0+0xba>
 8006f74:	3c57      	subs	r4, #87	; 0x57
 8006f76:	e7df      	b.n	8006f38 <_strtol_l.constprop.0+0x74>
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	e7e8      	b.n	8006f50 <_strtol_l.constprop.0+0x8c>
 8006f7e:	1c53      	adds	r3, r2, #1
 8006f80:	d108      	bne.n	8006f94 <_strtol_l.constprop.0+0xd0>
 8006f82:	2322      	movs	r3, #34	; 0x22
 8006f84:	4660      	mov	r0, ip
 8006f86:	f8ce 3000 	str.w	r3, [lr]
 8006f8a:	f1b8 0f00 	cmp.w	r8, #0
 8006f8e:	d0a6      	beq.n	8006ede <_strtol_l.constprop.0+0x1a>
 8006f90:	1e69      	subs	r1, r5, #1
 8006f92:	e006      	b.n	8006fa2 <_strtol_l.constprop.0+0xde>
 8006f94:	b106      	cbz	r6, 8006f98 <_strtol_l.constprop.0+0xd4>
 8006f96:	4240      	negs	r0, r0
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d09f      	beq.n	8006ede <_strtol_l.constprop.0+0x1a>
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	d1f6      	bne.n	8006f90 <_strtol_l.constprop.0+0xcc>
 8006fa2:	f8c8 1000 	str.w	r1, [r8]
 8006fa6:	e79a      	b.n	8006ede <_strtol_l.constprop.0+0x1a>
 8006fa8:	2430      	movs	r4, #48	; 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1b5      	bne.n	8006f1a <_strtol_l.constprop.0+0x56>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	e7b3      	b.n	8006f1a <_strtol_l.constprop.0+0x56>
 8006fb2:	2c30      	cmp	r4, #48	; 0x30
 8006fb4:	d0a9      	beq.n	8006f0a <_strtol_l.constprop.0+0x46>
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e7af      	b.n	8006f1a <_strtol_l.constprop.0+0x56>
 8006fba:	bf00      	nop
 8006fbc:	0800ac39 	.word	0x0800ac39

08006fc0 <strtol>:
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	4802      	ldr	r0, [pc, #8]	; (8006fd0 <strtol+0x10>)
 8006fc8:	6800      	ldr	r0, [r0, #0]
 8006fca:	f7ff bf7b 	b.w	8006ec4 <_strtol_l.constprop.0>
 8006fce:	bf00      	nop
 8006fd0:	2000006c 	.word	0x2000006c

08006fd4 <__cvt>:
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	bfbb      	ittet	lt
 8006fde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006fe2:	461f      	movlt	r7, r3
 8006fe4:	2300      	movge	r3, #0
 8006fe6:	232d      	movlt	r3, #45	; 0x2d
 8006fe8:	b088      	sub	sp, #32
 8006fea:	4614      	mov	r4, r2
 8006fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ff0:	7013      	strb	r3, [r2, #0]
 8006ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ff4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006ff8:	f023 0820 	bic.w	r8, r3, #32
 8006ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007000:	d005      	beq.n	800700e <__cvt+0x3a>
 8007002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007006:	d100      	bne.n	800700a <__cvt+0x36>
 8007008:	3501      	adds	r5, #1
 800700a:	2302      	movs	r3, #2
 800700c:	e000      	b.n	8007010 <__cvt+0x3c>
 800700e:	2303      	movs	r3, #3
 8007010:	aa07      	add	r2, sp, #28
 8007012:	9204      	str	r2, [sp, #16]
 8007014:	aa06      	add	r2, sp, #24
 8007016:	e9cd a202 	strd	sl, r2, [sp, #8]
 800701a:	e9cd 3500 	strd	r3, r5, [sp]
 800701e:	4622      	mov	r2, r4
 8007020:	463b      	mov	r3, r7
 8007022:	f000 fe71 	bl	8007d08 <_dtoa_r>
 8007026:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800702a:	4606      	mov	r6, r0
 800702c:	d102      	bne.n	8007034 <__cvt+0x60>
 800702e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007030:	07db      	lsls	r3, r3, #31
 8007032:	d522      	bpl.n	800707a <__cvt+0xa6>
 8007034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007038:	eb06 0905 	add.w	r9, r6, r5
 800703c:	d110      	bne.n	8007060 <__cvt+0x8c>
 800703e:	7833      	ldrb	r3, [r6, #0]
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d10a      	bne.n	800705a <__cvt+0x86>
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4620      	mov	r0, r4
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fcb6 	bl	80009bc <__aeabi_dcmpeq>
 8007050:	b918      	cbnz	r0, 800705a <__cvt+0x86>
 8007052:	f1c5 0501 	rsb	r5, r5, #1
 8007056:	f8ca 5000 	str.w	r5, [sl]
 800705a:	f8da 3000 	ldr.w	r3, [sl]
 800705e:	4499      	add	r9, r3
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	4620      	mov	r0, r4
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fca8 	bl	80009bc <__aeabi_dcmpeq>
 800706c:	b108      	cbz	r0, 8007072 <__cvt+0x9e>
 800706e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007072:	2230      	movs	r2, #48	; 0x30
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	454b      	cmp	r3, r9
 8007078:	d307      	bcc.n	800708a <__cvt+0xb6>
 800707a:	4630      	mov	r0, r6
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007080:	1b9b      	subs	r3, r3, r6
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	b008      	add	sp, #32
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	9107      	str	r1, [sp, #28]
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e7f0      	b.n	8007074 <__cvt+0xa0>

08007092 <__exponent>:
 8007092:	4603      	mov	r3, r0
 8007094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007096:	2900      	cmp	r1, #0
 8007098:	f803 2b02 	strb.w	r2, [r3], #2
 800709c:	bfb6      	itet	lt
 800709e:	222d      	movlt	r2, #45	; 0x2d
 80070a0:	222b      	movge	r2, #43	; 0x2b
 80070a2:	4249      	neglt	r1, r1
 80070a4:	2909      	cmp	r1, #9
 80070a6:	7042      	strb	r2, [r0, #1]
 80070a8:	dd2a      	ble.n	8007100 <__exponent+0x6e>
 80070aa:	f10d 0207 	add.w	r2, sp, #7
 80070ae:	4617      	mov	r7, r2
 80070b0:	260a      	movs	r6, #10
 80070b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80070b6:	4694      	mov	ip, r2
 80070b8:	fb06 1415 	mls	r4, r6, r5, r1
 80070bc:	3430      	adds	r4, #48	; 0x30
 80070be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80070c2:	460c      	mov	r4, r1
 80070c4:	2c63      	cmp	r4, #99	; 0x63
 80070c6:	4629      	mov	r1, r5
 80070c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80070cc:	dcf1      	bgt.n	80070b2 <__exponent+0x20>
 80070ce:	3130      	adds	r1, #48	; 0x30
 80070d0:	f1ac 0402 	sub.w	r4, ip, #2
 80070d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80070d8:	4622      	mov	r2, r4
 80070da:	1c41      	adds	r1, r0, #1
 80070dc:	42ba      	cmp	r2, r7
 80070de:	d30a      	bcc.n	80070f6 <__exponent+0x64>
 80070e0:	f10d 0209 	add.w	r2, sp, #9
 80070e4:	eba2 020c 	sub.w	r2, r2, ip
 80070e8:	42bc      	cmp	r4, r7
 80070ea:	bf88      	it	hi
 80070ec:	2200      	movhi	r2, #0
 80070ee:	4413      	add	r3, r2
 80070f0:	1a18      	subs	r0, r3, r0
 80070f2:	b003      	add	sp, #12
 80070f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80070fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80070fe:	e7ed      	b.n	80070dc <__exponent+0x4a>
 8007100:	2330      	movs	r3, #48	; 0x30
 8007102:	3130      	adds	r1, #48	; 0x30
 8007104:	7083      	strb	r3, [r0, #2]
 8007106:	70c1      	strb	r1, [r0, #3]
 8007108:	1d03      	adds	r3, r0, #4
 800710a:	e7f1      	b.n	80070f0 <__exponent+0x5e>

0800710c <_printf_float>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	b091      	sub	sp, #68	; 0x44
 8007112:	460c      	mov	r4, r1
 8007114:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007118:	4616      	mov	r6, r2
 800711a:	461f      	mov	r7, r3
 800711c:	4605      	mov	r5, r0
 800711e:	f000 fce5 	bl	8007aec <_localeconv_r>
 8007122:	6803      	ldr	r3, [r0, #0]
 8007124:	4618      	mov	r0, r3
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	f7f9 f81c 	bl	8000164 <strlen>
 800712c:	2300      	movs	r3, #0
 800712e:	930e      	str	r3, [sp, #56]	; 0x38
 8007130:	f8d8 3000 	ldr.w	r3, [r8]
 8007134:	900a      	str	r0, [sp, #40]	; 0x28
 8007136:	3307      	adds	r3, #7
 8007138:	f023 0307 	bic.w	r3, r3, #7
 800713c:	f103 0208 	add.w	r2, r3, #8
 8007140:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007144:	f8d4 b000 	ldr.w	fp, [r4]
 8007148:	f8c8 2000 	str.w	r2, [r8]
 800714c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007150:	4652      	mov	r2, sl
 8007152:	4643      	mov	r3, r8
 8007154:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007158:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800715c:	930b      	str	r3, [sp, #44]	; 0x2c
 800715e:	f04f 32ff 	mov.w	r2, #4294967295
 8007162:	4650      	mov	r0, sl
 8007164:	4b9c      	ldr	r3, [pc, #624]	; (80073d8 <_printf_float+0x2cc>)
 8007166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007168:	f7f9 fc5a 	bl	8000a20 <__aeabi_dcmpun>
 800716c:	bb70      	cbnz	r0, 80071cc <_printf_float+0xc0>
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	4650      	mov	r0, sl
 8007174:	4b98      	ldr	r3, [pc, #608]	; (80073d8 <_printf_float+0x2cc>)
 8007176:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007178:	f7f9 fc34 	bl	80009e4 <__aeabi_dcmple>
 800717c:	bb30      	cbnz	r0, 80071cc <_printf_float+0xc0>
 800717e:	2200      	movs	r2, #0
 8007180:	2300      	movs	r3, #0
 8007182:	4650      	mov	r0, sl
 8007184:	4641      	mov	r1, r8
 8007186:	f7f9 fc23 	bl	80009d0 <__aeabi_dcmplt>
 800718a:	b110      	cbz	r0, 8007192 <_printf_float+0x86>
 800718c:	232d      	movs	r3, #45	; 0x2d
 800718e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007192:	4a92      	ldr	r2, [pc, #584]	; (80073dc <_printf_float+0x2d0>)
 8007194:	4b92      	ldr	r3, [pc, #584]	; (80073e0 <_printf_float+0x2d4>)
 8007196:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800719a:	bf94      	ite	ls
 800719c:	4690      	movls	r8, r2
 800719e:	4698      	movhi	r8, r3
 80071a0:	2303      	movs	r3, #3
 80071a2:	f04f 0a00 	mov.w	sl, #0
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	f02b 0304 	bic.w	r3, fp, #4
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	4633      	mov	r3, r6
 80071b0:	4621      	mov	r1, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	9700      	str	r7, [sp, #0]
 80071b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80071b8:	f000 f9d6 	bl	8007568 <_printf_common>
 80071bc:	3001      	adds	r0, #1
 80071be:	f040 8090 	bne.w	80072e2 <_printf_float+0x1d6>
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	b011      	add	sp, #68	; 0x44
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	4652      	mov	r2, sl
 80071ce:	4643      	mov	r3, r8
 80071d0:	4650      	mov	r0, sl
 80071d2:	4641      	mov	r1, r8
 80071d4:	f7f9 fc24 	bl	8000a20 <__aeabi_dcmpun>
 80071d8:	b148      	cbz	r0, 80071ee <_printf_float+0xe2>
 80071da:	f1b8 0f00 	cmp.w	r8, #0
 80071de:	bfb8      	it	lt
 80071e0:	232d      	movlt	r3, #45	; 0x2d
 80071e2:	4a80      	ldr	r2, [pc, #512]	; (80073e4 <_printf_float+0x2d8>)
 80071e4:	bfb8      	it	lt
 80071e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071ea:	4b7f      	ldr	r3, [pc, #508]	; (80073e8 <_printf_float+0x2dc>)
 80071ec:	e7d3      	b.n	8007196 <_printf_float+0x8a>
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	d142      	bne.n	800727e <_printf_float+0x172>
 80071f8:	2306      	movs	r3, #6
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	9206      	str	r2, [sp, #24]
 8007200:	aa0e      	add	r2, sp, #56	; 0x38
 8007202:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007206:	aa0d      	add	r2, sp, #52	; 0x34
 8007208:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800720c:	9203      	str	r2, [sp, #12]
 800720e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007212:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	4652      	mov	r2, sl
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4628      	mov	r0, r5
 8007220:	4643      	mov	r3, r8
 8007222:	910b      	str	r1, [sp, #44]	; 0x2c
 8007224:	f7ff fed6 	bl	8006fd4 <__cvt>
 8007228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800722a:	4680      	mov	r8, r0
 800722c:	2947      	cmp	r1, #71	; 0x47
 800722e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007230:	d108      	bne.n	8007244 <_printf_float+0x138>
 8007232:	1cc8      	adds	r0, r1, #3
 8007234:	db02      	blt.n	800723c <_printf_float+0x130>
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	4299      	cmp	r1, r3
 800723a:	dd40      	ble.n	80072be <_printf_float+0x1b2>
 800723c:	f1a9 0902 	sub.w	r9, r9, #2
 8007240:	fa5f f989 	uxtb.w	r9, r9
 8007244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007248:	d81f      	bhi.n	800728a <_printf_float+0x17e>
 800724a:	464a      	mov	r2, r9
 800724c:	3901      	subs	r1, #1
 800724e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007252:	910d      	str	r1, [sp, #52]	; 0x34
 8007254:	f7ff ff1d 	bl	8007092 <__exponent>
 8007258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725a:	4682      	mov	sl, r0
 800725c:	1813      	adds	r3, r2, r0
 800725e:	2a01      	cmp	r2, #1
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	dc02      	bgt.n	800726a <_printf_float+0x15e>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	07d2      	lsls	r2, r2, #31
 8007268:	d501      	bpl.n	800726e <_printf_float+0x162>
 800726a:	3301      	adds	r3, #1
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007272:	2b00      	cmp	r3, #0
 8007274:	d09b      	beq.n	80071ae <_printf_float+0xa2>
 8007276:	232d      	movs	r3, #45	; 0x2d
 8007278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727c:	e797      	b.n	80071ae <_printf_float+0xa2>
 800727e:	2947      	cmp	r1, #71	; 0x47
 8007280:	d1bc      	bne.n	80071fc <_printf_float+0xf0>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1ba      	bne.n	80071fc <_printf_float+0xf0>
 8007286:	2301      	movs	r3, #1
 8007288:	e7b7      	b.n	80071fa <_printf_float+0xee>
 800728a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800728e:	d118      	bne.n	80072c2 <_printf_float+0x1b6>
 8007290:	2900      	cmp	r1, #0
 8007292:	6863      	ldr	r3, [r4, #4]
 8007294:	dd0b      	ble.n	80072ae <_printf_float+0x1a2>
 8007296:	6121      	str	r1, [r4, #16]
 8007298:	b913      	cbnz	r3, 80072a0 <_printf_float+0x194>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	07d0      	lsls	r0, r2, #31
 800729e:	d502      	bpl.n	80072a6 <_printf_float+0x19a>
 80072a0:	3301      	adds	r3, #1
 80072a2:	440b      	add	r3, r1
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	f04f 0a00 	mov.w	sl, #0
 80072aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80072ac:	e7df      	b.n	800726e <_printf_float+0x162>
 80072ae:	b913      	cbnz	r3, 80072b6 <_printf_float+0x1aa>
 80072b0:	6822      	ldr	r2, [r4, #0]
 80072b2:	07d2      	lsls	r2, r2, #31
 80072b4:	d501      	bpl.n	80072ba <_printf_float+0x1ae>
 80072b6:	3302      	adds	r3, #2
 80072b8:	e7f4      	b.n	80072a4 <_printf_float+0x198>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e7f2      	b.n	80072a4 <_printf_float+0x198>
 80072be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c4:	4299      	cmp	r1, r3
 80072c6:	db05      	blt.n	80072d4 <_printf_float+0x1c8>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	6121      	str	r1, [r4, #16]
 80072cc:	07d8      	lsls	r0, r3, #31
 80072ce:	d5ea      	bpl.n	80072a6 <_printf_float+0x19a>
 80072d0:	1c4b      	adds	r3, r1, #1
 80072d2:	e7e7      	b.n	80072a4 <_printf_float+0x198>
 80072d4:	2900      	cmp	r1, #0
 80072d6:	bfcc      	ite	gt
 80072d8:	2201      	movgt	r2, #1
 80072da:	f1c1 0202 	rsble	r2, r1, #2
 80072de:	4413      	add	r3, r2
 80072e0:	e7e0      	b.n	80072a4 <_printf_float+0x198>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	055a      	lsls	r2, r3, #21
 80072e6:	d407      	bmi.n	80072f8 <_printf_float+0x1ec>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	4642      	mov	r2, r8
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	d12b      	bne.n	800734e <_printf_float+0x242>
 80072f6:	e764      	b.n	80071c2 <_printf_float+0xb6>
 80072f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072fc:	f240 80dd 	bls.w	80074ba <_printf_float+0x3ae>
 8007300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	f7f9 fb58 	bl	80009bc <__aeabi_dcmpeq>
 800730c:	2800      	cmp	r0, #0
 800730e:	d033      	beq.n	8007378 <_printf_float+0x26c>
 8007310:	2301      	movs	r3, #1
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	4a35      	ldr	r2, [pc, #212]	; (80073ec <_printf_float+0x2e0>)
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af51 	beq.w	80071c2 <_printf_float+0xb6>
 8007320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007324:	429a      	cmp	r2, r3
 8007326:	db02      	blt.n	800732e <_printf_float+0x222>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07d8      	lsls	r0, r3, #31
 800732c:	d50f      	bpl.n	800734e <_printf_float+0x242>
 800732e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f af42 	beq.w	80071c2 <_printf_float+0xb6>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f104 091a 	add.w	r9, r4, #26
 8007346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007348:	3b01      	subs	r3, #1
 800734a:	4543      	cmp	r3, r8
 800734c:	dc09      	bgt.n	8007362 <_printf_float+0x256>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	079b      	lsls	r3, r3, #30
 8007352:	f100 8104 	bmi.w	800755e <_printf_float+0x452>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e731      	b.n	80071c6 <_printf_float+0xba>
 8007362:	2301      	movs	r3, #1
 8007364:	464a      	mov	r2, r9
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f af28 	beq.w	80071c2 <_printf_float+0xb6>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	e7e6      	b.n	8007346 <_printf_float+0x23a>
 8007378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc38      	bgt.n	80073f0 <_printf_float+0x2e4>
 800737e:	2301      	movs	r3, #1
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <_printf_float+0x2e0>)
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f af1a 	beq.w	80071c2 <_printf_float+0xb6>
 800738e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007392:	4313      	orrs	r3, r2
 8007394:	d102      	bne.n	800739c <_printf_float+0x290>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07d9      	lsls	r1, r3, #31
 800739a:	d5d8      	bpl.n	800734e <_printf_float+0x242>
 800739c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af0b 	beq.w	80071c2 <_printf_float+0xb6>
 80073ac:	f04f 0900 	mov.w	r9, #0
 80073b0:	f104 0a1a 	add.w	sl, r4, #26
 80073b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b6:	425b      	negs	r3, r3
 80073b8:	454b      	cmp	r3, r9
 80073ba:	dc01      	bgt.n	80073c0 <_printf_float+0x2b4>
 80073bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073be:	e794      	b.n	80072ea <_printf_float+0x1de>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4652      	mov	r2, sl
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f aef9 	beq.w	80071c2 <_printf_float+0xb6>
 80073d0:	f109 0901 	add.w	r9, r9, #1
 80073d4:	e7ee      	b.n	80073b4 <_printf_float+0x2a8>
 80073d6:	bf00      	nop
 80073d8:	7fefffff 	.word	0x7fefffff
 80073dc:	0800ad39 	.word	0x0800ad39
 80073e0:	0800ad3d 	.word	0x0800ad3d
 80073e4:	0800ad41 	.word	0x0800ad41
 80073e8:	0800ad45 	.word	0x0800ad45
 80073ec:	0800ad49 	.word	0x0800ad49
 80073f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f4:	429a      	cmp	r2, r3
 80073f6:	bfa8      	it	ge
 80073f8:	461a      	movge	r2, r3
 80073fa:	2a00      	cmp	r2, #0
 80073fc:	4691      	mov	r9, r2
 80073fe:	dc37      	bgt.n	8007470 <_printf_float+0x364>
 8007400:	f04f 0b00 	mov.w	fp, #0
 8007404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007408:	f104 021a 	add.w	r2, r4, #26
 800740c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007410:	ebaa 0309 	sub.w	r3, sl, r9
 8007414:	455b      	cmp	r3, fp
 8007416:	dc33      	bgt.n	8007480 <_printf_float+0x374>
 8007418:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800741c:	429a      	cmp	r2, r3
 800741e:	db3b      	blt.n	8007498 <_printf_float+0x38c>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	07da      	lsls	r2, r3, #31
 8007424:	d438      	bmi.n	8007498 <_printf_float+0x38c>
 8007426:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800742a:	eba2 0903 	sub.w	r9, r2, r3
 800742e:	eba2 020a 	sub.w	r2, r2, sl
 8007432:	4591      	cmp	r9, r2
 8007434:	bfa8      	it	ge
 8007436:	4691      	movge	r9, r2
 8007438:	f1b9 0f00 	cmp.w	r9, #0
 800743c:	dc34      	bgt.n	80074a8 <_printf_float+0x39c>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007446:	f104 0a1a 	add.w	sl, r4, #26
 800744a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	eba3 0309 	sub.w	r3, r3, r9
 8007454:	4543      	cmp	r3, r8
 8007456:	f77f af7a 	ble.w	800734e <_printf_float+0x242>
 800745a:	2301      	movs	r3, #1
 800745c:	4652      	mov	r2, sl
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f aeac 	beq.w	80071c2 <_printf_float+0xb6>
 800746a:	f108 0801 	add.w	r8, r8, #1
 800746e:	e7ec      	b.n	800744a <_printf_float+0x33e>
 8007470:	4613      	mov	r3, r2
 8007472:	4631      	mov	r1, r6
 8007474:	4642      	mov	r2, r8
 8007476:	4628      	mov	r0, r5
 8007478:	47b8      	blx	r7
 800747a:	3001      	adds	r0, #1
 800747c:	d1c0      	bne.n	8007400 <_printf_float+0x2f4>
 800747e:	e6a0      	b.n	80071c2 <_printf_float+0xb6>
 8007480:	2301      	movs	r3, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	920b      	str	r2, [sp, #44]	; 0x2c
 8007488:	47b8      	blx	r7
 800748a:	3001      	adds	r0, #1
 800748c:	f43f ae99 	beq.w	80071c2 <_printf_float+0xb6>
 8007490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007492:	f10b 0b01 	add.w	fp, fp, #1
 8007496:	e7b9      	b.n	800740c <_printf_float+0x300>
 8007498:	4631      	mov	r1, r6
 800749a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	d1bf      	bne.n	8007426 <_printf_float+0x31a>
 80074a6:	e68c      	b.n	80071c2 <_printf_float+0xb6>
 80074a8:	464b      	mov	r3, r9
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	eb08 020a 	add.w	r2, r8, sl
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d1c2      	bne.n	800743e <_printf_float+0x332>
 80074b8:	e683      	b.n	80071c2 <_printf_float+0xb6>
 80074ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074bc:	2a01      	cmp	r2, #1
 80074be:	dc01      	bgt.n	80074c4 <_printf_float+0x3b8>
 80074c0:	07db      	lsls	r3, r3, #31
 80074c2:	d539      	bpl.n	8007538 <_printf_float+0x42c>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4642      	mov	r2, r8
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f ae77 	beq.w	80071c2 <_printf_float+0xb6>
 80074d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f ae6f 	beq.w	80071c2 <_printf_float+0xb6>
 80074e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074e8:	2200      	movs	r2, #0
 80074ea:	2300      	movs	r3, #0
 80074ec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80074f0:	f7f9 fa64 	bl	80009bc <__aeabi_dcmpeq>
 80074f4:	b9d8      	cbnz	r0, 800752e <_printf_float+0x422>
 80074f6:	f109 33ff 	add.w	r3, r9, #4294967295
 80074fa:	f108 0201 	add.w	r2, r8, #1
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	d10e      	bne.n	8007526 <_printf_float+0x41a>
 8007508:	e65b      	b.n	80071c2 <_printf_float+0xb6>
 800750a:	2301      	movs	r3, #1
 800750c:	464a      	mov	r2, r9
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f ae54 	beq.w	80071c2 <_printf_float+0xb6>
 800751a:	f108 0801 	add.w	r8, r8, #1
 800751e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007520:	3b01      	subs	r3, #1
 8007522:	4543      	cmp	r3, r8
 8007524:	dcf1      	bgt.n	800750a <_printf_float+0x3fe>
 8007526:	4653      	mov	r3, sl
 8007528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800752c:	e6de      	b.n	80072ec <_printf_float+0x1e0>
 800752e:	f04f 0800 	mov.w	r8, #0
 8007532:	f104 091a 	add.w	r9, r4, #26
 8007536:	e7f2      	b.n	800751e <_printf_float+0x412>
 8007538:	2301      	movs	r3, #1
 800753a:	4642      	mov	r2, r8
 800753c:	e7df      	b.n	80074fe <_printf_float+0x3f2>
 800753e:	2301      	movs	r3, #1
 8007540:	464a      	mov	r2, r9
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae3a 	beq.w	80071c2 <_printf_float+0xb6>
 800754e:	f108 0801 	add.w	r8, r8, #1
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007556:	1a5b      	subs	r3, r3, r1
 8007558:	4543      	cmp	r3, r8
 800755a:	dcf0      	bgt.n	800753e <_printf_float+0x432>
 800755c:	e6fb      	b.n	8007356 <_printf_float+0x24a>
 800755e:	f04f 0800 	mov.w	r8, #0
 8007562:	f104 0919 	add.w	r9, r4, #25
 8007566:	e7f4      	b.n	8007552 <_printf_float+0x446>

08007568 <_printf_common>:
 8007568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	4616      	mov	r6, r2
 800756e:	4699      	mov	r9, r3
 8007570:	688a      	ldr	r2, [r1, #8]
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	4607      	mov	r7, r0
 8007576:	4293      	cmp	r3, r2
 8007578:	bfb8      	it	lt
 800757a:	4613      	movlt	r3, r2
 800757c:	6033      	str	r3, [r6, #0]
 800757e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007582:	460c      	mov	r4, r1
 8007584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007588:	b10a      	cbz	r2, 800758e <_printf_common+0x26>
 800758a:	3301      	adds	r3, #1
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	0699      	lsls	r1, r3, #26
 8007592:	bf42      	ittt	mi
 8007594:	6833      	ldrmi	r3, [r6, #0]
 8007596:	3302      	addmi	r3, #2
 8007598:	6033      	strmi	r3, [r6, #0]
 800759a:	6825      	ldr	r5, [r4, #0]
 800759c:	f015 0506 	ands.w	r5, r5, #6
 80075a0:	d106      	bne.n	80075b0 <_printf_common+0x48>
 80075a2:	f104 0a19 	add.w	sl, r4, #25
 80075a6:	68e3      	ldr	r3, [r4, #12]
 80075a8:	6832      	ldr	r2, [r6, #0]
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dc2b      	bgt.n	8007608 <_printf_common+0xa0>
 80075b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075b4:	1e13      	subs	r3, r2, #0
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	bf18      	it	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	0692      	lsls	r2, r2, #26
 80075be:	d430      	bmi.n	8007622 <_printf_common+0xba>
 80075c0:	4649      	mov	r1, r9
 80075c2:	4638      	mov	r0, r7
 80075c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d023      	beq.n	8007616 <_printf_common+0xae>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	6922      	ldr	r2, [r4, #16]
 80075d2:	f003 0306 	and.w	r3, r3, #6
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	bf14      	ite	ne
 80075da:	2500      	movne	r5, #0
 80075dc:	6833      	ldreq	r3, [r6, #0]
 80075de:	f04f 0600 	mov.w	r6, #0
 80075e2:	bf08      	it	eq
 80075e4:	68e5      	ldreq	r5, [r4, #12]
 80075e6:	f104 041a 	add.w	r4, r4, #26
 80075ea:	bf08      	it	eq
 80075ec:	1aed      	subeq	r5, r5, r3
 80075ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80075f2:	bf08      	it	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bfc4      	itt	gt
 80075fc:	1a9b      	subgt	r3, r3, r2
 80075fe:	18ed      	addgt	r5, r5, r3
 8007600:	42b5      	cmp	r5, r6
 8007602:	d11a      	bne.n	800763a <_printf_common+0xd2>
 8007604:	2000      	movs	r0, #0
 8007606:	e008      	b.n	800761a <_printf_common+0xb2>
 8007608:	2301      	movs	r3, #1
 800760a:	4652      	mov	r2, sl
 800760c:	4649      	mov	r1, r9
 800760e:	4638      	mov	r0, r7
 8007610:	47c0      	blx	r8
 8007612:	3001      	adds	r0, #1
 8007614:	d103      	bne.n	800761e <_printf_common+0xb6>
 8007616:	f04f 30ff 	mov.w	r0, #4294967295
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	3501      	adds	r5, #1
 8007620:	e7c1      	b.n	80075a6 <_printf_common+0x3e>
 8007622:	2030      	movs	r0, #48	; 0x30
 8007624:	18e1      	adds	r1, r4, r3
 8007626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007630:	4422      	add	r2, r4
 8007632:	3302      	adds	r3, #2
 8007634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007638:	e7c2      	b.n	80075c0 <_printf_common+0x58>
 800763a:	2301      	movs	r3, #1
 800763c:	4622      	mov	r2, r4
 800763e:	4649      	mov	r1, r9
 8007640:	4638      	mov	r0, r7
 8007642:	47c0      	blx	r8
 8007644:	3001      	adds	r0, #1
 8007646:	d0e6      	beq.n	8007616 <_printf_common+0xae>
 8007648:	3601      	adds	r6, #1
 800764a:	e7d9      	b.n	8007600 <_printf_common+0x98>

0800764c <_printf_i>:
 800764c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007650:	7e0f      	ldrb	r7, [r1, #24]
 8007652:	4691      	mov	r9, r2
 8007654:	2f78      	cmp	r7, #120	; 0x78
 8007656:	4680      	mov	r8, r0
 8007658:	460c      	mov	r4, r1
 800765a:	469a      	mov	sl, r3
 800765c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800765e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007662:	d807      	bhi.n	8007674 <_printf_i+0x28>
 8007664:	2f62      	cmp	r7, #98	; 0x62
 8007666:	d80a      	bhi.n	800767e <_printf_i+0x32>
 8007668:	2f00      	cmp	r7, #0
 800766a:	f000 80d5 	beq.w	8007818 <_printf_i+0x1cc>
 800766e:	2f58      	cmp	r7, #88	; 0x58
 8007670:	f000 80c1 	beq.w	80077f6 <_printf_i+0x1aa>
 8007674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800767c:	e03a      	b.n	80076f4 <_printf_i+0xa8>
 800767e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007682:	2b15      	cmp	r3, #21
 8007684:	d8f6      	bhi.n	8007674 <_printf_i+0x28>
 8007686:	a101      	add	r1, pc, #4	; (adr r1, 800768c <_printf_i+0x40>)
 8007688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800768c:	080076e5 	.word	0x080076e5
 8007690:	080076f9 	.word	0x080076f9
 8007694:	08007675 	.word	0x08007675
 8007698:	08007675 	.word	0x08007675
 800769c:	08007675 	.word	0x08007675
 80076a0:	08007675 	.word	0x08007675
 80076a4:	080076f9 	.word	0x080076f9
 80076a8:	08007675 	.word	0x08007675
 80076ac:	08007675 	.word	0x08007675
 80076b0:	08007675 	.word	0x08007675
 80076b4:	08007675 	.word	0x08007675
 80076b8:	080077ff 	.word	0x080077ff
 80076bc:	08007725 	.word	0x08007725
 80076c0:	080077b9 	.word	0x080077b9
 80076c4:	08007675 	.word	0x08007675
 80076c8:	08007675 	.word	0x08007675
 80076cc:	08007821 	.word	0x08007821
 80076d0:	08007675 	.word	0x08007675
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007675 	.word	0x08007675
 80076dc:	08007675 	.word	0x08007675
 80076e0:	080077c1 	.word	0x080077c1
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	1d1a      	adds	r2, r3, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	602a      	str	r2, [r5, #0]
 80076ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0a0      	b.n	800783a <_printf_i+0x1ee>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	682b      	ldr	r3, [r5, #0]
 80076fc:	0607      	lsls	r7, r0, #24
 80076fe:	f103 0104 	add.w	r1, r3, #4
 8007702:	6029      	str	r1, [r5, #0]
 8007704:	d501      	bpl.n	800770a <_printf_i+0xbe>
 8007706:	681e      	ldr	r6, [r3, #0]
 8007708:	e003      	b.n	8007712 <_printf_i+0xc6>
 800770a:	0646      	lsls	r6, r0, #25
 800770c:	d5fb      	bpl.n	8007706 <_printf_i+0xba>
 800770e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007712:	2e00      	cmp	r6, #0
 8007714:	da03      	bge.n	800771e <_printf_i+0xd2>
 8007716:	232d      	movs	r3, #45	; 0x2d
 8007718:	4276      	negs	r6, r6
 800771a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771e:	230a      	movs	r3, #10
 8007720:	4859      	ldr	r0, [pc, #356]	; (8007888 <_printf_i+0x23c>)
 8007722:	e012      	b.n	800774a <_printf_i+0xfe>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	6029      	str	r1, [r5, #0]
 800772c:	0605      	lsls	r5, r0, #24
 800772e:	d501      	bpl.n	8007734 <_printf_i+0xe8>
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	e002      	b.n	800773a <_printf_i+0xee>
 8007734:	0641      	lsls	r1, r0, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0xe4>
 8007738:	881e      	ldrh	r6, [r3, #0]
 800773a:	2f6f      	cmp	r7, #111	; 0x6f
 800773c:	bf0c      	ite	eq
 800773e:	2308      	moveq	r3, #8
 8007740:	230a      	movne	r3, #10
 8007742:	4851      	ldr	r0, [pc, #324]	; (8007888 <_printf_i+0x23c>)
 8007744:	2100      	movs	r1, #0
 8007746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800774a:	6865      	ldr	r5, [r4, #4]
 800774c:	2d00      	cmp	r5, #0
 800774e:	bfa8      	it	ge
 8007750:	6821      	ldrge	r1, [r4, #0]
 8007752:	60a5      	str	r5, [r4, #8]
 8007754:	bfa4      	itt	ge
 8007756:	f021 0104 	bicge.w	r1, r1, #4
 800775a:	6021      	strge	r1, [r4, #0]
 800775c:	b90e      	cbnz	r6, 8007762 <_printf_i+0x116>
 800775e:	2d00      	cmp	r5, #0
 8007760:	d04b      	beq.n	80077fa <_printf_i+0x1ae>
 8007762:	4615      	mov	r5, r2
 8007764:	fbb6 f1f3 	udiv	r1, r6, r3
 8007768:	fb03 6711 	mls	r7, r3, r1, r6
 800776c:	5dc7      	ldrb	r7, [r0, r7]
 800776e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007772:	4637      	mov	r7, r6
 8007774:	42bb      	cmp	r3, r7
 8007776:	460e      	mov	r6, r1
 8007778:	d9f4      	bls.n	8007764 <_printf_i+0x118>
 800777a:	2b08      	cmp	r3, #8
 800777c:	d10b      	bne.n	8007796 <_printf_i+0x14a>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07de      	lsls	r6, r3, #31
 8007782:	d508      	bpl.n	8007796 <_printf_i+0x14a>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	4299      	cmp	r1, r3
 800778a:	bfde      	ittt	le
 800778c:	2330      	movle	r3, #48	; 0x30
 800778e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007796:	1b52      	subs	r2, r2, r5
 8007798:	6122      	str	r2, [r4, #16]
 800779a:	464b      	mov	r3, r9
 800779c:	4621      	mov	r1, r4
 800779e:	4640      	mov	r0, r8
 80077a0:	f8cd a000 	str.w	sl, [sp]
 80077a4:	aa03      	add	r2, sp, #12
 80077a6:	f7ff fedf 	bl	8007568 <_printf_common>
 80077aa:	3001      	adds	r0, #1
 80077ac:	d14a      	bne.n	8007844 <_printf_i+0x1f8>
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	b004      	add	sp, #16
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	f043 0320 	orr.w	r3, r3, #32
 80077be:	6023      	str	r3, [r4, #0]
 80077c0:	2778      	movs	r7, #120	; 0x78
 80077c2:	4832      	ldr	r0, [pc, #200]	; (800788c <_printf_i+0x240>)
 80077c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	6829      	ldr	r1, [r5, #0]
 80077cc:	061f      	lsls	r7, r3, #24
 80077ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80077d2:	d402      	bmi.n	80077da <_printf_i+0x18e>
 80077d4:	065f      	lsls	r7, r3, #25
 80077d6:	bf48      	it	mi
 80077d8:	b2b6      	uxthmi	r6, r6
 80077da:	07df      	lsls	r7, r3, #31
 80077dc:	bf48      	it	mi
 80077de:	f043 0320 	orrmi.w	r3, r3, #32
 80077e2:	6029      	str	r1, [r5, #0]
 80077e4:	bf48      	it	mi
 80077e6:	6023      	strmi	r3, [r4, #0]
 80077e8:	b91e      	cbnz	r6, 80077f2 <_printf_i+0x1a6>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f023 0320 	bic.w	r3, r3, #32
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	2310      	movs	r3, #16
 80077f4:	e7a6      	b.n	8007744 <_printf_i+0xf8>
 80077f6:	4824      	ldr	r0, [pc, #144]	; (8007888 <_printf_i+0x23c>)
 80077f8:	e7e4      	b.n	80077c4 <_printf_i+0x178>
 80077fa:	4615      	mov	r5, r2
 80077fc:	e7bd      	b.n	800777a <_printf_i+0x12e>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	6826      	ldr	r6, [r4, #0]
 8007802:	1d18      	adds	r0, r3, #4
 8007804:	6961      	ldr	r1, [r4, #20]
 8007806:	6028      	str	r0, [r5, #0]
 8007808:	0635      	lsls	r5, r6, #24
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	d501      	bpl.n	8007812 <_printf_i+0x1c6>
 800780e:	6019      	str	r1, [r3, #0]
 8007810:	e002      	b.n	8007818 <_printf_i+0x1cc>
 8007812:	0670      	lsls	r0, r6, #25
 8007814:	d5fb      	bpl.n	800780e <_printf_i+0x1c2>
 8007816:	8019      	strh	r1, [r3, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	4615      	mov	r5, r2
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	e7bc      	b.n	800779a <_printf_i+0x14e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	2100      	movs	r1, #0
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	602a      	str	r2, [r5, #0]
 8007828:	681d      	ldr	r5, [r3, #0]
 800782a:	6862      	ldr	r2, [r4, #4]
 800782c:	4628      	mov	r0, r5
 800782e:	f000 f9d4 	bl	8007bda <memchr>
 8007832:	b108      	cbz	r0, 8007838 <_printf_i+0x1ec>
 8007834:	1b40      	subs	r0, r0, r5
 8007836:	6060      	str	r0, [r4, #4]
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	2300      	movs	r3, #0
 800783e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007842:	e7aa      	b.n	800779a <_printf_i+0x14e>
 8007844:	462a      	mov	r2, r5
 8007846:	4649      	mov	r1, r9
 8007848:	4640      	mov	r0, r8
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	47d0      	blx	sl
 800784e:	3001      	adds	r0, #1
 8007850:	d0ad      	beq.n	80077ae <_printf_i+0x162>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	079b      	lsls	r3, r3, #30
 8007856:	d413      	bmi.n	8007880 <_printf_i+0x234>
 8007858:	68e0      	ldr	r0, [r4, #12]
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	4298      	cmp	r0, r3
 800785e:	bfb8      	it	lt
 8007860:	4618      	movlt	r0, r3
 8007862:	e7a6      	b.n	80077b2 <_printf_i+0x166>
 8007864:	2301      	movs	r3, #1
 8007866:	4632      	mov	r2, r6
 8007868:	4649      	mov	r1, r9
 800786a:	4640      	mov	r0, r8
 800786c:	47d0      	blx	sl
 800786e:	3001      	adds	r0, #1
 8007870:	d09d      	beq.n	80077ae <_printf_i+0x162>
 8007872:	3501      	adds	r5, #1
 8007874:	68e3      	ldr	r3, [r4, #12]
 8007876:	9903      	ldr	r1, [sp, #12]
 8007878:	1a5b      	subs	r3, r3, r1
 800787a:	42ab      	cmp	r3, r5
 800787c:	dcf2      	bgt.n	8007864 <_printf_i+0x218>
 800787e:	e7eb      	b.n	8007858 <_printf_i+0x20c>
 8007880:	2500      	movs	r5, #0
 8007882:	f104 0619 	add.w	r6, r4, #25
 8007886:	e7f5      	b.n	8007874 <_printf_i+0x228>
 8007888:	0800ad4b 	.word	0x0800ad4b
 800788c:	0800ad5c 	.word	0x0800ad5c

08007890 <std>:
 8007890:	2300      	movs	r3, #0
 8007892:	b510      	push	{r4, lr}
 8007894:	4604      	mov	r4, r0
 8007896:	e9c0 3300 	strd	r3, r3, [r0]
 800789a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800789e:	6083      	str	r3, [r0, #8]
 80078a0:	8181      	strh	r1, [r0, #12]
 80078a2:	6643      	str	r3, [r0, #100]	; 0x64
 80078a4:	81c2      	strh	r2, [r0, #14]
 80078a6:	6183      	str	r3, [r0, #24]
 80078a8:	4619      	mov	r1, r3
 80078aa:	2208      	movs	r2, #8
 80078ac:	305c      	adds	r0, #92	; 0x5c
 80078ae:	f000 f914 	bl	8007ada <memset>
 80078b2:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <std+0x58>)
 80078b4:	6224      	str	r4, [r4, #32]
 80078b6:	6263      	str	r3, [r4, #36]	; 0x24
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <std+0x5c>)
 80078ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <std+0x60>)
 80078be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078c0:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <std+0x64>)
 80078c2:	6323      	str	r3, [r4, #48]	; 0x30
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <std+0x68>)
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d006      	beq.n	80078d8 <std+0x48>
 80078ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80078ce:	4294      	cmp	r4, r2
 80078d0:	d002      	beq.n	80078d8 <std+0x48>
 80078d2:	33d0      	adds	r3, #208	; 0xd0
 80078d4:	429c      	cmp	r4, r3
 80078d6:	d105      	bne.n	80078e4 <std+0x54>
 80078d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e0:	f000 b978 	b.w	8007bd4 <__retarget_lock_init_recursive>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	bf00      	nop
 80078e8:	08007a55 	.word	0x08007a55
 80078ec:	08007a77 	.word	0x08007a77
 80078f0:	08007aaf 	.word	0x08007aaf
 80078f4:	08007ad3 	.word	0x08007ad3
 80078f8:	20000998 	.word	0x20000998

080078fc <stdio_exit_handler>:
 80078fc:	4a02      	ldr	r2, [pc, #8]	; (8007908 <stdio_exit_handler+0xc>)
 80078fe:	4903      	ldr	r1, [pc, #12]	; (800790c <stdio_exit_handler+0x10>)
 8007900:	4803      	ldr	r0, [pc, #12]	; (8007910 <stdio_exit_handler+0x14>)
 8007902:	f000 b869 	b.w	80079d8 <_fwalk_sglue>
 8007906:	bf00      	nop
 8007908:	20000014 	.word	0x20000014
 800790c:	0800956d 	.word	0x0800956d
 8007910:	20000020 	.word	0x20000020

08007914 <cleanup_stdio>:
 8007914:	6841      	ldr	r1, [r0, #4]
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <cleanup_stdio+0x34>)
 8007918:	b510      	push	{r4, lr}
 800791a:	4299      	cmp	r1, r3
 800791c:	4604      	mov	r4, r0
 800791e:	d001      	beq.n	8007924 <cleanup_stdio+0x10>
 8007920:	f001 fe24 	bl	800956c <_fflush_r>
 8007924:	68a1      	ldr	r1, [r4, #8]
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <cleanup_stdio+0x38>)
 8007928:	4299      	cmp	r1, r3
 800792a:	d002      	beq.n	8007932 <cleanup_stdio+0x1e>
 800792c:	4620      	mov	r0, r4
 800792e:	f001 fe1d 	bl	800956c <_fflush_r>
 8007932:	68e1      	ldr	r1, [r4, #12]
 8007934:	4b06      	ldr	r3, [pc, #24]	; (8007950 <cleanup_stdio+0x3c>)
 8007936:	4299      	cmp	r1, r3
 8007938:	d004      	beq.n	8007944 <cleanup_stdio+0x30>
 800793a:	4620      	mov	r0, r4
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f001 be14 	b.w	800956c <_fflush_r>
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	20000998 	.word	0x20000998
 800794c:	20000a00 	.word	0x20000a00
 8007950:	20000a68 	.word	0x20000a68

08007954 <global_stdio_init.part.0>:
 8007954:	b510      	push	{r4, lr}
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <global_stdio_init.part.0+0x30>)
 8007958:	4c0b      	ldr	r4, [pc, #44]	; (8007988 <global_stdio_init.part.0+0x34>)
 800795a:	4a0c      	ldr	r2, [pc, #48]	; (800798c <global_stdio_init.part.0+0x38>)
 800795c:	4620      	mov	r0, r4
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	2104      	movs	r1, #4
 8007962:	2200      	movs	r2, #0
 8007964:	f7ff ff94 	bl	8007890 <std>
 8007968:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800796c:	2201      	movs	r2, #1
 800796e:	2109      	movs	r1, #9
 8007970:	f7ff ff8e 	bl	8007890 <std>
 8007974:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007978:	2202      	movs	r2, #2
 800797a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797e:	2112      	movs	r1, #18
 8007980:	f7ff bf86 	b.w	8007890 <std>
 8007984:	20000ad0 	.word	0x20000ad0
 8007988:	20000998 	.word	0x20000998
 800798c:	080078fd 	.word	0x080078fd

08007990 <__sfp_lock_acquire>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__sfp_lock_acquire+0x8>)
 8007992:	f000 b920 	b.w	8007bd6 <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	20000ad9 	.word	0x20000ad9

0800799c <__sfp_lock_release>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__sfp_lock_release+0x8>)
 800799e:	f000 b91b 	b.w	8007bd8 <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	20000ad9 	.word	0x20000ad9

080079a8 <__sinit>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	f7ff fff0 	bl	8007990 <__sfp_lock_acquire>
 80079b0:	6a23      	ldr	r3, [r4, #32]
 80079b2:	b11b      	cbz	r3, 80079bc <__sinit+0x14>
 80079b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b8:	f7ff bff0 	b.w	800799c <__sfp_lock_release>
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <__sinit+0x28>)
 80079be:	6223      	str	r3, [r4, #32]
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <__sinit+0x2c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f5      	bne.n	80079b4 <__sinit+0xc>
 80079c8:	f7ff ffc4 	bl	8007954 <global_stdio_init.part.0>
 80079cc:	e7f2      	b.n	80079b4 <__sinit+0xc>
 80079ce:	bf00      	nop
 80079d0:	08007915 	.word	0x08007915
 80079d4:	20000ad0 	.word	0x20000ad0

080079d8 <_fwalk_sglue>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4607      	mov	r7, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	2600      	movs	r6, #0
 80079e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079e8:	f1b9 0901 	subs.w	r9, r9, #1
 80079ec:	d505      	bpl.n	80079fa <_fwalk_sglue+0x22>
 80079ee:	6824      	ldr	r4, [r4, #0]
 80079f0:	2c00      	cmp	r4, #0
 80079f2:	d1f7      	bne.n	80079e4 <_fwalk_sglue+0xc>
 80079f4:	4630      	mov	r0, r6
 80079f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d907      	bls.n	8007a10 <_fwalk_sglue+0x38>
 8007a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a04:	3301      	adds	r3, #1
 8007a06:	d003      	beq.n	8007a10 <_fwalk_sglue+0x38>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	47c0      	blx	r8
 8007a0e:	4306      	orrs	r6, r0
 8007a10:	3568      	adds	r5, #104	; 0x68
 8007a12:	e7e9      	b.n	80079e8 <_fwalk_sglue+0x10>

08007a14 <siprintf>:
 8007a14:	b40e      	push	{r1, r2, r3}
 8007a16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a1a:	b500      	push	{lr}
 8007a1c:	b09c      	sub	sp, #112	; 0x70
 8007a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a20:	9002      	str	r0, [sp, #8]
 8007a22:	9006      	str	r0, [sp, #24]
 8007a24:	9107      	str	r1, [sp, #28]
 8007a26:	9104      	str	r1, [sp, #16]
 8007a28:	4808      	ldr	r0, [pc, #32]	; (8007a4c <siprintf+0x38>)
 8007a2a:	4909      	ldr	r1, [pc, #36]	; (8007a50 <siprintf+0x3c>)
 8007a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a30:	9105      	str	r1, [sp, #20]
 8007a32:	6800      	ldr	r0, [r0, #0]
 8007a34:	a902      	add	r1, sp, #8
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f001 fc18 	bl	800926c <_svfiprintf_r>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	b01c      	add	sp, #112	; 0x70
 8007a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a48:	b003      	add	sp, #12
 8007a4a:	4770      	bx	lr
 8007a4c:	2000006c 	.word	0x2000006c
 8007a50:	ffff0208 	.word	0xffff0208

08007a54 <__sread>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	460c      	mov	r4, r1
 8007a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5c:	f000 f86c 	bl	8007b38 <_read_r>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	bfab      	itete	ge
 8007a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a66:	89a3      	ldrhlt	r3, [r4, #12]
 8007a68:	181b      	addge	r3, r3, r0
 8007a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a6e:	bfac      	ite	ge
 8007a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a72:	81a3      	strhlt	r3, [r4, #12]
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <__swrite>:
 8007a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	4605      	mov	r5, r0
 8007a80:	05db      	lsls	r3, r3, #23
 8007a82:	460c      	mov	r4, r1
 8007a84:	4616      	mov	r6, r2
 8007a86:	d505      	bpl.n	8007a94 <__swrite+0x1e>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	f000 f840 	bl	8007b14 <_lseek_r>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	4632      	mov	r2, r6
 8007a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aaa:	f000 b857 	b.w	8007b5c <_write_r>

08007aae <__sseek>:
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab6:	f000 f82d 	bl	8007b14 <_lseek_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	bf15      	itete	ne
 8007ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aca:	81a3      	strheq	r3, [r4, #12]
 8007acc:	bf18      	it	ne
 8007ace:	81a3      	strhne	r3, [r4, #12]
 8007ad0:	bd10      	pop	{r4, pc}

08007ad2 <__sclose>:
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	f000 b80d 	b.w	8007af4 <_close_r>

08007ada <memset>:
 8007ada:	4603      	mov	r3, r0
 8007adc:	4402      	add	r2, r0
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d100      	bne.n	8007ae4 <memset+0xa>
 8007ae2:	4770      	bx	lr
 8007ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae8:	e7f9      	b.n	8007ade <memset+0x4>
	...

08007aec <_localeconv_r>:
 8007aec:	4800      	ldr	r0, [pc, #0]	; (8007af0 <_localeconv_r+0x4>)
 8007aee:	4770      	bx	lr
 8007af0:	20000160 	.word	0x20000160

08007af4 <_close_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	2300      	movs	r3, #0
 8007af8:	4d05      	ldr	r5, [pc, #20]	; (8007b10 <_close_r+0x1c>)
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	f7f9 ff78 	bl	80019f4 <_close>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_close_r+0x1a>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_close_r+0x1a>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	20000ad4 	.word	0x20000ad4

08007b14 <_lseek_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4d05      	ldr	r5, [pc, #20]	; (8007b34 <_lseek_r+0x20>)
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7f9 ff8a 	bl	8001a3c <_lseek>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_lseek_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_lseek_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20000ad4 	.word	0x20000ad4

08007b38 <_read_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	2200      	movs	r2, #0
 8007b42:	4d05      	ldr	r5, [pc, #20]	; (8007b58 <_read_r+0x20>)
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7f9 ff1b 	bl	8001982 <_read>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_read_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_read_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20000ad4 	.word	0x20000ad4

08007b5c <_write_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_write_r+0x20>)
 8007b68:	602a      	str	r2, [r5, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f7f9 ff26 	bl	80019bc <_write>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_write_r+0x1e>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_write_r+0x1e>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000ad4 	.word	0x20000ad4

08007b80 <__errno>:
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <__errno+0x8>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	2000006c 	.word	0x2000006c

08007b8c <__libc_init_array>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	2600      	movs	r6, #0
 8007b90:	4d0c      	ldr	r5, [pc, #48]	; (8007bc4 <__libc_init_array+0x38>)
 8007b92:	4c0d      	ldr	r4, [pc, #52]	; (8007bc8 <__libc_init_array+0x3c>)
 8007b94:	1b64      	subs	r4, r4, r5
 8007b96:	10a4      	asrs	r4, r4, #2
 8007b98:	42a6      	cmp	r6, r4
 8007b9a:	d109      	bne.n	8007bb0 <__libc_init_array+0x24>
 8007b9c:	f002 ff8e 	bl	800aabc <_init>
 8007ba0:	2600      	movs	r6, #0
 8007ba2:	4d0a      	ldr	r5, [pc, #40]	; (8007bcc <__libc_init_array+0x40>)
 8007ba4:	4c0a      	ldr	r4, [pc, #40]	; (8007bd0 <__libc_init_array+0x44>)
 8007ba6:	1b64      	subs	r4, r4, r5
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	42a6      	cmp	r6, r4
 8007bac:	d105      	bne.n	8007bba <__libc_init_array+0x2e>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb4:	4798      	blx	r3
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	e7ee      	b.n	8007b98 <__libc_init_array+0xc>
 8007bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbe:	4798      	blx	r3
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	e7f2      	b.n	8007baa <__libc_init_array+0x1e>
 8007bc4:	0800afe0 	.word	0x0800afe0
 8007bc8:	0800afe0 	.word	0x0800afe0
 8007bcc:	0800afe0 	.word	0x0800afe0
 8007bd0:	0800afe4 	.word	0x0800afe4

08007bd4 <__retarget_lock_init_recursive>:
 8007bd4:	4770      	bx	lr

08007bd6 <__retarget_lock_acquire_recursive>:
 8007bd6:	4770      	bx	lr

08007bd8 <__retarget_lock_release_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <memchr>:
 8007bda:	4603      	mov	r3, r0
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	b2c9      	uxtb	r1, r1
 8007be0:	4402      	add	r2, r0
 8007be2:	4293      	cmp	r3, r2
 8007be4:	4618      	mov	r0, r3
 8007be6:	d101      	bne.n	8007bec <memchr+0x12>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e003      	b.n	8007bf4 <memchr+0x1a>
 8007bec:	7804      	ldrb	r4, [r0, #0]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	428c      	cmp	r4, r1
 8007bf2:	d1f6      	bne.n	8007be2 <memchr+0x8>
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <quorem>:
 8007bf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	6903      	ldr	r3, [r0, #16]
 8007bfc:	690c      	ldr	r4, [r1, #16]
 8007bfe:	4607      	mov	r7, r0
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	db7f      	blt.n	8007d04 <quorem+0x10e>
 8007c04:	3c01      	subs	r4, #1
 8007c06:	f100 0514 	add.w	r5, r0, #20
 8007c0a:	f101 0814 	add.w	r8, r1, #20
 8007c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c2c:	d331      	bcc.n	8007c92 <quorem+0x9c>
 8007c2e:	f04f 0e00 	mov.w	lr, #0
 8007c32:	4640      	mov	r0, r8
 8007c34:	46ac      	mov	ip, r5
 8007c36:	46f2      	mov	sl, lr
 8007c38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c3c:	b293      	uxth	r3, r2
 8007c3e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c46:	0c1a      	lsrs	r2, r3, #16
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	fb06 220e 	mla	r2, r6, lr, r2
 8007c4e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c52:	f8dc a000 	ldr.w	sl, [ip]
 8007c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c5a:	fa1f fa8a 	uxth.w	sl, sl
 8007c5e:	4453      	add	r3, sl
 8007c60:	f8dc a000 	ldr.w	sl, [ip]
 8007c64:	b292      	uxth	r2, r2
 8007c66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c74:	4581      	cmp	r9, r0
 8007c76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c7a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c7e:	d2db      	bcs.n	8007c38 <quorem+0x42>
 8007c80:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c84:	b92b      	cbnz	r3, 8007c92 <quorem+0x9c>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	d32d      	bcc.n	8007cec <quorem+0xf6>
 8007c90:	613c      	str	r4, [r7, #16]
 8007c92:	4638      	mov	r0, r7
 8007c94:	f001 f992 	bl	8008fbc <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	db23      	blt.n	8007ce4 <quorem+0xee>
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	3601      	adds	r6, #1
 8007ca2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ca6:	f8d1 c000 	ldr.w	ip, [r1]
 8007caa:	b293      	uxth	r3, r2
 8007cac:	1ac3      	subs	r3, r0, r3
 8007cae:	0c12      	lsrs	r2, r2, #16
 8007cb0:	fa1f f08c 	uxth.w	r0, ip
 8007cb4:	4403      	add	r3, r0
 8007cb6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cc4:	45c1      	cmp	r9, r8
 8007cc6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cca:	f841 3b04 	str.w	r3, [r1], #4
 8007cce:	d2e8      	bcs.n	8007ca2 <quorem+0xac>
 8007cd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd8:	b922      	cbnz	r2, 8007ce4 <quorem+0xee>
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	d30a      	bcc.n	8007cf8 <quorem+0x102>
 8007ce2:	613c      	str	r4, [r7, #16]
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	b003      	add	sp, #12
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	6812      	ldr	r2, [r2, #0]
 8007cee:	3b04      	subs	r3, #4
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	d1cd      	bne.n	8007c90 <quorem+0x9a>
 8007cf4:	3c01      	subs	r4, #1
 8007cf6:	e7c8      	b.n	8007c8a <quorem+0x94>
 8007cf8:	6812      	ldr	r2, [r2, #0]
 8007cfa:	3b04      	subs	r3, #4
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	d1f0      	bne.n	8007ce2 <quorem+0xec>
 8007d00:	3c01      	subs	r4, #1
 8007d02:	e7eb      	b.n	8007cdc <quorem+0xe6>
 8007d04:	2000      	movs	r0, #0
 8007d06:	e7ee      	b.n	8007ce6 <quorem+0xf0>

08007d08 <_dtoa_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4616      	mov	r6, r2
 8007d0e:	461f      	mov	r7, r3
 8007d10:	69c4      	ldr	r4, [r0, #28]
 8007d12:	b099      	sub	sp, #100	; 0x64
 8007d14:	4605      	mov	r5, r0
 8007d16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d1e:	b974      	cbnz	r4, 8007d3e <_dtoa_r+0x36>
 8007d20:	2010      	movs	r0, #16
 8007d22:	f000 fe1d 	bl	8008960 <malloc>
 8007d26:	4602      	mov	r2, r0
 8007d28:	61e8      	str	r0, [r5, #28]
 8007d2a:	b920      	cbnz	r0, 8007d36 <_dtoa_r+0x2e>
 8007d2c:	21ef      	movs	r1, #239	; 0xef
 8007d2e:	4bac      	ldr	r3, [pc, #688]	; (8007fe0 <_dtoa_r+0x2d8>)
 8007d30:	48ac      	ldr	r0, [pc, #688]	; (8007fe4 <_dtoa_r+0x2dc>)
 8007d32:	f001 fc7b 	bl	800962c <__assert_func>
 8007d36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d3a:	6004      	str	r4, [r0, #0]
 8007d3c:	60c4      	str	r4, [r0, #12]
 8007d3e:	69eb      	ldr	r3, [r5, #28]
 8007d40:	6819      	ldr	r1, [r3, #0]
 8007d42:	b151      	cbz	r1, 8007d5a <_dtoa_r+0x52>
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	2301      	movs	r3, #1
 8007d48:	4093      	lsls	r3, r2
 8007d4a:	604a      	str	r2, [r1, #4]
 8007d4c:	608b      	str	r3, [r1, #8]
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fefa 	bl	8008b48 <_Bfree>
 8007d54:	2200      	movs	r2, #0
 8007d56:	69eb      	ldr	r3, [r5, #28]
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	1e3b      	subs	r3, r7, #0
 8007d5c:	bfaf      	iteee	ge
 8007d5e:	2300      	movge	r3, #0
 8007d60:	2201      	movlt	r2, #1
 8007d62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d66:	9305      	strlt	r3, [sp, #20]
 8007d68:	bfa8      	it	ge
 8007d6a:	f8c8 3000 	strge.w	r3, [r8]
 8007d6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007d72:	4b9d      	ldr	r3, [pc, #628]	; (8007fe8 <_dtoa_r+0x2e0>)
 8007d74:	bfb8      	it	lt
 8007d76:	f8c8 2000 	strlt.w	r2, [r8]
 8007d7a:	ea33 0309 	bics.w	r3, r3, r9
 8007d7e:	d119      	bne.n	8007db4 <_dtoa_r+0xac>
 8007d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d8c:	4333      	orrs	r3, r6
 8007d8e:	f000 8589 	beq.w	80088a4 <_dtoa_r+0xb9c>
 8007d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d94:	b953      	cbnz	r3, 8007dac <_dtoa_r+0xa4>
 8007d96:	4b95      	ldr	r3, [pc, #596]	; (8007fec <_dtoa_r+0x2e4>)
 8007d98:	e023      	b.n	8007de2 <_dtoa_r+0xda>
 8007d9a:	4b95      	ldr	r3, [pc, #596]	; (8007ff0 <_dtoa_r+0x2e8>)
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	9803      	ldr	r0, [sp, #12]
 8007da6:	b019      	add	sp, #100	; 0x64
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	4b8f      	ldr	r3, [pc, #572]	; (8007fec <_dtoa_r+0x2e4>)
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	3303      	adds	r3, #3
 8007db2:	e7f5      	b.n	8007da0 <_dtoa_r+0x98>
 8007db4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007db8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f7f8 fdfa 	bl	80009bc <__aeabi_dcmpeq>
 8007dc8:	4680      	mov	r8, r0
 8007dca:	b160      	cbz	r0, 8007de6 <_dtoa_r+0xde>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8562 	beq.w	800889e <_dtoa_r+0xb96>
 8007dda:	4b86      	ldr	r3, [pc, #536]	; (8007ff4 <_dtoa_r+0x2ec>)
 8007ddc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	9303      	str	r3, [sp, #12]
 8007de4:	e7de      	b.n	8007da4 <_dtoa_r+0x9c>
 8007de6:	ab16      	add	r3, sp, #88	; 0x58
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	ab17      	add	r3, sp, #92	; 0x5c
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4628      	mov	r0, r5
 8007df0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007df4:	f001 f98a 	bl	800910c <__d2b>
 8007df8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	2c00      	cmp	r4, #0
 8007e00:	d07e      	beq.n	8007f00 <_dtoa_r+0x1f8>
 8007e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4b75      	ldr	r3, [pc, #468]	; (8007ff8 <_dtoa_r+0x2f0>)
 8007e22:	f7f8 f9ab 	bl	800017c <__aeabi_dsub>
 8007e26:	a368      	add	r3, pc, #416	; (adr r3, 8007fc8 <_dtoa_r+0x2c0>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fb5e 	bl	80004ec <__aeabi_dmul>
 8007e30:	a367      	add	r3, pc, #412	; (adr r3, 8007fd0 <_dtoa_r+0x2c8>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 f9a3 	bl	8000180 <__adddf3>
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	460f      	mov	r7, r1
 8007e40:	f7f8 faea 	bl	8000418 <__aeabi_i2d>
 8007e44:	a364      	add	r3, pc, #400	; (adr r3, 8007fd8 <_dtoa_r+0x2d0>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 fb4f 	bl	80004ec <__aeabi_dmul>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 f993 	bl	8000180 <__adddf3>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	f7f8 fdf5 	bl	8000a4c <__aeabi_d2iz>
 8007e62:	2200      	movs	r2, #0
 8007e64:	4683      	mov	fp, r0
 8007e66:	2300      	movs	r3, #0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fdb0 	bl	80009d0 <__aeabi_dcmplt>
 8007e70:	b148      	cbz	r0, 8007e86 <_dtoa_r+0x17e>
 8007e72:	4658      	mov	r0, fp
 8007e74:	f7f8 fad0 	bl	8000418 <__aeabi_i2d>
 8007e78:	4632      	mov	r2, r6
 8007e7a:	463b      	mov	r3, r7
 8007e7c:	f7f8 fd9e 	bl	80009bc <__aeabi_dcmpeq>
 8007e80:	b908      	cbnz	r0, 8007e86 <_dtoa_r+0x17e>
 8007e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e86:	f1bb 0f16 	cmp.w	fp, #22
 8007e8a:	d857      	bhi.n	8007f3c <_dtoa_r+0x234>
 8007e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e90:	4b5a      	ldr	r3, [pc, #360]	; (8007ffc <_dtoa_r+0x2f4>)
 8007e92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 fd99 	bl	80009d0 <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d04e      	beq.n	8007f40 <_dtoa_r+0x238>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007eac:	1b1b      	subs	r3, r3, r4
 8007eae:	1e5a      	subs	r2, r3, #1
 8007eb0:	bf46      	itte	mi
 8007eb2:	f1c3 0901 	rsbmi	r9, r3, #1
 8007eb6:	2300      	movmi	r3, #0
 8007eb8:	f04f 0900 	movpl.w	r9, #0
 8007ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ebe:	bf48      	it	mi
 8007ec0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ec2:	f1bb 0f00 	cmp.w	fp, #0
 8007ec6:	db3d      	blt.n	8007f44 <_dtoa_r+0x23c>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007ece:	445b      	add	r3, fp
 8007ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ed8:	2b09      	cmp	r3, #9
 8007eda:	d867      	bhi.n	8007fac <_dtoa_r+0x2a4>
 8007edc:	2b05      	cmp	r3, #5
 8007ede:	bfc4      	itt	gt
 8007ee0:	3b04      	subgt	r3, #4
 8007ee2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ee6:	bfc8      	it	gt
 8007ee8:	2400      	movgt	r4, #0
 8007eea:	f1a3 0302 	sub.w	r3, r3, #2
 8007eee:	bfd8      	it	le
 8007ef0:	2401      	movle	r4, #1
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	f200 8086 	bhi.w	8008004 <_dtoa_r+0x2fc>
 8007ef8:	e8df f003 	tbb	[pc, r3]
 8007efc:	5637392c 	.word	0x5637392c
 8007f00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007f04:	441c      	add	r4, r3
 8007f06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	bfc1      	itttt	gt
 8007f0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f12:	fa09 f903 	lslgt.w	r9, r9, r3
 8007f16:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007f1a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f1e:	bfd6      	itet	le
 8007f20:	f1c3 0320 	rsble	r3, r3, #32
 8007f24:	ea49 0003 	orrgt.w	r0, r9, r3
 8007f28:	fa06 f003 	lslle.w	r0, r6, r3
 8007f2c:	f7f8 fa64 	bl	80003f8 <__aeabi_ui2d>
 8007f30:	2201      	movs	r2, #1
 8007f32:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007f36:	3c01      	subs	r4, #1
 8007f38:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f3a:	e76f      	b.n	8007e1c <_dtoa_r+0x114>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e7b3      	b.n	8007ea8 <_dtoa_r+0x1a0>
 8007f40:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f42:	e7b2      	b.n	8007eaa <_dtoa_r+0x1a2>
 8007f44:	f1cb 0300 	rsb	r3, fp, #0
 8007f48:	930a      	str	r3, [sp, #40]	; 0x28
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	eba9 090b 	sub.w	r9, r9, fp
 8007f50:	930e      	str	r3, [sp, #56]	; 0x38
 8007f52:	e7c0      	b.n	8007ed6 <_dtoa_r+0x1ce>
 8007f54:	2300      	movs	r3, #0
 8007f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dc55      	bgt.n	800800a <_dtoa_r+0x302>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	461a      	mov	r2, r3
 8007f62:	9306      	str	r3, [sp, #24]
 8007f64:	9308      	str	r3, [sp, #32]
 8007f66:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f68:	e00b      	b.n	8007f82 <_dtoa_r+0x27a>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7f3      	b.n	8007f56 <_dtoa_r+0x24e>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f74:	445b      	add	r3, fp
 8007f76:	9306      	str	r3, [sp, #24]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	9308      	str	r3, [sp, #32]
 8007f7e:	bfb8      	it	lt
 8007f80:	2301      	movlt	r3, #1
 8007f82:	2100      	movs	r1, #0
 8007f84:	2204      	movs	r2, #4
 8007f86:	69e8      	ldr	r0, [r5, #28]
 8007f88:	f102 0614 	add.w	r6, r2, #20
 8007f8c:	429e      	cmp	r6, r3
 8007f8e:	d940      	bls.n	8008012 <_dtoa_r+0x30a>
 8007f90:	6041      	str	r1, [r0, #4]
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 fd98 	bl	8008ac8 <_Balloc>
 8007f98:	9003      	str	r0, [sp, #12]
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d13c      	bne.n	8008018 <_dtoa_r+0x310>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f240 11af 	movw	r1, #431	; 0x1af
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <_dtoa_r+0x2f8>)
 8007fa6:	e6c3      	b.n	8007d30 <_dtoa_r+0x28>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e7e1      	b.n	8007f70 <_dtoa_r+0x268>
 8007fac:	2401      	movs	r4, #1
 8007fae:	2300      	movs	r3, #0
 8007fb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fb2:	9322      	str	r3, [sp, #136]	; 0x88
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	2200      	movs	r2, #0
 8007fba:	9306      	str	r3, [sp, #24]
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	2312      	movs	r3, #18
 8007fc0:	e7d1      	b.n	8007f66 <_dtoa_r+0x25e>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	636f4361 	.word	0x636f4361
 8007fcc:	3fd287a7 	.word	0x3fd287a7
 8007fd0:	8b60c8b3 	.word	0x8b60c8b3
 8007fd4:	3fc68a28 	.word	0x3fc68a28
 8007fd8:	509f79fb 	.word	0x509f79fb
 8007fdc:	3fd34413 	.word	0x3fd34413
 8007fe0:	0800ad7a 	.word	0x0800ad7a
 8007fe4:	0800ad91 	.word	0x0800ad91
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	0800ad76 	.word	0x0800ad76
 8007ff0:	0800ad6d 	.word	0x0800ad6d
 8007ff4:	0800ad4a 	.word	0x0800ad4a
 8007ff8:	3ff80000 	.word	0x3ff80000
 8007ffc:	0800ae80 	.word	0x0800ae80
 8008000:	0800ade9 	.word	0x0800ade9
 8008004:	2301      	movs	r3, #1
 8008006:	930b      	str	r3, [sp, #44]	; 0x2c
 8008008:	e7d4      	b.n	8007fb4 <_dtoa_r+0x2ac>
 800800a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800800c:	9306      	str	r3, [sp, #24]
 800800e:	9308      	str	r3, [sp, #32]
 8008010:	e7b7      	b.n	8007f82 <_dtoa_r+0x27a>
 8008012:	3101      	adds	r1, #1
 8008014:	0052      	lsls	r2, r2, #1
 8008016:	e7b7      	b.n	8007f88 <_dtoa_r+0x280>
 8008018:	69eb      	ldr	r3, [r5, #28]
 800801a:	9a03      	ldr	r2, [sp, #12]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	9b08      	ldr	r3, [sp, #32]
 8008020:	2b0e      	cmp	r3, #14
 8008022:	f200 80a8 	bhi.w	8008176 <_dtoa_r+0x46e>
 8008026:	2c00      	cmp	r4, #0
 8008028:	f000 80a5 	beq.w	8008176 <_dtoa_r+0x46e>
 800802c:	f1bb 0f00 	cmp.w	fp, #0
 8008030:	dd34      	ble.n	800809c <_dtoa_r+0x394>
 8008032:	4b9a      	ldr	r3, [pc, #616]	; (800829c <_dtoa_r+0x594>)
 8008034:	f00b 020f 	and.w	r2, fp, #15
 8008038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800803c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008040:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008044:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008048:	ea4f 142b 	mov.w	r4, fp, asr #4
 800804c:	d016      	beq.n	800807c <_dtoa_r+0x374>
 800804e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008052:	4b93      	ldr	r3, [pc, #588]	; (80082a0 <_dtoa_r+0x598>)
 8008054:	2703      	movs	r7, #3
 8008056:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800805a:	f7f8 fb71 	bl	8000740 <__aeabi_ddiv>
 800805e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008062:	f004 040f 	and.w	r4, r4, #15
 8008066:	4e8e      	ldr	r6, [pc, #568]	; (80082a0 <_dtoa_r+0x598>)
 8008068:	b954      	cbnz	r4, 8008080 <_dtoa_r+0x378>
 800806a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800806e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008072:	f7f8 fb65 	bl	8000740 <__aeabi_ddiv>
 8008076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807a:	e029      	b.n	80080d0 <_dtoa_r+0x3c8>
 800807c:	2702      	movs	r7, #2
 800807e:	e7f2      	b.n	8008066 <_dtoa_r+0x35e>
 8008080:	07e1      	lsls	r1, r4, #31
 8008082:	d508      	bpl.n	8008096 <_dtoa_r+0x38e>
 8008084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008088:	e9d6 2300 	ldrd	r2, r3, [r6]
 800808c:	f7f8 fa2e 	bl	80004ec <__aeabi_dmul>
 8008090:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008094:	3701      	adds	r7, #1
 8008096:	1064      	asrs	r4, r4, #1
 8008098:	3608      	adds	r6, #8
 800809a:	e7e5      	b.n	8008068 <_dtoa_r+0x360>
 800809c:	f000 80a5 	beq.w	80081ea <_dtoa_r+0x4e2>
 80080a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080a4:	f1cb 0400 	rsb	r4, fp, #0
 80080a8:	4b7c      	ldr	r3, [pc, #496]	; (800829c <_dtoa_r+0x594>)
 80080aa:	f004 020f 	and.w	r2, r4, #15
 80080ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f7f8 fa19 	bl	80004ec <__aeabi_dmul>
 80080ba:	2702      	movs	r7, #2
 80080bc:	2300      	movs	r3, #0
 80080be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080c2:	4e77      	ldr	r6, [pc, #476]	; (80082a0 <_dtoa_r+0x598>)
 80080c4:	1124      	asrs	r4, r4, #4
 80080c6:	2c00      	cmp	r4, #0
 80080c8:	f040 8084 	bne.w	80081d4 <_dtoa_r+0x4cc>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1d2      	bne.n	8008076 <_dtoa_r+0x36e>
 80080d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8087 	beq.w	80081ee <_dtoa_r+0x4e6>
 80080e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080e4:	2200      	movs	r2, #0
 80080e6:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <_dtoa_r+0x59c>)
 80080e8:	f7f8 fc72 	bl	80009d0 <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d07e      	beq.n	80081ee <_dtoa_r+0x4e6>
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d07b      	beq.n	80081ee <_dtoa_r+0x4e6>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dd38      	ble.n	800816e <_dtoa_r+0x466>
 80080fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008100:	2200      	movs	r2, #0
 8008102:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <_dtoa_r+0x5a0>)
 8008104:	f7f8 f9f2 	bl	80004ec <__aeabi_dmul>
 8008108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800810c:	9c06      	ldr	r4, [sp, #24]
 800810e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008112:	3701      	adds	r7, #1
 8008114:	4638      	mov	r0, r7
 8008116:	f7f8 f97f 	bl	8000418 <__aeabi_i2d>
 800811a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811e:	f7f8 f9e5 	bl	80004ec <__aeabi_dmul>
 8008122:	2200      	movs	r2, #0
 8008124:	4b61      	ldr	r3, [pc, #388]	; (80082ac <_dtoa_r+0x5a4>)
 8008126:	f7f8 f82b 	bl	8000180 <__adddf3>
 800812a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800812e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008132:	9611      	str	r6, [sp, #68]	; 0x44
 8008134:	2c00      	cmp	r4, #0
 8008136:	d15d      	bne.n	80081f4 <_dtoa_r+0x4ec>
 8008138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800813c:	2200      	movs	r2, #0
 800813e:	4b5c      	ldr	r3, [pc, #368]	; (80082b0 <_dtoa_r+0x5a8>)
 8008140:	f7f8 f81c 	bl	800017c <__aeabi_dsub>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800814c:	4633      	mov	r3, r6
 800814e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008150:	f7f8 fc5c 	bl	8000a0c <__aeabi_dcmpgt>
 8008154:	2800      	cmp	r0, #0
 8008156:	f040 8295 	bne.w	8008684 <_dtoa_r+0x97c>
 800815a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800815e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008160:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008164:	f7f8 fc34 	bl	80009d0 <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 8289 	bne.w	8008680 <_dtoa_r+0x978>
 800816e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008178:	2b00      	cmp	r3, #0
 800817a:	f2c0 8151 	blt.w	8008420 <_dtoa_r+0x718>
 800817e:	f1bb 0f0e 	cmp.w	fp, #14
 8008182:	f300 814d 	bgt.w	8008420 <_dtoa_r+0x718>
 8008186:	4b45      	ldr	r3, [pc, #276]	; (800829c <_dtoa_r+0x594>)
 8008188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800818c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008190:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008196:	2b00      	cmp	r3, #0
 8008198:	f280 80da 	bge.w	8008350 <_dtoa_r+0x648>
 800819c:	9b08      	ldr	r3, [sp, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f300 80d6 	bgt.w	8008350 <_dtoa_r+0x648>
 80081a4:	f040 826b 	bne.w	800867e <_dtoa_r+0x976>
 80081a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081ac:	2200      	movs	r2, #0
 80081ae:	4b40      	ldr	r3, [pc, #256]	; (80082b0 <_dtoa_r+0x5a8>)
 80081b0:	f7f8 f99c 	bl	80004ec <__aeabi_dmul>
 80081b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b8:	f7f8 fc1e 	bl	80009f8 <__aeabi_dcmpge>
 80081bc:	9c08      	ldr	r4, [sp, #32]
 80081be:	4626      	mov	r6, r4
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f040 8241 	bne.w	8008648 <_dtoa_r+0x940>
 80081c6:	2331      	movs	r3, #49	; 0x31
 80081c8:	9f03      	ldr	r7, [sp, #12]
 80081ca:	f10b 0b01 	add.w	fp, fp, #1
 80081ce:	f807 3b01 	strb.w	r3, [r7], #1
 80081d2:	e23d      	b.n	8008650 <_dtoa_r+0x948>
 80081d4:	07e2      	lsls	r2, r4, #31
 80081d6:	d505      	bpl.n	80081e4 <_dtoa_r+0x4dc>
 80081d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081dc:	f7f8 f986 	bl	80004ec <__aeabi_dmul>
 80081e0:	2301      	movs	r3, #1
 80081e2:	3701      	adds	r7, #1
 80081e4:	1064      	asrs	r4, r4, #1
 80081e6:	3608      	adds	r6, #8
 80081e8:	e76d      	b.n	80080c6 <_dtoa_r+0x3be>
 80081ea:	2702      	movs	r7, #2
 80081ec:	e770      	b.n	80080d0 <_dtoa_r+0x3c8>
 80081ee:	46d8      	mov	r8, fp
 80081f0:	9c08      	ldr	r4, [sp, #32]
 80081f2:	e78f      	b.n	8008114 <_dtoa_r+0x40c>
 80081f4:	9903      	ldr	r1, [sp, #12]
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <_dtoa_r+0x594>)
 80081f8:	4421      	add	r1, r4
 80081fa:	9112      	str	r1, [sp, #72]	; 0x48
 80081fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008202:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008206:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800820a:	2900      	cmp	r1, #0
 800820c:	d054      	beq.n	80082b8 <_dtoa_r+0x5b0>
 800820e:	2000      	movs	r0, #0
 8008210:	4928      	ldr	r1, [pc, #160]	; (80082b4 <_dtoa_r+0x5ac>)
 8008212:	f7f8 fa95 	bl	8000740 <__aeabi_ddiv>
 8008216:	463b      	mov	r3, r7
 8008218:	4632      	mov	r2, r6
 800821a:	f7f7 ffaf 	bl	800017c <__aeabi_dsub>
 800821e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008222:	9f03      	ldr	r7, [sp, #12]
 8008224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008228:	f7f8 fc10 	bl	8000a4c <__aeabi_d2iz>
 800822c:	4604      	mov	r4, r0
 800822e:	f7f8 f8f3 	bl	8000418 <__aeabi_i2d>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800823a:	f7f7 ff9f 	bl	800017c <__aeabi_dsub>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	3430      	adds	r4, #48	; 0x30
 8008244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800824c:	f807 4b01 	strb.w	r4, [r7], #1
 8008250:	f7f8 fbbe 	bl	80009d0 <__aeabi_dcmplt>
 8008254:	2800      	cmp	r0, #0
 8008256:	d173      	bne.n	8008340 <_dtoa_r+0x638>
 8008258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800825c:	2000      	movs	r0, #0
 800825e:	4911      	ldr	r1, [pc, #68]	; (80082a4 <_dtoa_r+0x59c>)
 8008260:	f7f7 ff8c 	bl	800017c <__aeabi_dsub>
 8008264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008268:	f7f8 fbb2 	bl	80009d0 <__aeabi_dcmplt>
 800826c:	2800      	cmp	r0, #0
 800826e:	f040 80b6 	bne.w	80083de <_dtoa_r+0x6d6>
 8008272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008274:	429f      	cmp	r7, r3
 8008276:	f43f af7a 	beq.w	800816e <_dtoa_r+0x466>
 800827a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800827e:	2200      	movs	r2, #0
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <_dtoa_r+0x5a0>)
 8008282:	f7f8 f933 	bl	80004ec <__aeabi_dmul>
 8008286:	2200      	movs	r2, #0
 8008288:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800828c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <_dtoa_r+0x5a0>)
 8008292:	f7f8 f92b 	bl	80004ec <__aeabi_dmul>
 8008296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800829a:	e7c3      	b.n	8008224 <_dtoa_r+0x51c>
 800829c:	0800ae80 	.word	0x0800ae80
 80082a0:	0800ae58 	.word	0x0800ae58
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	40240000 	.word	0x40240000
 80082ac:	401c0000 	.word	0x401c0000
 80082b0:	40140000 	.word	0x40140000
 80082b4:	3fe00000 	.word	0x3fe00000
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 f916 	bl	80004ec <__aeabi_dmul>
 80082c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082c6:	9c03      	ldr	r4, [sp, #12]
 80082c8:	9314      	str	r3, [sp, #80]	; 0x50
 80082ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082ce:	f7f8 fbbd 	bl	8000a4c <__aeabi_d2iz>
 80082d2:	9015      	str	r0, [sp, #84]	; 0x54
 80082d4:	f7f8 f8a0 	bl	8000418 <__aeabi_i2d>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e0:	f7f7 ff4c 	bl	800017c <__aeabi_dsub>
 80082e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e6:	4606      	mov	r6, r0
 80082e8:	3330      	adds	r3, #48	; 0x30
 80082ea:	f804 3b01 	strb.w	r3, [r4], #1
 80082ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082f0:	460f      	mov	r7, r1
 80082f2:	429c      	cmp	r4, r3
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	d124      	bne.n	8008344 <_dtoa_r+0x63c>
 80082fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082fe:	4baf      	ldr	r3, [pc, #700]	; (80085bc <_dtoa_r+0x8b4>)
 8008300:	f7f7 ff3e 	bl	8000180 <__adddf3>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	f7f8 fb7e 	bl	8000a0c <__aeabi_dcmpgt>
 8008310:	2800      	cmp	r0, #0
 8008312:	d163      	bne.n	80083dc <_dtoa_r+0x6d4>
 8008314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008318:	2000      	movs	r0, #0
 800831a:	49a8      	ldr	r1, [pc, #672]	; (80085bc <_dtoa_r+0x8b4>)
 800831c:	f7f7 ff2e 	bl	800017c <__aeabi_dsub>
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f7f8 fb52 	bl	80009d0 <__aeabi_dcmplt>
 800832c:	2800      	cmp	r0, #0
 800832e:	f43f af1e 	beq.w	800816e <_dtoa_r+0x466>
 8008332:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008334:	1e7b      	subs	r3, r7, #1
 8008336:	9314      	str	r3, [sp, #80]	; 0x50
 8008338:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800833c:	2b30      	cmp	r3, #48	; 0x30
 800833e:	d0f8      	beq.n	8008332 <_dtoa_r+0x62a>
 8008340:	46c3      	mov	fp, r8
 8008342:	e03b      	b.n	80083bc <_dtoa_r+0x6b4>
 8008344:	4b9e      	ldr	r3, [pc, #632]	; (80085c0 <_dtoa_r+0x8b8>)
 8008346:	f7f8 f8d1 	bl	80004ec <__aeabi_dmul>
 800834a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800834e:	e7bc      	b.n	80082ca <_dtoa_r+0x5c2>
 8008350:	9f03      	ldr	r7, [sp, #12]
 8008352:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f8 f9ef 	bl	8000740 <__aeabi_ddiv>
 8008362:	f7f8 fb73 	bl	8000a4c <__aeabi_d2iz>
 8008366:	4604      	mov	r4, r0
 8008368:	f7f8 f856 	bl	8000418 <__aeabi_i2d>
 800836c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008370:	f7f8 f8bc 	bl	80004ec <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4640      	mov	r0, r8
 800837a:	4649      	mov	r1, r9
 800837c:	f7f7 fefe 	bl	800017c <__aeabi_dsub>
 8008380:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008384:	f807 6b01 	strb.w	r6, [r7], #1
 8008388:	9e03      	ldr	r6, [sp, #12]
 800838a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800838e:	1bbe      	subs	r6, r7, r6
 8008390:	45b4      	cmp	ip, r6
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	d136      	bne.n	8008406 <_dtoa_r+0x6fe>
 8008398:	f7f7 fef2 	bl	8000180 <__adddf3>
 800839c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083a0:	4680      	mov	r8, r0
 80083a2:	4689      	mov	r9, r1
 80083a4:	f7f8 fb32 	bl	8000a0c <__aeabi_dcmpgt>
 80083a8:	bb58      	cbnz	r0, 8008402 <_dtoa_r+0x6fa>
 80083aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 fb03 	bl	80009bc <__aeabi_dcmpeq>
 80083b6:	b108      	cbz	r0, 80083bc <_dtoa_r+0x6b4>
 80083b8:	07e3      	lsls	r3, r4, #31
 80083ba:	d422      	bmi.n	8008402 <_dtoa_r+0x6fa>
 80083bc:	4651      	mov	r1, sl
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fbc2 	bl	8008b48 <_Bfree>
 80083c4:	2300      	movs	r3, #0
 80083c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083c8:	703b      	strb	r3, [r7, #0]
 80083ca:	f10b 0301 	add.w	r3, fp, #1
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f43f ace6 	beq.w	8007da4 <_dtoa_r+0x9c>
 80083d8:	601f      	str	r7, [r3, #0]
 80083da:	e4e3      	b.n	8007da4 <_dtoa_r+0x9c>
 80083dc:	4627      	mov	r7, r4
 80083de:	463b      	mov	r3, r7
 80083e0:	461f      	mov	r7, r3
 80083e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083e6:	2a39      	cmp	r2, #57	; 0x39
 80083e8:	d107      	bne.n	80083fa <_dtoa_r+0x6f2>
 80083ea:	9a03      	ldr	r2, [sp, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d1f7      	bne.n	80083e0 <_dtoa_r+0x6d8>
 80083f0:	2230      	movs	r2, #48	; 0x30
 80083f2:	9903      	ldr	r1, [sp, #12]
 80083f4:	f108 0801 	add.w	r8, r8, #1
 80083f8:	700a      	strb	r2, [r1, #0]
 80083fa:	781a      	ldrb	r2, [r3, #0]
 80083fc:	3201      	adds	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e79e      	b.n	8008340 <_dtoa_r+0x638>
 8008402:	46d8      	mov	r8, fp
 8008404:	e7eb      	b.n	80083de <_dtoa_r+0x6d6>
 8008406:	2200      	movs	r2, #0
 8008408:	4b6d      	ldr	r3, [pc, #436]	; (80085c0 <_dtoa_r+0x8b8>)
 800840a:	f7f8 f86f 	bl	80004ec <__aeabi_dmul>
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	4680      	mov	r8, r0
 8008414:	4689      	mov	r9, r1
 8008416:	f7f8 fad1 	bl	80009bc <__aeabi_dcmpeq>
 800841a:	2800      	cmp	r0, #0
 800841c:	d09b      	beq.n	8008356 <_dtoa_r+0x64e>
 800841e:	e7cd      	b.n	80083bc <_dtoa_r+0x6b4>
 8008420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008422:	2a00      	cmp	r2, #0
 8008424:	f000 80c4 	beq.w	80085b0 <_dtoa_r+0x8a8>
 8008428:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800842a:	2a01      	cmp	r2, #1
 800842c:	f300 80a8 	bgt.w	8008580 <_dtoa_r+0x878>
 8008430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008432:	2a00      	cmp	r2, #0
 8008434:	f000 80a0 	beq.w	8008578 <_dtoa_r+0x870>
 8008438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800843c:	464f      	mov	r7, r9
 800843e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008442:	2101      	movs	r1, #1
 8008444:	441a      	add	r2, r3
 8008446:	4628      	mov	r0, r5
 8008448:	4499      	add	r9, r3
 800844a:	9209      	str	r2, [sp, #36]	; 0x24
 800844c:	f000 fc32 	bl	8008cb4 <__i2b>
 8008450:	4606      	mov	r6, r0
 8008452:	b15f      	cbz	r7, 800846c <_dtoa_r+0x764>
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	dd08      	ble.n	800846c <_dtoa_r+0x764>
 800845a:	42bb      	cmp	r3, r7
 800845c:	bfa8      	it	ge
 800845e:	463b      	movge	r3, r7
 8008460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008462:	eba9 0903 	sub.w	r9, r9, r3
 8008466:	1aff      	subs	r7, r7, r3
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	b1f3      	cbz	r3, 80084ae <_dtoa_r+0x7a6>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a0 	beq.w	80085b8 <_dtoa_r+0x8b0>
 8008478:	2c00      	cmp	r4, #0
 800847a:	dd10      	ble.n	800849e <_dtoa_r+0x796>
 800847c:	4631      	mov	r1, r6
 800847e:	4622      	mov	r2, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 fcd5 	bl	8008e30 <__pow5mult>
 8008486:	4652      	mov	r2, sl
 8008488:	4601      	mov	r1, r0
 800848a:	4606      	mov	r6, r0
 800848c:	4628      	mov	r0, r5
 800848e:	f000 fc27 	bl	8008ce0 <__multiply>
 8008492:	4680      	mov	r8, r0
 8008494:	4651      	mov	r1, sl
 8008496:	4628      	mov	r0, r5
 8008498:	f000 fb56 	bl	8008b48 <_Bfree>
 800849c:	46c2      	mov	sl, r8
 800849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a0:	1b1a      	subs	r2, r3, r4
 80084a2:	d004      	beq.n	80084ae <_dtoa_r+0x7a6>
 80084a4:	4651      	mov	r1, sl
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 fcc2 	bl	8008e30 <__pow5mult>
 80084ac:	4682      	mov	sl, r0
 80084ae:	2101      	movs	r1, #1
 80084b0:	4628      	mov	r0, r5
 80084b2:	f000 fbff 	bl	8008cb4 <__i2b>
 80084b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b8:	4604      	mov	r4, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f340 8082 	ble.w	80085c4 <_dtoa_r+0x8bc>
 80084c0:	461a      	mov	r2, r3
 80084c2:	4601      	mov	r1, r0
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 fcb3 	bl	8008e30 <__pow5mult>
 80084ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084cc:	4604      	mov	r4, r0
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd7b      	ble.n	80085ca <_dtoa_r+0x8c2>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084dc:	6918      	ldr	r0, [r3, #16]
 80084de:	f000 fb9b 	bl	8008c18 <__hi0bits>
 80084e2:	f1c0 0020 	rsb	r0, r0, #32
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	4418      	add	r0, r3
 80084ea:	f010 001f 	ands.w	r0, r0, #31
 80084ee:	f000 8092 	beq.w	8008616 <_dtoa_r+0x90e>
 80084f2:	f1c0 0320 	rsb	r3, r0, #32
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	f340 8085 	ble.w	8008606 <_dtoa_r+0x8fe>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	f1c0 001c 	rsb	r0, r0, #28
 8008502:	4403      	add	r3, r0
 8008504:	4481      	add	r9, r0
 8008506:	4407      	add	r7, r0
 8008508:	9309      	str	r3, [sp, #36]	; 0x24
 800850a:	f1b9 0f00 	cmp.w	r9, #0
 800850e:	dd05      	ble.n	800851c <_dtoa_r+0x814>
 8008510:	4651      	mov	r1, sl
 8008512:	464a      	mov	r2, r9
 8008514:	4628      	mov	r0, r5
 8008516:	f000 fce5 	bl	8008ee4 <__lshift>
 800851a:	4682      	mov	sl, r0
 800851c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd05      	ble.n	800852e <_dtoa_r+0x826>
 8008522:	4621      	mov	r1, r4
 8008524:	461a      	mov	r2, r3
 8008526:	4628      	mov	r0, r5
 8008528:	f000 fcdc 	bl	8008ee4 <__lshift>
 800852c:	4604      	mov	r4, r0
 800852e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d072      	beq.n	800861a <_dtoa_r+0x912>
 8008534:	4621      	mov	r1, r4
 8008536:	4650      	mov	r0, sl
 8008538:	f000 fd40 	bl	8008fbc <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	da6c      	bge.n	800861a <_dtoa_r+0x912>
 8008540:	2300      	movs	r3, #0
 8008542:	4651      	mov	r1, sl
 8008544:	220a      	movs	r2, #10
 8008546:	4628      	mov	r0, r5
 8008548:	f000 fb20 	bl	8008b8c <__multadd>
 800854c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800854e:	4682      	mov	sl, r0
 8008550:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 81ac 	beq.w	80088b2 <_dtoa_r+0xbaa>
 800855a:	2300      	movs	r3, #0
 800855c:	4631      	mov	r1, r6
 800855e:	220a      	movs	r2, #10
 8008560:	4628      	mov	r0, r5
 8008562:	f000 fb13 	bl	8008b8c <__multadd>
 8008566:	9b06      	ldr	r3, [sp, #24]
 8008568:	4606      	mov	r6, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	f300 8093 	bgt.w	8008696 <_dtoa_r+0x98e>
 8008570:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008572:	2b02      	cmp	r3, #2
 8008574:	dc59      	bgt.n	800862a <_dtoa_r+0x922>
 8008576:	e08e      	b.n	8008696 <_dtoa_r+0x98e>
 8008578:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800857a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800857e:	e75d      	b.n	800843c <_dtoa_r+0x734>
 8008580:	9b08      	ldr	r3, [sp, #32]
 8008582:	1e5c      	subs	r4, r3, #1
 8008584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008586:	42a3      	cmp	r3, r4
 8008588:	bfbf      	itttt	lt
 800858a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800858c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800858e:	1ae3      	sublt	r3, r4, r3
 8008590:	18d2      	addlt	r2, r2, r3
 8008592:	bfa8      	it	ge
 8008594:	1b1c      	subge	r4, r3, r4
 8008596:	9b08      	ldr	r3, [sp, #32]
 8008598:	bfbe      	ittt	lt
 800859a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800859c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800859e:	2400      	movlt	r4, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bfb5      	itete	lt
 80085a4:	eba9 0703 	sublt.w	r7, r9, r3
 80085a8:	464f      	movge	r7, r9
 80085aa:	2300      	movlt	r3, #0
 80085ac:	9b08      	ldrge	r3, [sp, #32]
 80085ae:	e747      	b.n	8008440 <_dtoa_r+0x738>
 80085b0:	464f      	mov	r7, r9
 80085b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80085b6:	e74c      	b.n	8008452 <_dtoa_r+0x74a>
 80085b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ba:	e773      	b.n	80084a4 <_dtoa_r+0x79c>
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	40240000 	.word	0x40240000
 80085c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	dc18      	bgt.n	80085fc <_dtoa_r+0x8f4>
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	b9b3      	cbnz	r3, 80085fc <_dtoa_r+0x8f4>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d4:	b993      	cbnz	r3, 80085fc <_dtoa_r+0x8f4>
 80085d6:	9b05      	ldr	r3, [sp, #20]
 80085d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	051b      	lsls	r3, r3, #20
 80085e0:	b17b      	cbz	r3, 8008602 <_dtoa_r+0x8fa>
 80085e2:	f04f 0801 	mov.w	r8, #1
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	f109 0901 	add.w	r9, r9, #1
 80085ec:	3301      	adds	r3, #1
 80085ee:	9309      	str	r3, [sp, #36]	; 0x24
 80085f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f47f af6f 	bne.w	80084d6 <_dtoa_r+0x7ce>
 80085f8:	2001      	movs	r0, #1
 80085fa:	e774      	b.n	80084e6 <_dtoa_r+0x7de>
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	e7f6      	b.n	80085f0 <_dtoa_r+0x8e8>
 8008602:	4698      	mov	r8, r3
 8008604:	e7f4      	b.n	80085f0 <_dtoa_r+0x8e8>
 8008606:	d080      	beq.n	800850a <_dtoa_r+0x802>
 8008608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800860a:	331c      	adds	r3, #28
 800860c:	441a      	add	r2, r3
 800860e:	4499      	add	r9, r3
 8008610:	441f      	add	r7, r3
 8008612:	9209      	str	r2, [sp, #36]	; 0x24
 8008614:	e779      	b.n	800850a <_dtoa_r+0x802>
 8008616:	4603      	mov	r3, r0
 8008618:	e7f6      	b.n	8008608 <_dtoa_r+0x900>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc34      	bgt.n	800868a <_dtoa_r+0x982>
 8008620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008622:	2b02      	cmp	r3, #2
 8008624:	dd31      	ble.n	800868a <_dtoa_r+0x982>
 8008626:	9b08      	ldr	r3, [sp, #32]
 8008628:	9306      	str	r3, [sp, #24]
 800862a:	9b06      	ldr	r3, [sp, #24]
 800862c:	b963      	cbnz	r3, 8008648 <_dtoa_r+0x940>
 800862e:	4621      	mov	r1, r4
 8008630:	2205      	movs	r2, #5
 8008632:	4628      	mov	r0, r5
 8008634:	f000 faaa 	bl	8008b8c <__multadd>
 8008638:	4601      	mov	r1, r0
 800863a:	4604      	mov	r4, r0
 800863c:	4650      	mov	r0, sl
 800863e:	f000 fcbd 	bl	8008fbc <__mcmp>
 8008642:	2800      	cmp	r0, #0
 8008644:	f73f adbf 	bgt.w	80081c6 <_dtoa_r+0x4be>
 8008648:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800864a:	9f03      	ldr	r7, [sp, #12]
 800864c:	ea6f 0b03 	mvn.w	fp, r3
 8008650:	f04f 0800 	mov.w	r8, #0
 8008654:	4621      	mov	r1, r4
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fa76 	bl	8008b48 <_Bfree>
 800865c:	2e00      	cmp	r6, #0
 800865e:	f43f aead 	beq.w	80083bc <_dtoa_r+0x6b4>
 8008662:	f1b8 0f00 	cmp.w	r8, #0
 8008666:	d005      	beq.n	8008674 <_dtoa_r+0x96c>
 8008668:	45b0      	cmp	r8, r6
 800866a:	d003      	beq.n	8008674 <_dtoa_r+0x96c>
 800866c:	4641      	mov	r1, r8
 800866e:	4628      	mov	r0, r5
 8008670:	f000 fa6a 	bl	8008b48 <_Bfree>
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	f000 fa66 	bl	8008b48 <_Bfree>
 800867c:	e69e      	b.n	80083bc <_dtoa_r+0x6b4>
 800867e:	2400      	movs	r4, #0
 8008680:	4626      	mov	r6, r4
 8008682:	e7e1      	b.n	8008648 <_dtoa_r+0x940>
 8008684:	46c3      	mov	fp, r8
 8008686:	4626      	mov	r6, r4
 8008688:	e59d      	b.n	80081c6 <_dtoa_r+0x4be>
 800868a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80c8 	beq.w	8008822 <_dtoa_r+0xb1a>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	9306      	str	r3, [sp, #24]
 8008696:	2f00      	cmp	r7, #0
 8008698:	dd05      	ble.n	80086a6 <_dtoa_r+0x99e>
 800869a:	4631      	mov	r1, r6
 800869c:	463a      	mov	r2, r7
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 fc20 	bl	8008ee4 <__lshift>
 80086a4:	4606      	mov	r6, r0
 80086a6:	f1b8 0f00 	cmp.w	r8, #0
 80086aa:	d05b      	beq.n	8008764 <_dtoa_r+0xa5c>
 80086ac:	4628      	mov	r0, r5
 80086ae:	6871      	ldr	r1, [r6, #4]
 80086b0:	f000 fa0a 	bl	8008ac8 <_Balloc>
 80086b4:	4607      	mov	r7, r0
 80086b6:	b928      	cbnz	r0, 80086c4 <_dtoa_r+0x9bc>
 80086b8:	4602      	mov	r2, r0
 80086ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80086be:	4b81      	ldr	r3, [pc, #516]	; (80088c4 <_dtoa_r+0xbbc>)
 80086c0:	f7ff bb36 	b.w	8007d30 <_dtoa_r+0x28>
 80086c4:	6932      	ldr	r2, [r6, #16]
 80086c6:	f106 010c 	add.w	r1, r6, #12
 80086ca:	3202      	adds	r2, #2
 80086cc:	0092      	lsls	r2, r2, #2
 80086ce:	300c      	adds	r0, #12
 80086d0:	f000 ff9e 	bl	8009610 <memcpy>
 80086d4:	2201      	movs	r2, #1
 80086d6:	4639      	mov	r1, r7
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 fc03 	bl	8008ee4 <__lshift>
 80086de:	46b0      	mov	r8, r6
 80086e0:	4606      	mov	r6, r0
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	9a03      	ldr	r2, [sp, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	9308      	str	r3, [sp, #32]
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	4413      	add	r3, r2
 80086ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	930a      	str	r3, [sp, #40]	; 0x28
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	4621      	mov	r1, r4
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4650      	mov	r0, sl
 8008700:	9304      	str	r3, [sp, #16]
 8008702:	f7ff fa78 	bl	8007bf6 <quorem>
 8008706:	4641      	mov	r1, r8
 8008708:	9006      	str	r0, [sp, #24]
 800870a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800870e:	4650      	mov	r0, sl
 8008710:	f000 fc54 	bl	8008fbc <__mcmp>
 8008714:	4632      	mov	r2, r6
 8008716:	9009      	str	r0, [sp, #36]	; 0x24
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 fc6a 	bl	8008ff4 <__mdiff>
 8008720:	68c2      	ldr	r2, [r0, #12]
 8008722:	4607      	mov	r7, r0
 8008724:	bb02      	cbnz	r2, 8008768 <_dtoa_r+0xa60>
 8008726:	4601      	mov	r1, r0
 8008728:	4650      	mov	r0, sl
 800872a:	f000 fc47 	bl	8008fbc <__mcmp>
 800872e:	4602      	mov	r2, r0
 8008730:	4639      	mov	r1, r7
 8008732:	4628      	mov	r0, r5
 8008734:	920c      	str	r2, [sp, #48]	; 0x30
 8008736:	f000 fa07 	bl	8008b48 <_Bfree>
 800873a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800873c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800873e:	9f08      	ldr	r7, [sp, #32]
 8008740:	ea43 0102 	orr.w	r1, r3, r2
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	4319      	orrs	r1, r3
 8008748:	d110      	bne.n	800876c <_dtoa_r+0xa64>
 800874a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800874e:	d029      	beq.n	80087a4 <_dtoa_r+0xa9c>
 8008750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd02      	ble.n	800875c <_dtoa_r+0xa54>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	f883 9000 	strb.w	r9, [r3]
 8008762:	e777      	b.n	8008654 <_dtoa_r+0x94c>
 8008764:	4630      	mov	r0, r6
 8008766:	e7ba      	b.n	80086de <_dtoa_r+0x9d6>
 8008768:	2201      	movs	r2, #1
 800876a:	e7e1      	b.n	8008730 <_dtoa_r+0xa28>
 800876c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	db04      	blt.n	800877c <_dtoa_r+0xa74>
 8008772:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008774:	430b      	orrs	r3, r1
 8008776:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008778:	430b      	orrs	r3, r1
 800877a:	d120      	bne.n	80087be <_dtoa_r+0xab6>
 800877c:	2a00      	cmp	r2, #0
 800877e:	dded      	ble.n	800875c <_dtoa_r+0xa54>
 8008780:	4651      	mov	r1, sl
 8008782:	2201      	movs	r2, #1
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fbad 	bl	8008ee4 <__lshift>
 800878a:	4621      	mov	r1, r4
 800878c:	4682      	mov	sl, r0
 800878e:	f000 fc15 	bl	8008fbc <__mcmp>
 8008792:	2800      	cmp	r0, #0
 8008794:	dc03      	bgt.n	800879e <_dtoa_r+0xa96>
 8008796:	d1e1      	bne.n	800875c <_dtoa_r+0xa54>
 8008798:	f019 0f01 	tst.w	r9, #1
 800879c:	d0de      	beq.n	800875c <_dtoa_r+0xa54>
 800879e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087a2:	d1d8      	bne.n	8008756 <_dtoa_r+0xa4e>
 80087a4:	2339      	movs	r3, #57	; 0x39
 80087a6:	9a04      	ldr	r2, [sp, #16]
 80087a8:	7013      	strb	r3, [r2, #0]
 80087aa:	463b      	mov	r3, r7
 80087ac:	461f      	mov	r7, r3
 80087ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	2a39      	cmp	r2, #57	; 0x39
 80087b6:	d06b      	beq.n	8008890 <_dtoa_r+0xb88>
 80087b8:	3201      	adds	r2, #1
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	e74a      	b.n	8008654 <_dtoa_r+0x94c>
 80087be:	2a00      	cmp	r2, #0
 80087c0:	dd07      	ble.n	80087d2 <_dtoa_r+0xaca>
 80087c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087c6:	d0ed      	beq.n	80087a4 <_dtoa_r+0xa9c>
 80087c8:	9a04      	ldr	r2, [sp, #16]
 80087ca:	f109 0301 	add.w	r3, r9, #1
 80087ce:	7013      	strb	r3, [r2, #0]
 80087d0:	e740      	b.n	8008654 <_dtoa_r+0x94c>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087d6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80087da:	4293      	cmp	r3, r2
 80087dc:	d042      	beq.n	8008864 <_dtoa_r+0xb5c>
 80087de:	4651      	mov	r1, sl
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f9d1 	bl	8008b8c <__multadd>
 80087ea:	45b0      	cmp	r8, r6
 80087ec:	4682      	mov	sl, r0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	f04f 020a 	mov.w	r2, #10
 80087f6:	4641      	mov	r1, r8
 80087f8:	4628      	mov	r0, r5
 80087fa:	d107      	bne.n	800880c <_dtoa_r+0xb04>
 80087fc:	f000 f9c6 	bl	8008b8c <__multadd>
 8008800:	4680      	mov	r8, r0
 8008802:	4606      	mov	r6, r0
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	3301      	adds	r3, #1
 8008808:	9308      	str	r3, [sp, #32]
 800880a:	e775      	b.n	80086f8 <_dtoa_r+0x9f0>
 800880c:	f000 f9be 	bl	8008b8c <__multadd>
 8008810:	4631      	mov	r1, r6
 8008812:	4680      	mov	r8, r0
 8008814:	2300      	movs	r3, #0
 8008816:	220a      	movs	r2, #10
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f9b7 	bl	8008b8c <__multadd>
 800881e:	4606      	mov	r6, r0
 8008820:	e7f0      	b.n	8008804 <_dtoa_r+0xafc>
 8008822:	9b08      	ldr	r3, [sp, #32]
 8008824:	9306      	str	r3, [sp, #24]
 8008826:	9f03      	ldr	r7, [sp, #12]
 8008828:	4621      	mov	r1, r4
 800882a:	4650      	mov	r0, sl
 800882c:	f7ff f9e3 	bl	8007bf6 <quorem>
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008836:	f807 9b01 	strb.w	r9, [r7], #1
 800883a:	1afa      	subs	r2, r7, r3
 800883c:	9b06      	ldr	r3, [sp, #24]
 800883e:	4293      	cmp	r3, r2
 8008840:	dd07      	ble.n	8008852 <_dtoa_r+0xb4a>
 8008842:	4651      	mov	r1, sl
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4628      	mov	r0, r5
 800884a:	f000 f99f 	bl	8008b8c <__multadd>
 800884e:	4682      	mov	sl, r0
 8008850:	e7ea      	b.n	8008828 <_dtoa_r+0xb20>
 8008852:	9b06      	ldr	r3, [sp, #24]
 8008854:	f04f 0800 	mov.w	r8, #0
 8008858:	2b00      	cmp	r3, #0
 800885a:	bfcc      	ite	gt
 800885c:	461f      	movgt	r7, r3
 800885e:	2701      	movle	r7, #1
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	441f      	add	r7, r3
 8008864:	4651      	mov	r1, sl
 8008866:	2201      	movs	r2, #1
 8008868:	4628      	mov	r0, r5
 800886a:	f000 fb3b 	bl	8008ee4 <__lshift>
 800886e:	4621      	mov	r1, r4
 8008870:	4682      	mov	sl, r0
 8008872:	f000 fba3 	bl	8008fbc <__mcmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	dc97      	bgt.n	80087aa <_dtoa_r+0xaa2>
 800887a:	d102      	bne.n	8008882 <_dtoa_r+0xb7a>
 800887c:	f019 0f01 	tst.w	r9, #1
 8008880:	d193      	bne.n	80087aa <_dtoa_r+0xaa2>
 8008882:	463b      	mov	r3, r7
 8008884:	461f      	mov	r7, r3
 8008886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888a:	2a30      	cmp	r2, #48	; 0x30
 800888c:	d0fa      	beq.n	8008884 <_dtoa_r+0xb7c>
 800888e:	e6e1      	b.n	8008654 <_dtoa_r+0x94c>
 8008890:	9a03      	ldr	r2, [sp, #12]
 8008892:	429a      	cmp	r2, r3
 8008894:	d18a      	bne.n	80087ac <_dtoa_r+0xaa4>
 8008896:	2331      	movs	r3, #49	; 0x31
 8008898:	f10b 0b01 	add.w	fp, fp, #1
 800889c:	e797      	b.n	80087ce <_dtoa_r+0xac6>
 800889e:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <_dtoa_r+0xbc0>)
 80088a0:	f7ff ba9f 	b.w	8007de2 <_dtoa_r+0xda>
 80088a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f47f aa77 	bne.w	8007d9a <_dtoa_r+0x92>
 80088ac:	4b07      	ldr	r3, [pc, #28]	; (80088cc <_dtoa_r+0xbc4>)
 80088ae:	f7ff ba98 	b.w	8007de2 <_dtoa_r+0xda>
 80088b2:	9b06      	ldr	r3, [sp, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dcb6      	bgt.n	8008826 <_dtoa_r+0xb1e>
 80088b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	f73f aeb5 	bgt.w	800862a <_dtoa_r+0x922>
 80088c0:	e7b1      	b.n	8008826 <_dtoa_r+0xb1e>
 80088c2:	bf00      	nop
 80088c4:	0800ade9 	.word	0x0800ade9
 80088c8:	0800ad49 	.word	0x0800ad49
 80088cc:	0800ad6d 	.word	0x0800ad6d

080088d0 <_free_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d040      	beq.n	800895a <_free_r+0x8a>
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f0c      	subs	r4, r1, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	18e4      	addlt	r4, r4, r3
 80088e4:	f000 f8e4 	bl	8008ab0 <__malloc_lock>
 80088e8:	4a1c      	ldr	r2, [pc, #112]	; (800895c <_free_r+0x8c>)
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x2c>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f8:	f000 b8e0 	b.w	8008abc <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x42>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x1e>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x4c>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x42>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1850      	adds	r0, r2, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x6c>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1850      	adds	r0, r2, r1
 800892a:	4283      	cmp	r3, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x22>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	4408      	add	r0, r1
 8008936:	6010      	str	r0, [r2, #0]
 8008938:	6053      	str	r3, [r2, #4]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x22>
 800893c:	d902      	bls.n	8008944 <_free_r+0x74>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x22>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	bf01      	itttt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	1809      	addeq	r1, r1, r0
 8008952:	6021      	streq	r1, [r4, #0]
 8008954:	6063      	str	r3, [r4, #4]
 8008956:	6054      	str	r4, [r2, #4]
 8008958:	e7cb      	b.n	80088f2 <_free_r+0x22>
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000adc 	.word	0x20000adc

08008960 <malloc>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <malloc+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 b823 	b.w	80089b0 <_malloc_r>
 800896a:	bf00      	nop
 800896c:	2000006c 	.word	0x2000006c

08008970 <sbrk_aligned>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	4e0e      	ldr	r6, [pc, #56]	; (80089ac <sbrk_aligned+0x3c>)
 8008974:	460c      	mov	r4, r1
 8008976:	6831      	ldr	r1, [r6, #0]
 8008978:	4605      	mov	r5, r0
 800897a:	b911      	cbnz	r1, 8008982 <sbrk_aligned+0x12>
 800897c:	f000 fe38 	bl	80095f0 <_sbrk_r>
 8008980:	6030      	str	r0, [r6, #0]
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	f000 fe33 	bl	80095f0 <_sbrk_r>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d00a      	beq.n	80089a4 <sbrk_aligned+0x34>
 800898e:	1cc4      	adds	r4, r0, #3
 8008990:	f024 0403 	bic.w	r4, r4, #3
 8008994:	42a0      	cmp	r0, r4
 8008996:	d007      	beq.n	80089a8 <sbrk_aligned+0x38>
 8008998:	1a21      	subs	r1, r4, r0
 800899a:	4628      	mov	r0, r5
 800899c:	f000 fe28 	bl	80095f0 <_sbrk_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d101      	bne.n	80089a8 <sbrk_aligned+0x38>
 80089a4:	f04f 34ff 	mov.w	r4, #4294967295
 80089a8:	4620      	mov	r0, r4
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	20000ae0 	.word	0x20000ae0

080089b0 <_malloc_r>:
 80089b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b4:	1ccd      	adds	r5, r1, #3
 80089b6:	f025 0503 	bic.w	r5, r5, #3
 80089ba:	3508      	adds	r5, #8
 80089bc:	2d0c      	cmp	r5, #12
 80089be:	bf38      	it	cc
 80089c0:	250c      	movcc	r5, #12
 80089c2:	2d00      	cmp	r5, #0
 80089c4:	4607      	mov	r7, r0
 80089c6:	db01      	blt.n	80089cc <_malloc_r+0x1c>
 80089c8:	42a9      	cmp	r1, r5
 80089ca:	d905      	bls.n	80089d8 <_malloc_r+0x28>
 80089cc:	230c      	movs	r3, #12
 80089ce:	2600      	movs	r6, #0
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	4630      	mov	r0, r6
 80089d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008aac <_malloc_r+0xfc>
 80089dc:	f000 f868 	bl	8008ab0 <__malloc_lock>
 80089e0:	f8d8 3000 	ldr.w	r3, [r8]
 80089e4:	461c      	mov	r4, r3
 80089e6:	bb5c      	cbnz	r4, 8008a40 <_malloc_r+0x90>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4638      	mov	r0, r7
 80089ec:	f7ff ffc0 	bl	8008970 <sbrk_aligned>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	4604      	mov	r4, r0
 80089f4:	d155      	bne.n	8008aa2 <_malloc_r+0xf2>
 80089f6:	f8d8 4000 	ldr.w	r4, [r8]
 80089fa:	4626      	mov	r6, r4
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	d145      	bne.n	8008a8c <_malloc_r+0xdc>
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	d048      	beq.n	8008a96 <_malloc_r+0xe6>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	4631      	mov	r1, r6
 8008a08:	4638      	mov	r0, r7
 8008a0a:	eb04 0903 	add.w	r9, r4, r3
 8008a0e:	f000 fdef 	bl	80095f0 <_sbrk_r>
 8008a12:	4581      	cmp	r9, r0
 8008a14:	d13f      	bne.n	8008a96 <_malloc_r+0xe6>
 8008a16:	6821      	ldr	r1, [r4, #0]
 8008a18:	4638      	mov	r0, r7
 8008a1a:	1a6d      	subs	r5, r5, r1
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7ff ffa7 	bl	8008970 <sbrk_aligned>
 8008a22:	3001      	adds	r0, #1
 8008a24:	d037      	beq.n	8008a96 <_malloc_r+0xe6>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	442b      	add	r3, r5
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d038      	beq.n	8008aa6 <_malloc_r+0xf6>
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	42a2      	cmp	r2, r4
 8008a38:	d12b      	bne.n	8008a92 <_malloc_r+0xe2>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	e00f      	b.n	8008a60 <_malloc_r+0xb0>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	1b52      	subs	r2, r2, r5
 8008a44:	d41f      	bmi.n	8008a86 <_malloc_r+0xd6>
 8008a46:	2a0b      	cmp	r2, #11
 8008a48:	d917      	bls.n	8008a7a <_malloc_r+0xca>
 8008a4a:	1961      	adds	r1, r4, r5
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	6025      	str	r5, [r4, #0]
 8008a50:	bf18      	it	ne
 8008a52:	6059      	strne	r1, [r3, #4]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	bf08      	it	eq
 8008a58:	f8c8 1000 	streq.w	r1, [r8]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4638      	mov	r0, r7
 8008a62:	f104 060b 	add.w	r6, r4, #11
 8008a66:	f000 f829 	bl	8008abc <__malloc_unlock>
 8008a6a:	f026 0607 	bic.w	r6, r6, #7
 8008a6e:	1d23      	adds	r3, r4, #4
 8008a70:	1af2      	subs	r2, r6, r3
 8008a72:	d0ae      	beq.n	80089d2 <_malloc_r+0x22>
 8008a74:	1b9b      	subs	r3, r3, r6
 8008a76:	50a3      	str	r3, [r4, r2]
 8008a78:	e7ab      	b.n	80089d2 <_malloc_r+0x22>
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	6862      	ldr	r2, [r4, #4]
 8008a7e:	d1dd      	bne.n	8008a3c <_malloc_r+0x8c>
 8008a80:	f8c8 2000 	str.w	r2, [r8]
 8008a84:	e7ec      	b.n	8008a60 <_malloc_r+0xb0>
 8008a86:	4623      	mov	r3, r4
 8008a88:	6864      	ldr	r4, [r4, #4]
 8008a8a:	e7ac      	b.n	80089e6 <_malloc_r+0x36>
 8008a8c:	4634      	mov	r4, r6
 8008a8e:	6876      	ldr	r6, [r6, #4]
 8008a90:	e7b4      	b.n	80089fc <_malloc_r+0x4c>
 8008a92:	4613      	mov	r3, r2
 8008a94:	e7cc      	b.n	8008a30 <_malloc_r+0x80>
 8008a96:	230c      	movs	r3, #12
 8008a98:	4638      	mov	r0, r7
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	f000 f80e 	bl	8008abc <__malloc_unlock>
 8008aa0:	e797      	b.n	80089d2 <_malloc_r+0x22>
 8008aa2:	6025      	str	r5, [r4, #0]
 8008aa4:	e7dc      	b.n	8008a60 <_malloc_r+0xb0>
 8008aa6:	605b      	str	r3, [r3, #4]
 8008aa8:	deff      	udf	#255	; 0xff
 8008aaa:	bf00      	nop
 8008aac:	20000adc 	.word	0x20000adc

08008ab0 <__malloc_lock>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__malloc_lock+0x8>)
 8008ab2:	f7ff b890 	b.w	8007bd6 <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000ad8 	.word	0x20000ad8

08008abc <__malloc_unlock>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__malloc_unlock+0x8>)
 8008abe:	f7ff b88b 	b.w	8007bd8 <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	20000ad8 	.word	0x20000ad8

08008ac8 <_Balloc>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	69c6      	ldr	r6, [r0, #28]
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	b976      	cbnz	r6, 8008af0 <_Balloc+0x28>
 8008ad2:	2010      	movs	r0, #16
 8008ad4:	f7ff ff44 	bl	8008960 <malloc>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	61e0      	str	r0, [r4, #28]
 8008adc:	b920      	cbnz	r0, 8008ae8 <_Balloc+0x20>
 8008ade:	216b      	movs	r1, #107	; 0x6b
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <_Balloc+0x78>)
 8008ae2:	4818      	ldr	r0, [pc, #96]	; (8008b44 <_Balloc+0x7c>)
 8008ae4:	f000 fda2 	bl	800962c <__assert_func>
 8008ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aec:	6006      	str	r6, [r0, #0]
 8008aee:	60c6      	str	r6, [r0, #12]
 8008af0:	69e6      	ldr	r6, [r4, #28]
 8008af2:	68f3      	ldr	r3, [r6, #12]
 8008af4:	b183      	cbz	r3, 8008b18 <_Balloc+0x50>
 8008af6:	69e3      	ldr	r3, [r4, #28]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008afe:	b9b8      	cbnz	r0, 8008b30 <_Balloc+0x68>
 8008b00:	2101      	movs	r1, #1
 8008b02:	fa01 f605 	lsl.w	r6, r1, r5
 8008b06:	1d72      	adds	r2, r6, #5
 8008b08:	4620      	mov	r0, r4
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	f000 fdac 	bl	8009668 <_calloc_r>
 8008b10:	b160      	cbz	r0, 8008b2c <_Balloc+0x64>
 8008b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b16:	e00e      	b.n	8008b36 <_Balloc+0x6e>
 8008b18:	2221      	movs	r2, #33	; 0x21
 8008b1a:	2104      	movs	r1, #4
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fda3 	bl	8009668 <_calloc_r>
 8008b22:	69e3      	ldr	r3, [r4, #28]
 8008b24:	60f0      	str	r0, [r6, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e4      	bne.n	8008af6 <_Balloc+0x2e>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	6802      	ldr	r2, [r0, #0]
 8008b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b36:	2300      	movs	r3, #0
 8008b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b3c:	e7f7      	b.n	8008b2e <_Balloc+0x66>
 8008b3e:	bf00      	nop
 8008b40:	0800ad7a 	.word	0x0800ad7a
 8008b44:	0800adfa 	.word	0x0800adfa

08008b48 <_Bfree>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	69c6      	ldr	r6, [r0, #28]
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	b976      	cbnz	r6, 8008b70 <_Bfree+0x28>
 8008b52:	2010      	movs	r0, #16
 8008b54:	f7ff ff04 	bl	8008960 <malloc>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	61e8      	str	r0, [r5, #28]
 8008b5c:	b920      	cbnz	r0, 8008b68 <_Bfree+0x20>
 8008b5e:	218f      	movs	r1, #143	; 0x8f
 8008b60:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <_Bfree+0x3c>)
 8008b62:	4809      	ldr	r0, [pc, #36]	; (8008b88 <_Bfree+0x40>)
 8008b64:	f000 fd62 	bl	800962c <__assert_func>
 8008b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b6c:	6006      	str	r6, [r0, #0]
 8008b6e:	60c6      	str	r6, [r0, #12]
 8008b70:	b13c      	cbz	r4, 8008b82 <_Bfree+0x3a>
 8008b72:	69eb      	ldr	r3, [r5, #28]
 8008b74:	6862      	ldr	r2, [r4, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b7c:	6021      	str	r1, [r4, #0]
 8008b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	0800ad7a 	.word	0x0800ad7a
 8008b88:	0800adfa 	.word	0x0800adfa

08008b8c <__multadd>:
 8008b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b90:	4607      	mov	r7, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	461e      	mov	r6, r3
 8008b96:	2000      	movs	r0, #0
 8008b98:	690d      	ldr	r5, [r1, #16]
 8008b9a:	f101 0c14 	add.w	ip, r1, #20
 8008b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	b299      	uxth	r1, r3
 8008ba6:	fb02 6101 	mla	r1, r2, r1, r6
 8008baa:	0c1e      	lsrs	r6, r3, #16
 8008bac:	0c0b      	lsrs	r3, r1, #16
 8008bae:	fb02 3306 	mla	r3, r2, r6, r3
 8008bb2:	b289      	uxth	r1, r1
 8008bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bb8:	4285      	cmp	r5, r0
 8008bba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008bc2:	dcec      	bgt.n	8008b9e <__multadd+0x12>
 8008bc4:	b30e      	cbz	r6, 8008c0a <__multadd+0x7e>
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	42ab      	cmp	r3, r5
 8008bca:	dc19      	bgt.n	8008c00 <__multadd+0x74>
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	4638      	mov	r0, r7
 8008bd0:	3101      	adds	r1, #1
 8008bd2:	f7ff ff79 	bl	8008ac8 <_Balloc>
 8008bd6:	4680      	mov	r8, r0
 8008bd8:	b928      	cbnz	r0, 8008be6 <__multadd+0x5a>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	21ba      	movs	r1, #186	; 0xba
 8008bde:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <__multadd+0x84>)
 8008be0:	480c      	ldr	r0, [pc, #48]	; (8008c14 <__multadd+0x88>)
 8008be2:	f000 fd23 	bl	800962c <__assert_func>
 8008be6:	6922      	ldr	r2, [r4, #16]
 8008be8:	f104 010c 	add.w	r1, r4, #12
 8008bec:	3202      	adds	r2, #2
 8008bee:	0092      	lsls	r2, r2, #2
 8008bf0:	300c      	adds	r0, #12
 8008bf2:	f000 fd0d 	bl	8009610 <memcpy>
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f7ff ffa5 	bl	8008b48 <_Bfree>
 8008bfe:	4644      	mov	r4, r8
 8008c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c04:	3501      	adds	r5, #1
 8008c06:	615e      	str	r6, [r3, #20]
 8008c08:	6125      	str	r5, [r4, #16]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	0800ade9 	.word	0x0800ade9
 8008c14:	0800adfa 	.word	0x0800adfa

08008c18 <__hi0bits>:
 8008c18:	0c02      	lsrs	r2, r0, #16
 8008c1a:	0412      	lsls	r2, r2, #16
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	b9ca      	cbnz	r2, 8008c54 <__hi0bits+0x3c>
 8008c20:	0403      	lsls	r3, r0, #16
 8008c22:	2010      	movs	r0, #16
 8008c24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c28:	bf04      	itt	eq
 8008c2a:	021b      	lsleq	r3, r3, #8
 8008c2c:	3008      	addeq	r0, #8
 8008c2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c32:	bf04      	itt	eq
 8008c34:	011b      	lsleq	r3, r3, #4
 8008c36:	3004      	addeq	r0, #4
 8008c38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c3c:	bf04      	itt	eq
 8008c3e:	009b      	lsleq	r3, r3, #2
 8008c40:	3002      	addeq	r0, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db05      	blt.n	8008c52 <__hi0bits+0x3a>
 8008c46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c4a:	f100 0001 	add.w	r0, r0, #1
 8008c4e:	bf08      	it	eq
 8008c50:	2020      	moveq	r0, #32
 8008c52:	4770      	bx	lr
 8008c54:	2000      	movs	r0, #0
 8008c56:	e7e5      	b.n	8008c24 <__hi0bits+0xc>

08008c58 <__lo0bits>:
 8008c58:	6803      	ldr	r3, [r0, #0]
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	f013 0007 	ands.w	r0, r3, #7
 8008c60:	d00b      	beq.n	8008c7a <__lo0bits+0x22>
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	d421      	bmi.n	8008caa <__lo0bits+0x52>
 8008c66:	0798      	lsls	r0, r3, #30
 8008c68:	bf49      	itett	mi
 8008c6a:	085b      	lsrmi	r3, r3, #1
 8008c6c:	089b      	lsrpl	r3, r3, #2
 8008c6e:	2001      	movmi	r0, #1
 8008c70:	6013      	strmi	r3, [r2, #0]
 8008c72:	bf5c      	itt	pl
 8008c74:	2002      	movpl	r0, #2
 8008c76:	6013      	strpl	r3, [r2, #0]
 8008c78:	4770      	bx	lr
 8008c7a:	b299      	uxth	r1, r3
 8008c7c:	b909      	cbnz	r1, 8008c82 <__lo0bits+0x2a>
 8008c7e:	2010      	movs	r0, #16
 8008c80:	0c1b      	lsrs	r3, r3, #16
 8008c82:	b2d9      	uxtb	r1, r3
 8008c84:	b909      	cbnz	r1, 8008c8a <__lo0bits+0x32>
 8008c86:	3008      	adds	r0, #8
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	0719      	lsls	r1, r3, #28
 8008c8c:	bf04      	itt	eq
 8008c8e:	091b      	lsreq	r3, r3, #4
 8008c90:	3004      	addeq	r0, #4
 8008c92:	0799      	lsls	r1, r3, #30
 8008c94:	bf04      	itt	eq
 8008c96:	089b      	lsreq	r3, r3, #2
 8008c98:	3002      	addeq	r0, #2
 8008c9a:	07d9      	lsls	r1, r3, #31
 8008c9c:	d403      	bmi.n	8008ca6 <__lo0bits+0x4e>
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	f100 0001 	add.w	r0, r0, #1
 8008ca4:	d003      	beq.n	8008cae <__lo0bits+0x56>
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	2000      	movs	r0, #0
 8008cac:	4770      	bx	lr
 8008cae:	2020      	movs	r0, #32
 8008cb0:	4770      	bx	lr
	...

08008cb4 <__i2b>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	2101      	movs	r1, #1
 8008cba:	f7ff ff05 	bl	8008ac8 <_Balloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__i2b+0x1a>
 8008cc2:	f240 1145 	movw	r1, #325	; 0x145
 8008cc6:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <__i2b+0x24>)
 8008cc8:	4804      	ldr	r0, [pc, #16]	; (8008cdc <__i2b+0x28>)
 8008cca:	f000 fcaf 	bl	800962c <__assert_func>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	6144      	str	r4, [r0, #20]
 8008cd2:	6103      	str	r3, [r0, #16]
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800ade9 	.word	0x0800ade9
 8008cdc:	0800adfa 	.word	0x0800adfa

08008ce0 <__multiply>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	4691      	mov	r9, r2
 8008ce6:	690a      	ldr	r2, [r1, #16]
 8008ce8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cec:	460c      	mov	r4, r1
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	bfbe      	ittt	lt
 8008cf2:	460b      	movlt	r3, r1
 8008cf4:	464c      	movlt	r4, r9
 8008cf6:	4699      	movlt	r9, r3
 8008cf8:	6927      	ldr	r7, [r4, #16]
 8008cfa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	6861      	ldr	r1, [r4, #4]
 8008d02:	eb07 060a 	add.w	r6, r7, sl
 8008d06:	42b3      	cmp	r3, r6
 8008d08:	b085      	sub	sp, #20
 8008d0a:	bfb8      	it	lt
 8008d0c:	3101      	addlt	r1, #1
 8008d0e:	f7ff fedb 	bl	8008ac8 <_Balloc>
 8008d12:	b930      	cbnz	r0, 8008d22 <__multiply+0x42>
 8008d14:	4602      	mov	r2, r0
 8008d16:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d1a:	4b43      	ldr	r3, [pc, #268]	; (8008e28 <__multiply+0x148>)
 8008d1c:	4843      	ldr	r0, [pc, #268]	; (8008e2c <__multiply+0x14c>)
 8008d1e:	f000 fc85 	bl	800962c <__assert_func>
 8008d22:	f100 0514 	add.w	r5, r0, #20
 8008d26:	462b      	mov	r3, r5
 8008d28:	2200      	movs	r2, #0
 8008d2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d2e:	4543      	cmp	r3, r8
 8008d30:	d321      	bcc.n	8008d76 <__multiply+0x96>
 8008d32:	f104 0314 	add.w	r3, r4, #20
 8008d36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d3a:	f109 0314 	add.w	r3, r9, #20
 8008d3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d42:	9202      	str	r2, [sp, #8]
 8008d44:	1b3a      	subs	r2, r7, r4
 8008d46:	3a15      	subs	r2, #21
 8008d48:	f022 0203 	bic.w	r2, r2, #3
 8008d4c:	3204      	adds	r2, #4
 8008d4e:	f104 0115 	add.w	r1, r4, #21
 8008d52:	428f      	cmp	r7, r1
 8008d54:	bf38      	it	cc
 8008d56:	2204      	movcc	r2, #4
 8008d58:	9201      	str	r2, [sp, #4]
 8008d5a:	9a02      	ldr	r2, [sp, #8]
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d80c      	bhi.n	8008d7c <__multiply+0x9c>
 8008d62:	2e00      	cmp	r6, #0
 8008d64:	dd03      	ble.n	8008d6e <__multiply+0x8e>
 8008d66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d05a      	beq.n	8008e24 <__multiply+0x144>
 8008d6e:	6106      	str	r6, [r0, #16]
 8008d70:	b005      	add	sp, #20
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	f843 2b04 	str.w	r2, [r3], #4
 8008d7a:	e7d8      	b.n	8008d2e <__multiply+0x4e>
 8008d7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d80:	f1ba 0f00 	cmp.w	sl, #0
 8008d84:	d023      	beq.n	8008dce <__multiply+0xee>
 8008d86:	46a9      	mov	r9, r5
 8008d88:	f04f 0c00 	mov.w	ip, #0
 8008d8c:	f104 0e14 	add.w	lr, r4, #20
 8008d90:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d94:	f8d9 1000 	ldr.w	r1, [r9]
 8008d98:	fa1f fb82 	uxth.w	fp, r2
 8008d9c:	b289      	uxth	r1, r1
 8008d9e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008da2:	4461      	add	r1, ip
 8008da4:	f8d9 c000 	ldr.w	ip, [r9]
 8008da8:	0c12      	lsrs	r2, r2, #16
 8008daa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dae:	fb0a c202 	mla	r2, sl, r2, ip
 8008db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008db6:	b289      	uxth	r1, r1
 8008db8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dbc:	4577      	cmp	r7, lr
 8008dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dc2:	f849 1b04 	str.w	r1, [r9], #4
 8008dc6:	d8e3      	bhi.n	8008d90 <__multiply+0xb0>
 8008dc8:	9a01      	ldr	r2, [sp, #4]
 8008dca:	f845 c002 	str.w	ip, [r5, r2]
 8008dce:	9a03      	ldr	r2, [sp, #12]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	d021      	beq.n	8008e20 <__multiply+0x140>
 8008ddc:	46ae      	mov	lr, r5
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	6829      	ldr	r1, [r5, #0]
 8008de4:	f104 0c14 	add.w	ip, r4, #20
 8008de8:	f8bc b000 	ldrh.w	fp, [ip]
 8008dec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008df0:	b289      	uxth	r1, r1
 8008df2:	fb09 220b 	mla	r2, r9, fp, r2
 8008df6:	4452      	add	r2, sl
 8008df8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dfc:	f84e 1b04 	str.w	r1, [lr], #4
 8008e00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e08:	f8be 1000 	ldrh.w	r1, [lr]
 8008e0c:	4567      	cmp	r7, ip
 8008e0e:	fb09 110a 	mla	r1, r9, sl, r1
 8008e12:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e1a:	d8e5      	bhi.n	8008de8 <__multiply+0x108>
 8008e1c:	9a01      	ldr	r2, [sp, #4]
 8008e1e:	50a9      	str	r1, [r5, r2]
 8008e20:	3504      	adds	r5, #4
 8008e22:	e79a      	b.n	8008d5a <__multiply+0x7a>
 8008e24:	3e01      	subs	r6, #1
 8008e26:	e79c      	b.n	8008d62 <__multiply+0x82>
 8008e28:	0800ade9 	.word	0x0800ade9
 8008e2c:	0800adfa 	.word	0x0800adfa

08008e30 <__pow5mult>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	4615      	mov	r5, r2
 8008e36:	f012 0203 	ands.w	r2, r2, #3
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	d007      	beq.n	8008e50 <__pow5mult+0x20>
 8008e40:	4c25      	ldr	r4, [pc, #148]	; (8008ed8 <__pow5mult+0xa8>)
 8008e42:	3a01      	subs	r2, #1
 8008e44:	2300      	movs	r3, #0
 8008e46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e4a:	f7ff fe9f 	bl	8008b8c <__multadd>
 8008e4e:	4607      	mov	r7, r0
 8008e50:	10ad      	asrs	r5, r5, #2
 8008e52:	d03d      	beq.n	8008ed0 <__pow5mult+0xa0>
 8008e54:	69f4      	ldr	r4, [r6, #28]
 8008e56:	b97c      	cbnz	r4, 8008e78 <__pow5mult+0x48>
 8008e58:	2010      	movs	r0, #16
 8008e5a:	f7ff fd81 	bl	8008960 <malloc>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	61f0      	str	r0, [r6, #28]
 8008e62:	b928      	cbnz	r0, 8008e70 <__pow5mult+0x40>
 8008e64:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e68:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <__pow5mult+0xac>)
 8008e6a:	481d      	ldr	r0, [pc, #116]	; (8008ee0 <__pow5mult+0xb0>)
 8008e6c:	f000 fbde 	bl	800962c <__assert_func>
 8008e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e74:	6004      	str	r4, [r0, #0]
 8008e76:	60c4      	str	r4, [r0, #12]
 8008e78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e80:	b94c      	cbnz	r4, 8008e96 <__pow5mult+0x66>
 8008e82:	f240 2171 	movw	r1, #625	; 0x271
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ff14 	bl	8008cb4 <__i2b>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 0900 	mov.w	r9, #0
 8008e9a:	07eb      	lsls	r3, r5, #31
 8008e9c:	d50a      	bpl.n	8008eb4 <__pow5mult+0x84>
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f7ff ff1c 	bl	8008ce0 <__multiply>
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fe4b 	bl	8008b48 <_Bfree>
 8008eb2:	4647      	mov	r7, r8
 8008eb4:	106d      	asrs	r5, r5, #1
 8008eb6:	d00b      	beq.n	8008ed0 <__pow5mult+0xa0>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	b938      	cbnz	r0, 8008ecc <__pow5mult+0x9c>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7ff ff0d 	bl	8008ce0 <__multiply>
 8008ec6:	6020      	str	r0, [r4, #0]
 8008ec8:	f8c0 9000 	str.w	r9, [r0]
 8008ecc:	4604      	mov	r4, r0
 8008ece:	e7e4      	b.n	8008e9a <__pow5mult+0x6a>
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0800af48 	.word	0x0800af48
 8008edc:	0800ad7a 	.word	0x0800ad7a
 8008ee0:	0800adfa 	.word	0x0800adfa

08008ee4 <__lshift>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	460c      	mov	r4, r1
 8008eea:	4607      	mov	r7, r0
 8008eec:	4691      	mov	r9, r2
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	6849      	ldr	r1, [r1, #4]
 8008ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008efc:	f108 0601 	add.w	r6, r8, #1
 8008f00:	42b3      	cmp	r3, r6
 8008f02:	db0b      	blt.n	8008f1c <__lshift+0x38>
 8008f04:	4638      	mov	r0, r7
 8008f06:	f7ff fddf 	bl	8008ac8 <_Balloc>
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	b948      	cbnz	r0, 8008f22 <__lshift+0x3e>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f14:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <__lshift+0xd0>)
 8008f16:	4828      	ldr	r0, [pc, #160]	; (8008fb8 <__lshift+0xd4>)
 8008f18:	f000 fb88 	bl	800962c <__assert_func>
 8008f1c:	3101      	adds	r1, #1
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	e7ee      	b.n	8008f00 <__lshift+0x1c>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f100 0114 	add.w	r1, r0, #20
 8008f28:	f100 0210 	add.w	r2, r0, #16
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4553      	cmp	r3, sl
 8008f30:	db33      	blt.n	8008f9a <__lshift+0xb6>
 8008f32:	6920      	ldr	r0, [r4, #16]
 8008f34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f38:	f104 0314 	add.w	r3, r4, #20
 8008f3c:	f019 091f 	ands.w	r9, r9, #31
 8008f40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f48:	d02b      	beq.n	8008fa2 <__lshift+0xbe>
 8008f4a:	468a      	mov	sl, r1
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	fa00 f009 	lsl.w	r0, r0, r9
 8008f58:	4310      	orrs	r0, r2
 8008f5a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f62:	459c      	cmp	ip, r3
 8008f64:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f68:	d8f3      	bhi.n	8008f52 <__lshift+0x6e>
 8008f6a:	ebac 0304 	sub.w	r3, ip, r4
 8008f6e:	3b15      	subs	r3, #21
 8008f70:	f023 0303 	bic.w	r3, r3, #3
 8008f74:	3304      	adds	r3, #4
 8008f76:	f104 0015 	add.w	r0, r4, #21
 8008f7a:	4584      	cmp	ip, r0
 8008f7c:	bf38      	it	cc
 8008f7e:	2304      	movcc	r3, #4
 8008f80:	50ca      	str	r2, [r1, r3]
 8008f82:	b10a      	cbz	r2, 8008f88 <__lshift+0xa4>
 8008f84:	f108 0602 	add.w	r6, r8, #2
 8008f88:	3e01      	subs	r6, #1
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	612e      	str	r6, [r5, #16]
 8008f90:	f7ff fdda 	bl	8008b48 <_Bfree>
 8008f94:	4628      	mov	r0, r5
 8008f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	e7c5      	b.n	8008f2e <__lshift+0x4a>
 8008fa2:	3904      	subs	r1, #4
 8008fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa8:	459c      	cmp	ip, r3
 8008faa:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fae:	d8f9      	bhi.n	8008fa4 <__lshift+0xc0>
 8008fb0:	e7ea      	b.n	8008f88 <__lshift+0xa4>
 8008fb2:	bf00      	nop
 8008fb4:	0800ade9 	.word	0x0800ade9
 8008fb8:	0800adfa 	.word	0x0800adfa

08008fbc <__mcmp>:
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	690a      	ldr	r2, [r1, #16]
 8008fc0:	6900      	ldr	r0, [r0, #16]
 8008fc2:	b530      	push	{r4, r5, lr}
 8008fc4:	1a80      	subs	r0, r0, r2
 8008fc6:	d10d      	bne.n	8008fe4 <__mcmp+0x28>
 8008fc8:	3314      	adds	r3, #20
 8008fca:	3114      	adds	r1, #20
 8008fcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fdc:	4295      	cmp	r5, r2
 8008fde:	d002      	beq.n	8008fe6 <__mcmp+0x2a>
 8008fe0:	d304      	bcc.n	8008fec <__mcmp+0x30>
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	bd30      	pop	{r4, r5, pc}
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	d3f4      	bcc.n	8008fd4 <__mcmp+0x18>
 8008fea:	e7fb      	b.n	8008fe4 <__mcmp+0x28>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e7f8      	b.n	8008fe4 <__mcmp+0x28>
	...

08008ff4 <__mdiff>:
 8008ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4628      	mov	r0, r5
 8009000:	4614      	mov	r4, r2
 8009002:	f7ff ffdb 	bl	8008fbc <__mcmp>
 8009006:	1e06      	subs	r6, r0, #0
 8009008:	d111      	bne.n	800902e <__mdiff+0x3a>
 800900a:	4631      	mov	r1, r6
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff fd5b 	bl	8008ac8 <_Balloc>
 8009012:	4602      	mov	r2, r0
 8009014:	b928      	cbnz	r0, 8009022 <__mdiff+0x2e>
 8009016:	f240 2137 	movw	r1, #567	; 0x237
 800901a:	4b3a      	ldr	r3, [pc, #232]	; (8009104 <__mdiff+0x110>)
 800901c:	483a      	ldr	r0, [pc, #232]	; (8009108 <__mdiff+0x114>)
 800901e:	f000 fb05 	bl	800962c <__assert_func>
 8009022:	2301      	movs	r3, #1
 8009024:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009028:	4610      	mov	r0, r2
 800902a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	bfa4      	itt	ge
 8009030:	4623      	movge	r3, r4
 8009032:	462c      	movge	r4, r5
 8009034:	4638      	mov	r0, r7
 8009036:	6861      	ldr	r1, [r4, #4]
 8009038:	bfa6      	itte	ge
 800903a:	461d      	movge	r5, r3
 800903c:	2600      	movge	r6, #0
 800903e:	2601      	movlt	r6, #1
 8009040:	f7ff fd42 	bl	8008ac8 <_Balloc>
 8009044:	4602      	mov	r2, r0
 8009046:	b918      	cbnz	r0, 8009050 <__mdiff+0x5c>
 8009048:	f240 2145 	movw	r1, #581	; 0x245
 800904c:	4b2d      	ldr	r3, [pc, #180]	; (8009104 <__mdiff+0x110>)
 800904e:	e7e5      	b.n	800901c <__mdiff+0x28>
 8009050:	f102 0814 	add.w	r8, r2, #20
 8009054:	46c2      	mov	sl, r8
 8009056:	f04f 0c00 	mov.w	ip, #0
 800905a:	6927      	ldr	r7, [r4, #16]
 800905c:	60c6      	str	r6, [r0, #12]
 800905e:	692e      	ldr	r6, [r5, #16]
 8009060:	f104 0014 	add.w	r0, r4, #20
 8009064:	f105 0914 	add.w	r9, r5, #20
 8009068:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800906c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009070:	3410      	adds	r4, #16
 8009072:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009076:	f859 3b04 	ldr.w	r3, [r9], #4
 800907a:	fa1f f18b 	uxth.w	r1, fp
 800907e:	4461      	add	r1, ip
 8009080:	fa1f fc83 	uxth.w	ip, r3
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	eba1 010c 	sub.w	r1, r1, ip
 800908a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800908e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009092:	b289      	uxth	r1, r1
 8009094:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009098:	454e      	cmp	r6, r9
 800909a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800909e:	f84a 1b04 	str.w	r1, [sl], #4
 80090a2:	d8e6      	bhi.n	8009072 <__mdiff+0x7e>
 80090a4:	1b73      	subs	r3, r6, r5
 80090a6:	3b15      	subs	r3, #21
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	3515      	adds	r5, #21
 80090ae:	3304      	adds	r3, #4
 80090b0:	42ae      	cmp	r6, r5
 80090b2:	bf38      	it	cc
 80090b4:	2304      	movcc	r3, #4
 80090b6:	4418      	add	r0, r3
 80090b8:	4443      	add	r3, r8
 80090ba:	461e      	mov	r6, r3
 80090bc:	4605      	mov	r5, r0
 80090be:	4575      	cmp	r5, lr
 80090c0:	d30e      	bcc.n	80090e0 <__mdiff+0xec>
 80090c2:	f10e 0103 	add.w	r1, lr, #3
 80090c6:	1a09      	subs	r1, r1, r0
 80090c8:	f021 0103 	bic.w	r1, r1, #3
 80090cc:	3803      	subs	r0, #3
 80090ce:	4586      	cmp	lr, r0
 80090d0:	bf38      	it	cc
 80090d2:	2100      	movcc	r1, #0
 80090d4:	440b      	add	r3, r1
 80090d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090da:	b189      	cbz	r1, 8009100 <__mdiff+0x10c>
 80090dc:	6117      	str	r7, [r2, #16]
 80090de:	e7a3      	b.n	8009028 <__mdiff+0x34>
 80090e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80090e4:	fa1f f188 	uxth.w	r1, r8
 80090e8:	4461      	add	r1, ip
 80090ea:	140c      	asrs	r4, r1, #16
 80090ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090f0:	b289      	uxth	r1, r1
 80090f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090f6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80090fa:	f846 1b04 	str.w	r1, [r6], #4
 80090fe:	e7de      	b.n	80090be <__mdiff+0xca>
 8009100:	3f01      	subs	r7, #1
 8009102:	e7e8      	b.n	80090d6 <__mdiff+0xe2>
 8009104:	0800ade9 	.word	0x0800ade9
 8009108:	0800adfa 	.word	0x0800adfa

0800910c <__d2b>:
 800910c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910e:	2101      	movs	r1, #1
 8009110:	4617      	mov	r7, r2
 8009112:	461c      	mov	r4, r3
 8009114:	9e08      	ldr	r6, [sp, #32]
 8009116:	f7ff fcd7 	bl	8008ac8 <_Balloc>
 800911a:	4605      	mov	r5, r0
 800911c:	b930      	cbnz	r0, 800912c <__d2b+0x20>
 800911e:	4602      	mov	r2, r0
 8009120:	f240 310f 	movw	r1, #783	; 0x30f
 8009124:	4b22      	ldr	r3, [pc, #136]	; (80091b0 <__d2b+0xa4>)
 8009126:	4823      	ldr	r0, [pc, #140]	; (80091b4 <__d2b+0xa8>)
 8009128:	f000 fa80 	bl	800962c <__assert_func>
 800912c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009130:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009134:	bb24      	cbnz	r4, 8009180 <__d2b+0x74>
 8009136:	2f00      	cmp	r7, #0
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	d026      	beq.n	800918a <__d2b+0x7e>
 800913c:	4668      	mov	r0, sp
 800913e:	9700      	str	r7, [sp, #0]
 8009140:	f7ff fd8a 	bl	8008c58 <__lo0bits>
 8009144:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009148:	b1e8      	cbz	r0, 8009186 <__d2b+0x7a>
 800914a:	f1c0 0320 	rsb	r3, r0, #32
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	430b      	orrs	r3, r1
 8009154:	40c2      	lsrs	r2, r0
 8009156:	616b      	str	r3, [r5, #20]
 8009158:	9201      	str	r2, [sp, #4]
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	bf14      	ite	ne
 8009160:	2102      	movne	r1, #2
 8009162:	2101      	moveq	r1, #1
 8009164:	61ab      	str	r3, [r5, #24]
 8009166:	6129      	str	r1, [r5, #16]
 8009168:	b1bc      	cbz	r4, 800919a <__d2b+0x8e>
 800916a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800916e:	4404      	add	r4, r0
 8009170:	6034      	str	r4, [r6, #0]
 8009172:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009178:	6018      	str	r0, [r3, #0]
 800917a:	4628      	mov	r0, r5
 800917c:	b003      	add	sp, #12
 800917e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009184:	e7d7      	b.n	8009136 <__d2b+0x2a>
 8009186:	6169      	str	r1, [r5, #20]
 8009188:	e7e7      	b.n	800915a <__d2b+0x4e>
 800918a:	a801      	add	r0, sp, #4
 800918c:	f7ff fd64 	bl	8008c58 <__lo0bits>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	2101      	movs	r1, #1
 8009194:	616b      	str	r3, [r5, #20]
 8009196:	3020      	adds	r0, #32
 8009198:	e7e5      	b.n	8009166 <__d2b+0x5a>
 800919a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800919e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80091a2:	6030      	str	r0, [r6, #0]
 80091a4:	6918      	ldr	r0, [r3, #16]
 80091a6:	f7ff fd37 	bl	8008c18 <__hi0bits>
 80091aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80091ae:	e7e2      	b.n	8009176 <__d2b+0x6a>
 80091b0:	0800ade9 	.word	0x0800ade9
 80091b4:	0800adfa 	.word	0x0800adfa

080091b8 <__ssputs_r>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	461f      	mov	r7, r3
 80091be:	688e      	ldr	r6, [r1, #8]
 80091c0:	4682      	mov	sl, r0
 80091c2:	42be      	cmp	r6, r7
 80091c4:	460c      	mov	r4, r1
 80091c6:	4690      	mov	r8, r2
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	d82c      	bhi.n	8009226 <__ssputs_r+0x6e>
 80091cc:	898a      	ldrh	r2, [r1, #12]
 80091ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091d2:	d026      	beq.n	8009222 <__ssputs_r+0x6a>
 80091d4:	6965      	ldr	r5, [r4, #20]
 80091d6:	6909      	ldr	r1, [r1, #16]
 80091d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091dc:	eba3 0901 	sub.w	r9, r3, r1
 80091e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091e4:	1c7b      	adds	r3, r7, #1
 80091e6:	444b      	add	r3, r9
 80091e8:	106d      	asrs	r5, r5, #1
 80091ea:	429d      	cmp	r5, r3
 80091ec:	bf38      	it	cc
 80091ee:	461d      	movcc	r5, r3
 80091f0:	0553      	lsls	r3, r2, #21
 80091f2:	d527      	bpl.n	8009244 <__ssputs_r+0x8c>
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7ff fbdb 	bl	80089b0 <_malloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	b360      	cbz	r0, 8009258 <__ssputs_r+0xa0>
 80091fe:	464a      	mov	r2, r9
 8009200:	6921      	ldr	r1, [r4, #16]
 8009202:	f000 fa05 	bl	8009610 <memcpy>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	6126      	str	r6, [r4, #16]
 8009214:	444e      	add	r6, r9
 8009216:	6026      	str	r6, [r4, #0]
 8009218:	463e      	mov	r6, r7
 800921a:	6165      	str	r5, [r4, #20]
 800921c:	eba5 0509 	sub.w	r5, r5, r9
 8009220:	60a5      	str	r5, [r4, #8]
 8009222:	42be      	cmp	r6, r7
 8009224:	d900      	bls.n	8009228 <__ssputs_r+0x70>
 8009226:	463e      	mov	r6, r7
 8009228:	4632      	mov	r2, r6
 800922a:	4641      	mov	r1, r8
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	f000 f9c5 	bl	80095bc <memmove>
 8009232:	2000      	movs	r0, #0
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	1b9b      	subs	r3, r3, r6
 8009238:	60a3      	str	r3, [r4, #8]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	4433      	add	r3, r6
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009244:	462a      	mov	r2, r5
 8009246:	f000 fa35 	bl	80096b4 <_realloc_r>
 800924a:	4606      	mov	r6, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	d1e0      	bne.n	8009212 <__ssputs_r+0x5a>
 8009250:	4650      	mov	r0, sl
 8009252:	6921      	ldr	r1, [r4, #16]
 8009254:	f7ff fb3c 	bl	80088d0 <_free_r>
 8009258:	230c      	movs	r3, #12
 800925a:	f8ca 3000 	str.w	r3, [sl]
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	e7e9      	b.n	8009240 <__ssputs_r+0x88>

0800926c <_svfiprintf_r>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	4698      	mov	r8, r3
 8009272:	898b      	ldrh	r3, [r1, #12]
 8009274:	4607      	mov	r7, r0
 8009276:	061b      	lsls	r3, r3, #24
 8009278:	460d      	mov	r5, r1
 800927a:	4614      	mov	r4, r2
 800927c:	b09d      	sub	sp, #116	; 0x74
 800927e:	d50e      	bpl.n	800929e <_svfiprintf_r+0x32>
 8009280:	690b      	ldr	r3, [r1, #16]
 8009282:	b963      	cbnz	r3, 800929e <_svfiprintf_r+0x32>
 8009284:	2140      	movs	r1, #64	; 0x40
 8009286:	f7ff fb93 	bl	80089b0 <_malloc_r>
 800928a:	6028      	str	r0, [r5, #0]
 800928c:	6128      	str	r0, [r5, #16]
 800928e:	b920      	cbnz	r0, 800929a <_svfiprintf_r+0x2e>
 8009290:	230c      	movs	r3, #12
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	e0d0      	b.n	800943c <_svfiprintf_r+0x1d0>
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	616b      	str	r3, [r5, #20]
 800929e:	2300      	movs	r3, #0
 80092a0:	9309      	str	r3, [sp, #36]	; 0x24
 80092a2:	2320      	movs	r3, #32
 80092a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092a8:	2330      	movs	r3, #48	; 0x30
 80092aa:	f04f 0901 	mov.w	r9, #1
 80092ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009454 <_svfiprintf_r+0x1e8>
 80092b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092ba:	4623      	mov	r3, r4
 80092bc:	469a      	mov	sl, r3
 80092be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c2:	b10a      	cbz	r2, 80092c8 <_svfiprintf_r+0x5c>
 80092c4:	2a25      	cmp	r2, #37	; 0x25
 80092c6:	d1f9      	bne.n	80092bc <_svfiprintf_r+0x50>
 80092c8:	ebba 0b04 	subs.w	fp, sl, r4
 80092cc:	d00b      	beq.n	80092e6 <_svfiprintf_r+0x7a>
 80092ce:	465b      	mov	r3, fp
 80092d0:	4622      	mov	r2, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff ff6f 	bl	80091b8 <__ssputs_r>
 80092da:	3001      	adds	r0, #1
 80092dc:	f000 80a9 	beq.w	8009432 <_svfiprintf_r+0x1c6>
 80092e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e2:	445a      	add	r2, fp
 80092e4:	9209      	str	r2, [sp, #36]	; 0x24
 80092e6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80a1 	beq.w	8009432 <_svfiprintf_r+0x1c6>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092fa:	f10a 0a01 	add.w	sl, sl, #1
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	9307      	str	r3, [sp, #28]
 8009302:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009306:	931a      	str	r3, [sp, #104]	; 0x68
 8009308:	4654      	mov	r4, sl
 800930a:	2205      	movs	r2, #5
 800930c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009310:	4850      	ldr	r0, [pc, #320]	; (8009454 <_svfiprintf_r+0x1e8>)
 8009312:	f7fe fc62 	bl	8007bda <memchr>
 8009316:	9a04      	ldr	r2, [sp, #16]
 8009318:	b9d8      	cbnz	r0, 8009352 <_svfiprintf_r+0xe6>
 800931a:	06d0      	lsls	r0, r2, #27
 800931c:	bf44      	itt	mi
 800931e:	2320      	movmi	r3, #32
 8009320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009324:	0711      	lsls	r1, r2, #28
 8009326:	bf44      	itt	mi
 8009328:	232b      	movmi	r3, #43	; 0x2b
 800932a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b2a      	cmp	r3, #42	; 0x2a
 8009334:	d015      	beq.n	8009362 <_svfiprintf_r+0xf6>
 8009336:	4654      	mov	r4, sl
 8009338:	2000      	movs	r0, #0
 800933a:	f04f 0c0a 	mov.w	ip, #10
 800933e:	9a07      	ldr	r2, [sp, #28]
 8009340:	4621      	mov	r1, r4
 8009342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009346:	3b30      	subs	r3, #48	; 0x30
 8009348:	2b09      	cmp	r3, #9
 800934a:	d94d      	bls.n	80093e8 <_svfiprintf_r+0x17c>
 800934c:	b1b0      	cbz	r0, 800937c <_svfiprintf_r+0x110>
 800934e:	9207      	str	r2, [sp, #28]
 8009350:	e014      	b.n	800937c <_svfiprintf_r+0x110>
 8009352:	eba0 0308 	sub.w	r3, r0, r8
 8009356:	fa09 f303 	lsl.w	r3, r9, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	46a2      	mov	sl, r4
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	e7d2      	b.n	8009308 <_svfiprintf_r+0x9c>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	9103      	str	r1, [sp, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfbb      	ittet	lt
 800936e:	425b      	neglt	r3, r3
 8009370:	f042 0202 	orrlt.w	r2, r2, #2
 8009374:	9307      	strge	r3, [sp, #28]
 8009376:	9307      	strlt	r3, [sp, #28]
 8009378:	bfb8      	it	lt
 800937a:	9204      	strlt	r2, [sp, #16]
 800937c:	7823      	ldrb	r3, [r4, #0]
 800937e:	2b2e      	cmp	r3, #46	; 0x2e
 8009380:	d10c      	bne.n	800939c <_svfiprintf_r+0x130>
 8009382:	7863      	ldrb	r3, [r4, #1]
 8009384:	2b2a      	cmp	r3, #42	; 0x2a
 8009386:	d134      	bne.n	80093f2 <_svfiprintf_r+0x186>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	3402      	adds	r4, #2
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9203      	str	r2, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfb8      	it	lt
 8009396:	f04f 33ff 	movlt.w	r3, #4294967295
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009458 <_svfiprintf_r+0x1ec>
 80093a0:	2203      	movs	r2, #3
 80093a2:	4650      	mov	r0, sl
 80093a4:	7821      	ldrb	r1, [r4, #0]
 80093a6:	f7fe fc18 	bl	8007bda <memchr>
 80093aa:	b138      	cbz	r0, 80093bc <_svfiprintf_r+0x150>
 80093ac:	2240      	movs	r2, #64	; 0x40
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	eba0 000a 	sub.w	r0, r0, sl
 80093b4:	4082      	lsls	r2, r0
 80093b6:	4313      	orrs	r3, r2
 80093b8:	3401      	adds	r4, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c0:	2206      	movs	r2, #6
 80093c2:	4826      	ldr	r0, [pc, #152]	; (800945c <_svfiprintf_r+0x1f0>)
 80093c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093c8:	f7fe fc07 	bl	8007bda <memchr>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d038      	beq.n	8009442 <_svfiprintf_r+0x1d6>
 80093d0:	4b23      	ldr	r3, [pc, #140]	; (8009460 <_svfiprintf_r+0x1f4>)
 80093d2:	bb1b      	cbnz	r3, 800941c <_svfiprintf_r+0x1b0>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	3307      	adds	r3, #7
 80093d8:	f023 0307 	bic.w	r3, r3, #7
 80093dc:	3308      	adds	r3, #8
 80093de:	9303      	str	r3, [sp, #12]
 80093e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e2:	4433      	add	r3, r6
 80093e4:	9309      	str	r3, [sp, #36]	; 0x24
 80093e6:	e768      	b.n	80092ba <_svfiprintf_r+0x4e>
 80093e8:	460c      	mov	r4, r1
 80093ea:	2001      	movs	r0, #1
 80093ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f0:	e7a6      	b.n	8009340 <_svfiprintf_r+0xd4>
 80093f2:	2300      	movs	r3, #0
 80093f4:	f04f 0c0a 	mov.w	ip, #10
 80093f8:	4619      	mov	r1, r3
 80093fa:	3401      	adds	r4, #1
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	4620      	mov	r0, r4
 8009400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009404:	3a30      	subs	r2, #48	; 0x30
 8009406:	2a09      	cmp	r2, #9
 8009408:	d903      	bls.n	8009412 <_svfiprintf_r+0x1a6>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0c6      	beq.n	800939c <_svfiprintf_r+0x130>
 800940e:	9105      	str	r1, [sp, #20]
 8009410:	e7c4      	b.n	800939c <_svfiprintf_r+0x130>
 8009412:	4604      	mov	r4, r0
 8009414:	2301      	movs	r3, #1
 8009416:	fb0c 2101 	mla	r1, ip, r1, r2
 800941a:	e7f0      	b.n	80093fe <_svfiprintf_r+0x192>
 800941c:	ab03      	add	r3, sp, #12
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	462a      	mov	r2, r5
 8009422:	4638      	mov	r0, r7
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <_svfiprintf_r+0x1f8>)
 8009426:	a904      	add	r1, sp, #16
 8009428:	f7fd fe70 	bl	800710c <_printf_float>
 800942c:	1c42      	adds	r2, r0, #1
 800942e:	4606      	mov	r6, r0
 8009430:	d1d6      	bne.n	80093e0 <_svfiprintf_r+0x174>
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	065b      	lsls	r3, r3, #25
 8009436:	f53f af2d 	bmi.w	8009294 <_svfiprintf_r+0x28>
 800943a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943c:	b01d      	add	sp, #116	; 0x74
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	ab03      	add	r3, sp, #12
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	462a      	mov	r2, r5
 8009448:	4638      	mov	r0, r7
 800944a:	4b06      	ldr	r3, [pc, #24]	; (8009464 <_svfiprintf_r+0x1f8>)
 800944c:	a904      	add	r1, sp, #16
 800944e:	f7fe f8fd 	bl	800764c <_printf_i>
 8009452:	e7eb      	b.n	800942c <_svfiprintf_r+0x1c0>
 8009454:	0800af54 	.word	0x0800af54
 8009458:	0800af5a 	.word	0x0800af5a
 800945c:	0800af5e 	.word	0x0800af5e
 8009460:	0800710d 	.word	0x0800710d
 8009464:	080091b9 	.word	0x080091b9

08009468 <__sflush_r>:
 8009468:	898a      	ldrh	r2, [r1, #12]
 800946a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946c:	4605      	mov	r5, r0
 800946e:	0710      	lsls	r0, r2, #28
 8009470:	460c      	mov	r4, r1
 8009472:	d457      	bmi.n	8009524 <__sflush_r+0xbc>
 8009474:	684b      	ldr	r3, [r1, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc04      	bgt.n	8009484 <__sflush_r+0x1c>
 800947a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800947c:	2b00      	cmp	r3, #0
 800947e:	dc01      	bgt.n	8009484 <__sflush_r+0x1c>
 8009480:	2000      	movs	r0, #0
 8009482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009486:	2e00      	cmp	r6, #0
 8009488:	d0fa      	beq.n	8009480 <__sflush_r+0x18>
 800948a:	2300      	movs	r3, #0
 800948c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009490:	682f      	ldr	r7, [r5, #0]
 8009492:	6a21      	ldr	r1, [r4, #32]
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	d032      	beq.n	80094fe <__sflush_r+0x96>
 8009498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	075a      	lsls	r2, r3, #29
 800949e:	d505      	bpl.n	80094ac <__sflush_r+0x44>
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	1ac0      	subs	r0, r0, r3
 80094a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a6:	b10b      	cbz	r3, 80094ac <__sflush_r+0x44>
 80094a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094aa:	1ac0      	subs	r0, r0, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	4602      	mov	r2, r0
 80094b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094b2:	4628      	mov	r0, r5
 80094b4:	6a21      	ldr	r1, [r4, #32]
 80094b6:	47b0      	blx	r6
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	d106      	bne.n	80094cc <__sflush_r+0x64>
 80094be:	6829      	ldr	r1, [r5, #0]
 80094c0:	291d      	cmp	r1, #29
 80094c2:	d82b      	bhi.n	800951c <__sflush_r+0xb4>
 80094c4:	4a28      	ldr	r2, [pc, #160]	; (8009568 <__sflush_r+0x100>)
 80094c6:	410a      	asrs	r2, r1
 80094c8:	07d6      	lsls	r6, r2, #31
 80094ca:	d427      	bmi.n	800951c <__sflush_r+0xb4>
 80094cc:	2200      	movs	r2, #0
 80094ce:	6062      	str	r2, [r4, #4]
 80094d0:	6922      	ldr	r2, [r4, #16]
 80094d2:	04d9      	lsls	r1, r3, #19
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	d504      	bpl.n	80094e2 <__sflush_r+0x7a>
 80094d8:	1c42      	adds	r2, r0, #1
 80094da:	d101      	bne.n	80094e0 <__sflush_r+0x78>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	b903      	cbnz	r3, 80094e2 <__sflush_r+0x7a>
 80094e0:	6560      	str	r0, [r4, #84]	; 0x54
 80094e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e4:	602f      	str	r7, [r5, #0]
 80094e6:	2900      	cmp	r1, #0
 80094e8:	d0ca      	beq.n	8009480 <__sflush_r+0x18>
 80094ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ee:	4299      	cmp	r1, r3
 80094f0:	d002      	beq.n	80094f8 <__sflush_r+0x90>
 80094f2:	4628      	mov	r0, r5
 80094f4:	f7ff f9ec 	bl	80088d0 <_free_r>
 80094f8:	2000      	movs	r0, #0
 80094fa:	6360      	str	r0, [r4, #52]	; 0x34
 80094fc:	e7c1      	b.n	8009482 <__sflush_r+0x1a>
 80094fe:	2301      	movs	r3, #1
 8009500:	4628      	mov	r0, r5
 8009502:	47b0      	blx	r6
 8009504:	1c41      	adds	r1, r0, #1
 8009506:	d1c8      	bne.n	800949a <__sflush_r+0x32>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0c5      	beq.n	800949a <__sflush_r+0x32>
 800950e:	2b1d      	cmp	r3, #29
 8009510:	d001      	beq.n	8009516 <__sflush_r+0xae>
 8009512:	2b16      	cmp	r3, #22
 8009514:	d101      	bne.n	800951a <__sflush_r+0xb2>
 8009516:	602f      	str	r7, [r5, #0]
 8009518:	e7b2      	b.n	8009480 <__sflush_r+0x18>
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	e7ae      	b.n	8009482 <__sflush_r+0x1a>
 8009524:	690f      	ldr	r7, [r1, #16]
 8009526:	2f00      	cmp	r7, #0
 8009528:	d0aa      	beq.n	8009480 <__sflush_r+0x18>
 800952a:	0793      	lsls	r3, r2, #30
 800952c:	bf18      	it	ne
 800952e:	2300      	movne	r3, #0
 8009530:	680e      	ldr	r6, [r1, #0]
 8009532:	bf08      	it	eq
 8009534:	694b      	ldreq	r3, [r1, #20]
 8009536:	1bf6      	subs	r6, r6, r7
 8009538:	600f      	str	r7, [r1, #0]
 800953a:	608b      	str	r3, [r1, #8]
 800953c:	2e00      	cmp	r6, #0
 800953e:	dd9f      	ble.n	8009480 <__sflush_r+0x18>
 8009540:	4633      	mov	r3, r6
 8009542:	463a      	mov	r2, r7
 8009544:	4628      	mov	r0, r5
 8009546:	6a21      	ldr	r1, [r4, #32]
 8009548:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800954c:	47e0      	blx	ip
 800954e:	2800      	cmp	r0, #0
 8009550:	dc06      	bgt.n	8009560 <__sflush_r+0xf8>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	e790      	b.n	8009482 <__sflush_r+0x1a>
 8009560:	4407      	add	r7, r0
 8009562:	1a36      	subs	r6, r6, r0
 8009564:	e7ea      	b.n	800953c <__sflush_r+0xd4>
 8009566:	bf00      	nop
 8009568:	dfbffffe 	.word	0xdfbffffe

0800956c <_fflush_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	4605      	mov	r5, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b913      	cbnz	r3, 800957c <_fflush_r+0x10>
 8009576:	2500      	movs	r5, #0
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	b118      	cbz	r0, 8009586 <_fflush_r+0x1a>
 800957e:	6a03      	ldr	r3, [r0, #32]
 8009580:	b90b      	cbnz	r3, 8009586 <_fflush_r+0x1a>
 8009582:	f7fe fa11 	bl	80079a8 <__sinit>
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0f3      	beq.n	8009576 <_fflush_r+0xa>
 800958e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009590:	07d0      	lsls	r0, r2, #31
 8009592:	d404      	bmi.n	800959e <_fflush_r+0x32>
 8009594:	0599      	lsls	r1, r3, #22
 8009596:	d402      	bmi.n	800959e <_fflush_r+0x32>
 8009598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959a:	f7fe fb1c 	bl	8007bd6 <__retarget_lock_acquire_recursive>
 800959e:	4628      	mov	r0, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7ff ff61 	bl	8009468 <__sflush_r>
 80095a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a8:	4605      	mov	r5, r0
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d4e4      	bmi.n	8009578 <_fflush_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d4e1      	bmi.n	8009578 <_fflush_r+0xc>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f7fe fb0f 	bl	8007bd8 <__retarget_lock_release_recursive>
 80095ba:	e7dd      	b.n	8009578 <_fflush_r+0xc>

080095bc <memmove>:
 80095bc:	4288      	cmp	r0, r1
 80095be:	b510      	push	{r4, lr}
 80095c0:	eb01 0402 	add.w	r4, r1, r2
 80095c4:	d902      	bls.n	80095cc <memmove+0x10>
 80095c6:	4284      	cmp	r4, r0
 80095c8:	4623      	mov	r3, r4
 80095ca:	d807      	bhi.n	80095dc <memmove+0x20>
 80095cc:	1e43      	subs	r3, r0, #1
 80095ce:	42a1      	cmp	r1, r4
 80095d0:	d008      	beq.n	80095e4 <memmove+0x28>
 80095d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095da:	e7f8      	b.n	80095ce <memmove+0x12>
 80095dc:	4601      	mov	r1, r0
 80095de:	4402      	add	r2, r0
 80095e0:	428a      	cmp	r2, r1
 80095e2:	d100      	bne.n	80095e6 <memmove+0x2a>
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ee:	e7f7      	b.n	80095e0 <memmove+0x24>

080095f0 <_sbrk_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2300      	movs	r3, #0
 80095f4:	4d05      	ldr	r5, [pc, #20]	; (800960c <_sbrk_r+0x1c>)
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f8 fa2a 	bl	8001a54 <_sbrk>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_sbrk_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_sbrk_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	20000ad4 	.word	0x20000ad4

08009610 <memcpy>:
 8009610:	440a      	add	r2, r1
 8009612:	4291      	cmp	r1, r2
 8009614:	f100 33ff 	add.w	r3, r0, #4294967295
 8009618:	d100      	bne.n	800961c <memcpy+0xc>
 800961a:	4770      	bx	lr
 800961c:	b510      	push	{r4, lr}
 800961e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009622:	4291      	cmp	r1, r2
 8009624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009628:	d1f9      	bne.n	800961e <memcpy+0xe>
 800962a:	bd10      	pop	{r4, pc}

0800962c <__assert_func>:
 800962c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800962e:	4614      	mov	r4, r2
 8009630:	461a      	mov	r2, r3
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <__assert_func+0x2c>)
 8009634:	4605      	mov	r5, r0
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68d8      	ldr	r0, [r3, #12]
 800963a:	b14c      	cbz	r4, 8009650 <__assert_func+0x24>
 800963c:	4b07      	ldr	r3, [pc, #28]	; (800965c <__assert_func+0x30>)
 800963e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009642:	9100      	str	r1, [sp, #0]
 8009644:	462b      	mov	r3, r5
 8009646:	4906      	ldr	r1, [pc, #24]	; (8009660 <__assert_func+0x34>)
 8009648:	f000 f870 	bl	800972c <fiprintf>
 800964c:	f000 f880 	bl	8009750 <abort>
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <__assert_func+0x38>)
 8009652:	461c      	mov	r4, r3
 8009654:	e7f3      	b.n	800963e <__assert_func+0x12>
 8009656:	bf00      	nop
 8009658:	2000006c 	.word	0x2000006c
 800965c:	0800af6f 	.word	0x0800af6f
 8009660:	0800af7c 	.word	0x0800af7c
 8009664:	0800afaa 	.word	0x0800afaa

08009668 <_calloc_r>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	fba1 5402 	umull	r5, r4, r1, r2
 800966e:	b934      	cbnz	r4, 800967e <_calloc_r+0x16>
 8009670:	4629      	mov	r1, r5
 8009672:	f7ff f99d 	bl	80089b0 <_malloc_r>
 8009676:	4606      	mov	r6, r0
 8009678:	b928      	cbnz	r0, 8009686 <_calloc_r+0x1e>
 800967a:	4630      	mov	r0, r6
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	220c      	movs	r2, #12
 8009680:	2600      	movs	r6, #0
 8009682:	6002      	str	r2, [r0, #0]
 8009684:	e7f9      	b.n	800967a <_calloc_r+0x12>
 8009686:	462a      	mov	r2, r5
 8009688:	4621      	mov	r1, r4
 800968a:	f7fe fa26 	bl	8007ada <memset>
 800968e:	e7f4      	b.n	800967a <_calloc_r+0x12>

08009690 <__ascii_mbtowc>:
 8009690:	b082      	sub	sp, #8
 8009692:	b901      	cbnz	r1, 8009696 <__ascii_mbtowc+0x6>
 8009694:	a901      	add	r1, sp, #4
 8009696:	b142      	cbz	r2, 80096aa <__ascii_mbtowc+0x1a>
 8009698:	b14b      	cbz	r3, 80096ae <__ascii_mbtowc+0x1e>
 800969a:	7813      	ldrb	r3, [r2, #0]
 800969c:	600b      	str	r3, [r1, #0]
 800969e:	7812      	ldrb	r2, [r2, #0]
 80096a0:	1e10      	subs	r0, r2, #0
 80096a2:	bf18      	it	ne
 80096a4:	2001      	movne	r0, #1
 80096a6:	b002      	add	sp, #8
 80096a8:	4770      	bx	lr
 80096aa:	4610      	mov	r0, r2
 80096ac:	e7fb      	b.n	80096a6 <__ascii_mbtowc+0x16>
 80096ae:	f06f 0001 	mvn.w	r0, #1
 80096b2:	e7f8      	b.n	80096a6 <__ascii_mbtowc+0x16>

080096b4 <_realloc_r>:
 80096b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	4680      	mov	r8, r0
 80096ba:	4614      	mov	r4, r2
 80096bc:	460e      	mov	r6, r1
 80096be:	b921      	cbnz	r1, 80096ca <_realloc_r+0x16>
 80096c0:	4611      	mov	r1, r2
 80096c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c6:	f7ff b973 	b.w	80089b0 <_malloc_r>
 80096ca:	b92a      	cbnz	r2, 80096d8 <_realloc_r+0x24>
 80096cc:	f7ff f900 	bl	80088d0 <_free_r>
 80096d0:	4625      	mov	r5, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	f000 f841 	bl	800975e <_malloc_usable_size_r>
 80096dc:	4284      	cmp	r4, r0
 80096de:	4607      	mov	r7, r0
 80096e0:	d802      	bhi.n	80096e8 <_realloc_r+0x34>
 80096e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096e6:	d812      	bhi.n	800970e <_realloc_r+0x5a>
 80096e8:	4621      	mov	r1, r4
 80096ea:	4640      	mov	r0, r8
 80096ec:	f7ff f960 	bl	80089b0 <_malloc_r>
 80096f0:	4605      	mov	r5, r0
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d0ed      	beq.n	80096d2 <_realloc_r+0x1e>
 80096f6:	42bc      	cmp	r4, r7
 80096f8:	4622      	mov	r2, r4
 80096fa:	4631      	mov	r1, r6
 80096fc:	bf28      	it	cs
 80096fe:	463a      	movcs	r2, r7
 8009700:	f7ff ff86 	bl	8009610 <memcpy>
 8009704:	4631      	mov	r1, r6
 8009706:	4640      	mov	r0, r8
 8009708:	f7ff f8e2 	bl	80088d0 <_free_r>
 800970c:	e7e1      	b.n	80096d2 <_realloc_r+0x1e>
 800970e:	4635      	mov	r5, r6
 8009710:	e7df      	b.n	80096d2 <_realloc_r+0x1e>

08009712 <__ascii_wctomb>:
 8009712:	4603      	mov	r3, r0
 8009714:	4608      	mov	r0, r1
 8009716:	b141      	cbz	r1, 800972a <__ascii_wctomb+0x18>
 8009718:	2aff      	cmp	r2, #255	; 0xff
 800971a:	d904      	bls.n	8009726 <__ascii_wctomb+0x14>
 800971c:	228a      	movs	r2, #138	; 0x8a
 800971e:	f04f 30ff 	mov.w	r0, #4294967295
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	4770      	bx	lr
 8009726:	2001      	movs	r0, #1
 8009728:	700a      	strb	r2, [r1, #0]
 800972a:	4770      	bx	lr

0800972c <fiprintf>:
 800972c:	b40e      	push	{r1, r2, r3}
 800972e:	b503      	push	{r0, r1, lr}
 8009730:	4601      	mov	r1, r0
 8009732:	ab03      	add	r3, sp, #12
 8009734:	4805      	ldr	r0, [pc, #20]	; (800974c <fiprintf+0x20>)
 8009736:	f853 2b04 	ldr.w	r2, [r3], #4
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	f000 f83d 	bl	80097bc <_vfiprintf_r>
 8009742:	b002      	add	sp, #8
 8009744:	f85d eb04 	ldr.w	lr, [sp], #4
 8009748:	b003      	add	sp, #12
 800974a:	4770      	bx	lr
 800974c:	2000006c 	.word	0x2000006c

08009750 <abort>:
 8009750:	2006      	movs	r0, #6
 8009752:	b508      	push	{r3, lr}
 8009754:	f000 fa0a 	bl	8009b6c <raise>
 8009758:	2001      	movs	r0, #1
 800975a:	f7f8 f908 	bl	800196e <_exit>

0800975e <_malloc_usable_size_r>:
 800975e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009762:	1f18      	subs	r0, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	bfbc      	itt	lt
 8009768:	580b      	ldrlt	r3, [r1, r0]
 800976a:	18c0      	addlt	r0, r0, r3
 800976c:	4770      	bx	lr

0800976e <__sfputc_r>:
 800976e:	6893      	ldr	r3, [r2, #8]
 8009770:	b410      	push	{r4}
 8009772:	3b01      	subs	r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	6093      	str	r3, [r2, #8]
 8009778:	da07      	bge.n	800978a <__sfputc_r+0x1c>
 800977a:	6994      	ldr	r4, [r2, #24]
 800977c:	42a3      	cmp	r3, r4
 800977e:	db01      	blt.n	8009784 <__sfputc_r+0x16>
 8009780:	290a      	cmp	r1, #10
 8009782:	d102      	bne.n	800978a <__sfputc_r+0x1c>
 8009784:	bc10      	pop	{r4}
 8009786:	f000 b933 	b.w	80099f0 <__swbuf_r>
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	1c58      	adds	r0, r3, #1
 800978e:	6010      	str	r0, [r2, #0]
 8009790:	7019      	strb	r1, [r3, #0]
 8009792:	4608      	mov	r0, r1
 8009794:	bc10      	pop	{r4}
 8009796:	4770      	bx	lr

08009798 <__sfputs_r>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	4614      	mov	r4, r2
 80097a0:	18d5      	adds	r5, r2, r3
 80097a2:	42ac      	cmp	r4, r5
 80097a4:	d101      	bne.n	80097aa <__sfputs_r+0x12>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e007      	b.n	80097ba <__sfputs_r+0x22>
 80097aa:	463a      	mov	r2, r7
 80097ac:	4630      	mov	r0, r6
 80097ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b2:	f7ff ffdc 	bl	800976e <__sfputc_r>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d1f3      	bne.n	80097a2 <__sfputs_r+0xa>
 80097ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097bc <_vfiprintf_r>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	460d      	mov	r5, r1
 80097c2:	4614      	mov	r4, r2
 80097c4:	4698      	mov	r8, r3
 80097c6:	4606      	mov	r6, r0
 80097c8:	b09d      	sub	sp, #116	; 0x74
 80097ca:	b118      	cbz	r0, 80097d4 <_vfiprintf_r+0x18>
 80097cc:	6a03      	ldr	r3, [r0, #32]
 80097ce:	b90b      	cbnz	r3, 80097d4 <_vfiprintf_r+0x18>
 80097d0:	f7fe f8ea 	bl	80079a8 <__sinit>
 80097d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	d405      	bmi.n	80097e6 <_vfiprintf_r+0x2a>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_vfiprintf_r+0x2a>
 80097e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e2:	f7fe f9f8 	bl	8007bd6 <__retarget_lock_acquire_recursive>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	071b      	lsls	r3, r3, #28
 80097ea:	d501      	bpl.n	80097f0 <_vfiprintf_r+0x34>
 80097ec:	692b      	ldr	r3, [r5, #16]
 80097ee:	b99b      	cbnz	r3, 8009818 <_vfiprintf_r+0x5c>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	f000 f93a 	bl	8009a6c <__swsetup_r>
 80097f8:	b170      	cbz	r0, 8009818 <_vfiprintf_r+0x5c>
 80097fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097fc:	07dc      	lsls	r4, r3, #31
 80097fe:	d504      	bpl.n	800980a <_vfiprintf_r+0x4e>
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	b01d      	add	sp, #116	; 0x74
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	0598      	lsls	r0, r3, #22
 800980e:	d4f7      	bmi.n	8009800 <_vfiprintf_r+0x44>
 8009810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009812:	f7fe f9e1 	bl	8007bd8 <__retarget_lock_release_recursive>
 8009816:	e7f3      	b.n	8009800 <_vfiprintf_r+0x44>
 8009818:	2300      	movs	r3, #0
 800981a:	9309      	str	r3, [sp, #36]	; 0x24
 800981c:	2320      	movs	r3, #32
 800981e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009822:	2330      	movs	r3, #48	; 0x30
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	f8cd 800c 	str.w	r8, [sp, #12]
 800982c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80099dc <_vfiprintf_r+0x220>
 8009830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009834:	4623      	mov	r3, r4
 8009836:	469a      	mov	sl, r3
 8009838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800983c:	b10a      	cbz	r2, 8009842 <_vfiprintf_r+0x86>
 800983e:	2a25      	cmp	r2, #37	; 0x25
 8009840:	d1f9      	bne.n	8009836 <_vfiprintf_r+0x7a>
 8009842:	ebba 0b04 	subs.w	fp, sl, r4
 8009846:	d00b      	beq.n	8009860 <_vfiprintf_r+0xa4>
 8009848:	465b      	mov	r3, fp
 800984a:	4622      	mov	r2, r4
 800984c:	4629      	mov	r1, r5
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff ffa2 	bl	8009798 <__sfputs_r>
 8009854:	3001      	adds	r0, #1
 8009856:	f000 80a9 	beq.w	80099ac <_vfiprintf_r+0x1f0>
 800985a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800985c:	445a      	add	r2, fp
 800985e:	9209      	str	r2, [sp, #36]	; 0x24
 8009860:	f89a 3000 	ldrb.w	r3, [sl]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 80a1 	beq.w	80099ac <_vfiprintf_r+0x1f0>
 800986a:	2300      	movs	r3, #0
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009874:	f10a 0a01 	add.w	sl, sl, #1
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009880:	931a      	str	r3, [sp, #104]	; 0x68
 8009882:	4654      	mov	r4, sl
 8009884:	2205      	movs	r2, #5
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4854      	ldr	r0, [pc, #336]	; (80099dc <_vfiprintf_r+0x220>)
 800988c:	f7fe f9a5 	bl	8007bda <memchr>
 8009890:	9a04      	ldr	r2, [sp, #16]
 8009892:	b9d8      	cbnz	r0, 80098cc <_vfiprintf_r+0x110>
 8009894:	06d1      	lsls	r1, r2, #27
 8009896:	bf44      	itt	mi
 8009898:	2320      	movmi	r3, #32
 800989a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989e:	0713      	lsls	r3, r2, #28
 80098a0:	bf44      	itt	mi
 80098a2:	232b      	movmi	r3, #43	; 0x2b
 80098a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ac:	2b2a      	cmp	r3, #42	; 0x2a
 80098ae:	d015      	beq.n	80098dc <_vfiprintf_r+0x120>
 80098b0:	4654      	mov	r4, sl
 80098b2:	2000      	movs	r0, #0
 80098b4:	f04f 0c0a 	mov.w	ip, #10
 80098b8:	9a07      	ldr	r2, [sp, #28]
 80098ba:	4621      	mov	r1, r4
 80098bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c0:	3b30      	subs	r3, #48	; 0x30
 80098c2:	2b09      	cmp	r3, #9
 80098c4:	d94d      	bls.n	8009962 <_vfiprintf_r+0x1a6>
 80098c6:	b1b0      	cbz	r0, 80098f6 <_vfiprintf_r+0x13a>
 80098c8:	9207      	str	r2, [sp, #28]
 80098ca:	e014      	b.n	80098f6 <_vfiprintf_r+0x13a>
 80098cc:	eba0 0308 	sub.w	r3, r0, r8
 80098d0:	fa09 f303 	lsl.w	r3, r9, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	46a2      	mov	sl, r4
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	e7d2      	b.n	8009882 <_vfiprintf_r+0xc6>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	1d19      	adds	r1, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfbb      	ittet	lt
 80098e8:	425b      	neglt	r3, r3
 80098ea:	f042 0202 	orrlt.w	r2, r2, #2
 80098ee:	9307      	strge	r3, [sp, #28]
 80098f0:	9307      	strlt	r3, [sp, #28]
 80098f2:	bfb8      	it	lt
 80098f4:	9204      	strlt	r2, [sp, #16]
 80098f6:	7823      	ldrb	r3, [r4, #0]
 80098f8:	2b2e      	cmp	r3, #46	; 0x2e
 80098fa:	d10c      	bne.n	8009916 <_vfiprintf_r+0x15a>
 80098fc:	7863      	ldrb	r3, [r4, #1]
 80098fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009900:	d134      	bne.n	800996c <_vfiprintf_r+0x1b0>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	3402      	adds	r4, #2
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	9203      	str	r2, [sp, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	bfb8      	it	lt
 8009910:	f04f 33ff 	movlt.w	r3, #4294967295
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099e0 <_vfiprintf_r+0x224>
 800991a:	2203      	movs	r2, #3
 800991c:	4650      	mov	r0, sl
 800991e:	7821      	ldrb	r1, [r4, #0]
 8009920:	f7fe f95b 	bl	8007bda <memchr>
 8009924:	b138      	cbz	r0, 8009936 <_vfiprintf_r+0x17a>
 8009926:	2240      	movs	r2, #64	; 0x40
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	eba0 000a 	sub.w	r0, r0, sl
 800992e:	4082      	lsls	r2, r0
 8009930:	4313      	orrs	r3, r2
 8009932:	3401      	adds	r4, #1
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993a:	2206      	movs	r2, #6
 800993c:	4829      	ldr	r0, [pc, #164]	; (80099e4 <_vfiprintf_r+0x228>)
 800993e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009942:	f7fe f94a 	bl	8007bda <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d03f      	beq.n	80099ca <_vfiprintf_r+0x20e>
 800994a:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <_vfiprintf_r+0x22c>)
 800994c:	bb1b      	cbnz	r3, 8009996 <_vfiprintf_r+0x1da>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	3307      	adds	r3, #7
 8009952:	f023 0307 	bic.w	r3, r3, #7
 8009956:	3308      	adds	r3, #8
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	443b      	add	r3, r7
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	e768      	b.n	8009834 <_vfiprintf_r+0x78>
 8009962:	460c      	mov	r4, r1
 8009964:	2001      	movs	r0, #1
 8009966:	fb0c 3202 	mla	r2, ip, r2, r3
 800996a:	e7a6      	b.n	80098ba <_vfiprintf_r+0xfe>
 800996c:	2300      	movs	r3, #0
 800996e:	f04f 0c0a 	mov.w	ip, #10
 8009972:	4619      	mov	r1, r3
 8009974:	3401      	adds	r4, #1
 8009976:	9305      	str	r3, [sp, #20]
 8009978:	4620      	mov	r0, r4
 800997a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997e:	3a30      	subs	r2, #48	; 0x30
 8009980:	2a09      	cmp	r2, #9
 8009982:	d903      	bls.n	800998c <_vfiprintf_r+0x1d0>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c6      	beq.n	8009916 <_vfiprintf_r+0x15a>
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	e7c4      	b.n	8009916 <_vfiprintf_r+0x15a>
 800998c:	4604      	mov	r4, r0
 800998e:	2301      	movs	r3, #1
 8009990:	fb0c 2101 	mla	r1, ip, r1, r2
 8009994:	e7f0      	b.n	8009978 <_vfiprintf_r+0x1bc>
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4630      	mov	r0, r6
 800999e:	4b13      	ldr	r3, [pc, #76]	; (80099ec <_vfiprintf_r+0x230>)
 80099a0:	a904      	add	r1, sp, #16
 80099a2:	f7fd fbb3 	bl	800710c <_printf_float>
 80099a6:	4607      	mov	r7, r0
 80099a8:	1c78      	adds	r0, r7, #1
 80099aa:	d1d6      	bne.n	800995a <_vfiprintf_r+0x19e>
 80099ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ae:	07d9      	lsls	r1, r3, #31
 80099b0:	d405      	bmi.n	80099be <_vfiprintf_r+0x202>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	059a      	lsls	r2, r3, #22
 80099b6:	d402      	bmi.n	80099be <_vfiprintf_r+0x202>
 80099b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ba:	f7fe f90d 	bl	8007bd8 <__retarget_lock_release_recursive>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	065b      	lsls	r3, r3, #25
 80099c2:	f53f af1d 	bmi.w	8009800 <_vfiprintf_r+0x44>
 80099c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c8:	e71c      	b.n	8009804 <_vfiprintf_r+0x48>
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4630      	mov	r0, r6
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <_vfiprintf_r+0x230>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	f7fd fe39 	bl	800764c <_printf_i>
 80099da:	e7e4      	b.n	80099a6 <_vfiprintf_r+0x1ea>
 80099dc:	0800af54 	.word	0x0800af54
 80099e0:	0800af5a 	.word	0x0800af5a
 80099e4:	0800af5e 	.word	0x0800af5e
 80099e8:	0800710d 	.word	0x0800710d
 80099ec:	08009799 	.word	0x08009799

080099f0 <__swbuf_r>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	460e      	mov	r6, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	4605      	mov	r5, r0
 80099f8:	b118      	cbz	r0, 8009a02 <__swbuf_r+0x12>
 80099fa:	6a03      	ldr	r3, [r0, #32]
 80099fc:	b90b      	cbnz	r3, 8009a02 <__swbuf_r+0x12>
 80099fe:	f7fd ffd3 	bl	80079a8 <__sinit>
 8009a02:	69a3      	ldr	r3, [r4, #24]
 8009a04:	60a3      	str	r3, [r4, #8]
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	071a      	lsls	r2, r3, #28
 8009a0a:	d525      	bpl.n	8009a58 <__swbuf_r+0x68>
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	b31b      	cbz	r3, 8009a58 <__swbuf_r+0x68>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	6922      	ldr	r2, [r4, #16]
 8009a14:	b2f6      	uxtb	r6, r6
 8009a16:	1a98      	subs	r0, r3, r2
 8009a18:	6963      	ldr	r3, [r4, #20]
 8009a1a:	4637      	mov	r7, r6
 8009a1c:	4283      	cmp	r3, r0
 8009a1e:	dc04      	bgt.n	8009a2a <__swbuf_r+0x3a>
 8009a20:	4621      	mov	r1, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7ff fda2 	bl	800956c <_fflush_r>
 8009a28:	b9e0      	cbnz	r0, 8009a64 <__swbuf_r+0x74>
 8009a2a:	68a3      	ldr	r3, [r4, #8]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	60a3      	str	r3, [r4, #8]
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	6022      	str	r2, [r4, #0]
 8009a36:	701e      	strb	r6, [r3, #0]
 8009a38:	6962      	ldr	r2, [r4, #20]
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d004      	beq.n	8009a4a <__swbuf_r+0x5a>
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	07db      	lsls	r3, r3, #31
 8009a44:	d506      	bpl.n	8009a54 <__swbuf_r+0x64>
 8009a46:	2e0a      	cmp	r6, #10
 8009a48:	d104      	bne.n	8009a54 <__swbuf_r+0x64>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff fd8d 	bl	800956c <_fflush_r>
 8009a52:	b938      	cbnz	r0, 8009a64 <__swbuf_r+0x74>
 8009a54:	4638      	mov	r0, r7
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 f806 	bl	8009a6c <__swsetup_r>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0d5      	beq.n	8009a10 <__swbuf_r+0x20>
 8009a64:	f04f 37ff 	mov.w	r7, #4294967295
 8009a68:	e7f4      	b.n	8009a54 <__swbuf_r+0x64>
	...

08009a6c <__swsetup_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <__swsetup_r+0xac>)
 8009a70:	4605      	mov	r5, r0
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	460c      	mov	r4, r1
 8009a76:	b118      	cbz	r0, 8009a80 <__swsetup_r+0x14>
 8009a78:	6a03      	ldr	r3, [r0, #32]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <__swsetup_r+0x14>
 8009a7c:	f7fd ff94 	bl	80079a8 <__sinit>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a86:	0718      	lsls	r0, r3, #28
 8009a88:	d422      	bmi.n	8009ad0 <__swsetup_r+0x64>
 8009a8a:	06d9      	lsls	r1, r3, #27
 8009a8c:	d407      	bmi.n	8009a9e <__swsetup_r+0x32>
 8009a8e:	2309      	movs	r3, #9
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	e034      	b.n	8009b08 <__swsetup_r+0x9c>
 8009a9e:	0758      	lsls	r0, r3, #29
 8009aa0:	d512      	bpl.n	8009ac8 <__swsetup_r+0x5c>
 8009aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aa4:	b141      	cbz	r1, 8009ab8 <__swsetup_r+0x4c>
 8009aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aaa:	4299      	cmp	r1, r3
 8009aac:	d002      	beq.n	8009ab4 <__swsetup_r+0x48>
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f7fe ff0e 	bl	80088d0 <_free_r>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6363      	str	r3, [r4, #52]	; 0x34
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	6063      	str	r3, [r4, #4]
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f043 0308 	orr.w	r3, r3, #8
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	b94b      	cbnz	r3, 8009ae8 <__swsetup_r+0x7c>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ade:	d003      	beq.n	8009ae8 <__swsetup_r+0x7c>
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f883 	bl	8009bee <__smakebuf_r>
 8009ae8:	89a0      	ldrh	r0, [r4, #12]
 8009aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aee:	f010 0301 	ands.w	r3, r0, #1
 8009af2:	d00a      	beq.n	8009b0a <__swsetup_r+0x9e>
 8009af4:	2300      	movs	r3, #0
 8009af6:	60a3      	str	r3, [r4, #8]
 8009af8:	6963      	ldr	r3, [r4, #20]
 8009afa:	425b      	negs	r3, r3
 8009afc:	61a3      	str	r3, [r4, #24]
 8009afe:	6923      	ldr	r3, [r4, #16]
 8009b00:	b943      	cbnz	r3, 8009b14 <__swsetup_r+0xa8>
 8009b02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b06:	d1c4      	bne.n	8009a92 <__swsetup_r+0x26>
 8009b08:	bd38      	pop	{r3, r4, r5, pc}
 8009b0a:	0781      	lsls	r1, r0, #30
 8009b0c:	bf58      	it	pl
 8009b0e:	6963      	ldrpl	r3, [r4, #20]
 8009b10:	60a3      	str	r3, [r4, #8]
 8009b12:	e7f4      	b.n	8009afe <__swsetup_r+0x92>
 8009b14:	2000      	movs	r0, #0
 8009b16:	e7f7      	b.n	8009b08 <__swsetup_r+0x9c>
 8009b18:	2000006c 	.word	0x2000006c

08009b1c <_raise_r>:
 8009b1c:	291f      	cmp	r1, #31
 8009b1e:	b538      	push	{r3, r4, r5, lr}
 8009b20:	4604      	mov	r4, r0
 8009b22:	460d      	mov	r5, r1
 8009b24:	d904      	bls.n	8009b30 <_raise_r+0x14>
 8009b26:	2316      	movs	r3, #22
 8009b28:	6003      	str	r3, [r0, #0]
 8009b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b32:	b112      	cbz	r2, 8009b3a <_raise_r+0x1e>
 8009b34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b38:	b94b      	cbnz	r3, 8009b4e <_raise_r+0x32>
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f830 	bl	8009ba0 <_getpid_r>
 8009b40:	462a      	mov	r2, r5
 8009b42:	4601      	mov	r1, r0
 8009b44:	4620      	mov	r0, r4
 8009b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4a:	f000 b817 	b.w	8009b7c <_kill_r>
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d00a      	beq.n	8009b68 <_raise_r+0x4c>
 8009b52:	1c59      	adds	r1, r3, #1
 8009b54:	d103      	bne.n	8009b5e <_raise_r+0x42>
 8009b56:	2316      	movs	r3, #22
 8009b58:	6003      	str	r3, [r0, #0]
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	e7e7      	b.n	8009b2e <_raise_r+0x12>
 8009b5e:	2400      	movs	r4, #0
 8009b60:	4628      	mov	r0, r5
 8009b62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b66:	4798      	blx	r3
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e7e0      	b.n	8009b2e <_raise_r+0x12>

08009b6c <raise>:
 8009b6c:	4b02      	ldr	r3, [pc, #8]	; (8009b78 <raise+0xc>)
 8009b6e:	4601      	mov	r1, r0
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	f7ff bfd3 	b.w	8009b1c <_raise_r>
 8009b76:	bf00      	nop
 8009b78:	2000006c 	.word	0x2000006c

08009b7c <_kill_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_kill_r+0x20>)
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	f7f7 fee0 	bl	800194e <_kill>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d102      	bne.n	8009b98 <_kill_r+0x1c>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	b103      	cbz	r3, 8009b98 <_kill_r+0x1c>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000ad4 	.word	0x20000ad4

08009ba0 <_getpid_r>:
 8009ba0:	f7f7 bece 	b.w	8001940 <_getpid>

08009ba4 <__swhatbuf_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bac:	4615      	mov	r5, r2
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	461e      	mov	r6, r3
 8009bb2:	b096      	sub	sp, #88	; 0x58
 8009bb4:	da0c      	bge.n	8009bd0 <__swhatbuf_r+0x2c>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009bbe:	bf0c      	ite	eq
 8009bc0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009bc4:	2340      	movne	r3, #64	; 0x40
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	6031      	str	r1, [r6, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	b016      	add	sp, #88	; 0x58
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	466a      	mov	r2, sp
 8009bd2:	f000 f849 	bl	8009c68 <_fstat_r>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	dbed      	blt.n	8009bb6 <__swhatbuf_r+0x12>
 8009bda:	9901      	ldr	r1, [sp, #4]
 8009bdc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009be0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009be4:	4259      	negs	r1, r3
 8009be6:	4159      	adcs	r1, r3
 8009be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bec:	e7eb      	b.n	8009bc6 <__swhatbuf_r+0x22>

08009bee <__smakebuf_r>:
 8009bee:	898b      	ldrh	r3, [r1, #12]
 8009bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bf2:	079d      	lsls	r5, r3, #30
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	d507      	bpl.n	8009c0a <__smakebuf_r+0x1c>
 8009bfa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bfe:	6023      	str	r3, [r4, #0]
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	2301      	movs	r3, #1
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	b002      	add	sp, #8
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	466a      	mov	r2, sp
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	f7ff ffc9 	bl	8009ba4 <__swhatbuf_r>
 8009c12:	9900      	ldr	r1, [sp, #0]
 8009c14:	4605      	mov	r5, r0
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7fe feca 	bl	80089b0 <_malloc_r>
 8009c1c:	b948      	cbnz	r0, 8009c32 <__smakebuf_r+0x44>
 8009c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c22:	059a      	lsls	r2, r3, #22
 8009c24:	d4ef      	bmi.n	8009c06 <__smakebuf_r+0x18>
 8009c26:	f023 0303 	bic.w	r3, r3, #3
 8009c2a:	f043 0302 	orr.w	r3, r3, #2
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	e7e3      	b.n	8009bfa <__smakebuf_r+0xc>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	6020      	str	r0, [r4, #0]
 8009c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	9b00      	ldr	r3, [sp, #0]
 8009c3e:	6120      	str	r0, [r4, #16]
 8009c40:	6163      	str	r3, [r4, #20]
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	b15b      	cbz	r3, 8009c5e <__smakebuf_r+0x70>
 8009c46:	4630      	mov	r0, r6
 8009c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4c:	f000 f81e 	bl	8009c8c <_isatty_r>
 8009c50:	b128      	cbz	r0, 8009c5e <__smakebuf_r+0x70>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f023 0303 	bic.w	r3, r3, #3
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	431d      	orrs	r5, r3
 8009c62:	81a5      	strh	r5, [r4, #12]
 8009c64:	e7cf      	b.n	8009c06 <__smakebuf_r+0x18>
	...

08009c68 <_fstat_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4d06      	ldr	r5, [pc, #24]	; (8009c88 <_fstat_r+0x20>)
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	4611      	mov	r1, r2
 8009c74:	602b      	str	r3, [r5, #0]
 8009c76:	f7f7 fec8 	bl	8001a0a <_fstat>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d102      	bne.n	8009c84 <_fstat_r+0x1c>
 8009c7e:	682b      	ldr	r3, [r5, #0]
 8009c80:	b103      	cbz	r3, 8009c84 <_fstat_r+0x1c>
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop
 8009c88:	20000ad4 	.word	0x20000ad4

08009c8c <_isatty_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4d05      	ldr	r5, [pc, #20]	; (8009ca8 <_isatty_r+0x1c>)
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f7 fec6 	bl	8001a28 <_isatty>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_isatty_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_isatty_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20000ad4 	.word	0x20000ad4

08009cac <pow>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	461d      	mov	r5, r3
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	4689      	mov	r9, r1
 8009cb8:	f000 f866 	bl	8009d88 <__ieee754_pow>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460f      	mov	r7, r1
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 feaa 	bl	8000a20 <__aeabi_dcmpun>
 8009ccc:	bbc8      	cbnz	r0, 8009d42 <pow+0x96>
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 fe71 	bl	80009bc <__aeabi_dcmpeq>
 8009cda:	b1b8      	cbz	r0, 8009d0c <pow+0x60>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fe6a 	bl	80009bc <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d141      	bne.n	8009d70 <pow+0xc4>
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f000 f844 	bl	8009d7c <finite>
 8009cf4:	b328      	cbz	r0, 8009d42 <pow+0x96>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fe67 	bl	80009d0 <__aeabi_dcmplt>
 8009d02:	b1f0      	cbz	r0, 8009d42 <pow+0x96>
 8009d04:	f7fd ff3c 	bl	8007b80 <__errno>
 8009d08:	2322      	movs	r3, #34	; 0x22
 8009d0a:	e019      	b.n	8009d40 <pow+0x94>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f000 f834 	bl	8009d7c <finite>
 8009d14:	b9c8      	cbnz	r0, 8009d4a <pow+0x9e>
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f000 f82f 	bl	8009d7c <finite>
 8009d1e:	b1a0      	cbz	r0, 8009d4a <pow+0x9e>
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	f000 f82a 	bl	8009d7c <finite>
 8009d28:	b178      	cbz	r0, 8009d4a <pow+0x9e>
 8009d2a:	4632      	mov	r2, r6
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fe75 	bl	8000a20 <__aeabi_dcmpun>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d0e4      	beq.n	8009d04 <pow+0x58>
 8009d3a:	f7fd ff21 	bl	8007b80 <__errno>
 8009d3e:	2321      	movs	r3, #33	; 0x21
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 fe33 	bl	80009bc <__aeabi_dcmpeq>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0f3      	beq.n	8009d42 <pow+0x96>
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f000 f80d 	bl	8009d7c <finite>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0ed      	beq.n	8009d42 <pow+0x96>
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f000 f807 	bl	8009d7c <finite>
 8009d6e:	e7c8      	b.n	8009d02 <pow+0x56>
 8009d70:	2600      	movs	r6, #0
 8009d72:	4f01      	ldr	r7, [pc, #4]	; (8009d78 <pow+0xcc>)
 8009d74:	e7e5      	b.n	8009d42 <pow+0x96>
 8009d76:	bf00      	nop
 8009d78:	3ff00000 	.word	0x3ff00000

08009d7c <finite>:
 8009d7c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009d80:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d84:	0fc0      	lsrs	r0, r0, #31
 8009d86:	4770      	bx	lr

08009d88 <__ieee754_pow>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	b093      	sub	sp, #76	; 0x4c
 8009d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d92:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009d96:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009d9a:	4689      	mov	r9, r1
 8009d9c:	ea56 0102 	orrs.w	r1, r6, r2
 8009da0:	4680      	mov	r8, r0
 8009da2:	d111      	bne.n	8009dc8 <__ieee754_pow+0x40>
 8009da4:	1803      	adds	r3, r0, r0
 8009da6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009daa:	4152      	adcs	r2, r2
 8009dac:	4299      	cmp	r1, r3
 8009dae:	4b82      	ldr	r3, [pc, #520]	; (8009fb8 <__ieee754_pow+0x230>)
 8009db0:	4193      	sbcs	r3, r2
 8009db2:	f080 84ba 	bcs.w	800a72a <__ieee754_pow+0x9a2>
 8009db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dba:	4640      	mov	r0, r8
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	f7f6 f9df 	bl	8000180 <__adddf3>
 8009dc2:	4683      	mov	fp, r0
 8009dc4:	468c      	mov	ip, r1
 8009dc6:	e06f      	b.n	8009ea8 <__ieee754_pow+0x120>
 8009dc8:	4b7c      	ldr	r3, [pc, #496]	; (8009fbc <__ieee754_pow+0x234>)
 8009dca:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	464d      	mov	r5, r9
 8009dd2:	4682      	mov	sl, r0
 8009dd4:	dc06      	bgt.n	8009de4 <__ieee754_pow+0x5c>
 8009dd6:	d101      	bne.n	8009ddc <__ieee754_pow+0x54>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d1ec      	bne.n	8009db6 <__ieee754_pow+0x2e>
 8009ddc:	429e      	cmp	r6, r3
 8009dde:	dc01      	bgt.n	8009de4 <__ieee754_pow+0x5c>
 8009de0:	d10f      	bne.n	8009e02 <__ieee754_pow+0x7a>
 8009de2:	b172      	cbz	r2, 8009e02 <__ieee754_pow+0x7a>
 8009de4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009de8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009dec:	ea55 050a 	orrs.w	r5, r5, sl
 8009df0:	d1e1      	bne.n	8009db6 <__ieee754_pow+0x2e>
 8009df2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009df6:	18db      	adds	r3, r3, r3
 8009df8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009dfc:	4152      	adcs	r2, r2
 8009dfe:	429d      	cmp	r5, r3
 8009e00:	e7d5      	b.n	8009dae <__ieee754_pow+0x26>
 8009e02:	2d00      	cmp	r5, #0
 8009e04:	da39      	bge.n	8009e7a <__ieee754_pow+0xf2>
 8009e06:	4b6e      	ldr	r3, [pc, #440]	; (8009fc0 <__ieee754_pow+0x238>)
 8009e08:	429e      	cmp	r6, r3
 8009e0a:	dc52      	bgt.n	8009eb2 <__ieee754_pow+0x12a>
 8009e0c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e10:	429e      	cmp	r6, r3
 8009e12:	f340 849d 	ble.w	800a750 <__ieee754_pow+0x9c8>
 8009e16:	1533      	asrs	r3, r6, #20
 8009e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e1c:	2b14      	cmp	r3, #20
 8009e1e:	dd0f      	ble.n	8009e40 <__ieee754_pow+0xb8>
 8009e20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009e24:	fa22 f103 	lsr.w	r1, r2, r3
 8009e28:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	f040 848f 	bne.w	800a750 <__ieee754_pow+0x9c8>
 8009e32:	f001 0101 	and.w	r1, r1, #1
 8009e36:	f1c1 0302 	rsb	r3, r1, #2
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	b182      	cbz	r2, 8009e60 <__ieee754_pow+0xd8>
 8009e3e:	e05d      	b.n	8009efc <__ieee754_pow+0x174>
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d159      	bne.n	8009ef8 <__ieee754_pow+0x170>
 8009e44:	f1c3 0314 	rsb	r3, r3, #20
 8009e48:	fa46 f103 	asr.w	r1, r6, r3
 8009e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e50:	42b3      	cmp	r3, r6
 8009e52:	f040 847a 	bne.w	800a74a <__ieee754_pow+0x9c2>
 8009e56:	f001 0101 	and.w	r1, r1, #1
 8009e5a:	f1c1 0302 	rsb	r3, r1, #2
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	4b58      	ldr	r3, [pc, #352]	; (8009fc4 <__ieee754_pow+0x23c>)
 8009e62:	429e      	cmp	r6, r3
 8009e64:	d132      	bne.n	8009ecc <__ieee754_pow+0x144>
 8009e66:	2f00      	cmp	r7, #0
 8009e68:	f280 846b 	bge.w	800a742 <__ieee754_pow+0x9ba>
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	2000      	movs	r0, #0
 8009e72:	4954      	ldr	r1, [pc, #336]	; (8009fc4 <__ieee754_pow+0x23c>)
 8009e74:	f7f6 fc64 	bl	8000740 <__aeabi_ddiv>
 8009e78:	e7a3      	b.n	8009dc2 <__ieee754_pow+0x3a>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	d13c      	bne.n	8009efc <__ieee754_pow+0x174>
 8009e82:	4b4e      	ldr	r3, [pc, #312]	; (8009fbc <__ieee754_pow+0x234>)
 8009e84:	429e      	cmp	r6, r3
 8009e86:	d1eb      	bne.n	8009e60 <__ieee754_pow+0xd8>
 8009e88:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e8c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e90:	ea53 030a 	orrs.w	r3, r3, sl
 8009e94:	f000 8449 	beq.w	800a72a <__ieee754_pow+0x9a2>
 8009e98:	4b4b      	ldr	r3, [pc, #300]	; (8009fc8 <__ieee754_pow+0x240>)
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	dd0b      	ble.n	8009eb6 <__ieee754_pow+0x12e>
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	f2c0 8449 	blt.w	800a736 <__ieee754_pow+0x9ae>
 8009ea4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009ea8:	4658      	mov	r0, fp
 8009eaa:	4661      	mov	r1, ip
 8009eac:	b013      	add	sp, #76	; 0x4c
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e7e2      	b.n	8009e7c <__ieee754_pow+0xf4>
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	f04f 0b00 	mov.w	fp, #0
 8009ebc:	f04f 0c00 	mov.w	ip, #0
 8009ec0:	daf2      	bge.n	8009ea8 <__ieee754_pow+0x120>
 8009ec2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009ec6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009eca:	e7ed      	b.n	8009ea8 <__ieee754_pow+0x120>
 8009ecc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009ed0:	d106      	bne.n	8009ee0 <__ieee754_pow+0x158>
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fb07 	bl	80004ec <__aeabi_dmul>
 8009ede:	e770      	b.n	8009dc2 <__ieee754_pow+0x3a>
 8009ee0:	4b3a      	ldr	r3, [pc, #232]	; (8009fcc <__ieee754_pow+0x244>)
 8009ee2:	429f      	cmp	r7, r3
 8009ee4:	d10a      	bne.n	8009efc <__ieee754_pow+0x174>
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	db08      	blt.n	8009efc <__ieee754_pow+0x174>
 8009eea:	4640      	mov	r0, r8
 8009eec:	4649      	mov	r1, r9
 8009eee:	b013      	add	sp, #76	; 0x4c
 8009ef0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	f000 bd0a 	b.w	800a90c <__ieee754_sqrt>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	f000 fc58 	bl	800a7b4 <fabs>
 8009f04:	4683      	mov	fp, r0
 8009f06:	468c      	mov	ip, r1
 8009f08:	f1ba 0f00 	cmp.w	sl, #0
 8009f0c:	d128      	bne.n	8009f60 <__ieee754_pow+0x1d8>
 8009f0e:	b124      	cbz	r4, 8009f1a <__ieee754_pow+0x192>
 8009f10:	4b2c      	ldr	r3, [pc, #176]	; (8009fc4 <__ieee754_pow+0x23c>)
 8009f12:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d122      	bne.n	8009f60 <__ieee754_pow+0x1d8>
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	da07      	bge.n	8009f2e <__ieee754_pow+0x1a6>
 8009f1e:	465a      	mov	r2, fp
 8009f20:	4663      	mov	r3, ip
 8009f22:	2000      	movs	r0, #0
 8009f24:	4927      	ldr	r1, [pc, #156]	; (8009fc4 <__ieee754_pow+0x23c>)
 8009f26:	f7f6 fc0b 	bl	8000740 <__aeabi_ddiv>
 8009f2a:	4683      	mov	fp, r0
 8009f2c:	468c      	mov	ip, r1
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	daba      	bge.n	8009ea8 <__ieee754_pow+0x120>
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f3c:	431c      	orrs	r4, r3
 8009f3e:	d108      	bne.n	8009f52 <__ieee754_pow+0x1ca>
 8009f40:	465a      	mov	r2, fp
 8009f42:	4663      	mov	r3, ip
 8009f44:	4658      	mov	r0, fp
 8009f46:	4661      	mov	r1, ip
 8009f48:	f7f6 f918 	bl	800017c <__aeabi_dsub>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	e790      	b.n	8009e74 <__ieee754_pow+0xec>
 8009f52:	9b00      	ldr	r3, [sp, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d1a7      	bne.n	8009ea8 <__ieee754_pow+0x120>
 8009f58:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009f5c:	469c      	mov	ip, r3
 8009f5e:	e7a3      	b.n	8009ea8 <__ieee754_pow+0x120>
 8009f60:	0feb      	lsrs	r3, r5, #31
 8009f62:	3b01      	subs	r3, #1
 8009f64:	930c      	str	r3, [sp, #48]	; 0x30
 8009f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f68:	9b00      	ldr	r3, [sp, #0]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	d104      	bne.n	8009f78 <__ieee754_pow+0x1f0>
 8009f6e:	4642      	mov	r2, r8
 8009f70:	464b      	mov	r3, r9
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	e7e7      	b.n	8009f48 <__ieee754_pow+0x1c0>
 8009f78:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <__ieee754_pow+0x248>)
 8009f7a:	429e      	cmp	r6, r3
 8009f7c:	f340 80f6 	ble.w	800a16c <__ieee754_pow+0x3e4>
 8009f80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f84:	429e      	cmp	r6, r3
 8009f86:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <__ieee754_pow+0x240>)
 8009f88:	dd09      	ble.n	8009f9e <__ieee754_pow+0x216>
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	dc0c      	bgt.n	8009fa8 <__ieee754_pow+0x220>
 8009f8e:	2f00      	cmp	r7, #0
 8009f90:	da0c      	bge.n	8009fac <__ieee754_pow+0x224>
 8009f92:	2000      	movs	r0, #0
 8009f94:	b013      	add	sp, #76	; 0x4c
 8009f96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	f000 bcb2 	b.w	800a902 <__math_oflow>
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	dbf5      	blt.n	8009f8e <__ieee754_pow+0x206>
 8009fa2:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <__ieee754_pow+0x23c>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	dd15      	ble.n	8009fd4 <__ieee754_pow+0x24c>
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	dcf2      	bgt.n	8009f92 <__ieee754_pow+0x20a>
 8009fac:	2000      	movs	r0, #0
 8009fae:	b013      	add	sp, #76	; 0x4c
 8009fb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	f000 bca0 	b.w	800a8f8 <__math_uflow>
 8009fb8:	fff00000 	.word	0xfff00000
 8009fbc:	7ff00000 	.word	0x7ff00000
 8009fc0:	433fffff 	.word	0x433fffff
 8009fc4:	3ff00000 	.word	0x3ff00000
 8009fc8:	3fefffff 	.word	0x3fefffff
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	41e00000 	.word	0x41e00000
 8009fd4:	4661      	mov	r1, ip
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4658      	mov	r0, fp
 8009fda:	4b5f      	ldr	r3, [pc, #380]	; (800a158 <__ieee754_pow+0x3d0>)
 8009fdc:	f7f6 f8ce 	bl	800017c <__aeabi_dsub>
 8009fe0:	a355      	add	r3, pc, #340	; (adr r3, 800a138 <__ieee754_pow+0x3b0>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	f7f6 fa7f 	bl	80004ec <__aeabi_dmul>
 8009fee:	a354      	add	r3, pc, #336	; (adr r3, 800a140 <__ieee754_pow+0x3b8>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	f7f6 fa76 	bl	80004ec <__aeabi_dmul>
 800a000:	2200      	movs	r2, #0
 800a002:	4682      	mov	sl, r0
 800a004:	468b      	mov	fp, r1
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	4b54      	ldr	r3, [pc, #336]	; (800a15c <__ieee754_pow+0x3d4>)
 800a00c:	f7f6 fa6e 	bl	80004ec <__aeabi_dmul>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	a14c      	add	r1, pc, #304	; (adr r1, 800a148 <__ieee754_pow+0x3c0>)
 800a016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a01a:	f7f6 f8af 	bl	800017c <__aeabi_dsub>
 800a01e:	4622      	mov	r2, r4
 800a020:	462b      	mov	r3, r5
 800a022:	f7f6 fa63 	bl	80004ec <__aeabi_dmul>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	2000      	movs	r0, #0
 800a02c:	494c      	ldr	r1, [pc, #304]	; (800a160 <__ieee754_pow+0x3d8>)
 800a02e:	f7f6 f8a5 	bl	800017c <__aeabi_dsub>
 800a032:	4622      	mov	r2, r4
 800a034:	462b      	mov	r3, r5
 800a036:	4680      	mov	r8, r0
 800a038:	4689      	mov	r9, r1
 800a03a:	4620      	mov	r0, r4
 800a03c:	4629      	mov	r1, r5
 800a03e:	f7f6 fa55 	bl	80004ec <__aeabi_dmul>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4640      	mov	r0, r8
 800a048:	4649      	mov	r1, r9
 800a04a:	f7f6 fa4f 	bl	80004ec <__aeabi_dmul>
 800a04e:	a340      	add	r3, pc, #256	; (adr r3, 800a150 <__ieee754_pow+0x3c8>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 fa4a 	bl	80004ec <__aeabi_dmul>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	f7f6 f88c 	bl	800017c <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f7f6 f886 	bl	8000180 <__adddf3>
 800a074:	2000      	movs	r0, #0
 800a076:	4632      	mov	r2, r6
 800a078:	463b      	mov	r3, r7
 800a07a:	4682      	mov	sl, r0
 800a07c:	468b      	mov	fp, r1
 800a07e:	f7f6 f87d 	bl	800017c <__aeabi_dsub>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4620      	mov	r0, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	f7f6 f877 	bl	800017c <__aeabi_dsub>
 800a08e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a096:	3b01      	subs	r3, #1
 800a098:	4313      	orrs	r3, r2
 800a09a:	f04f 0600 	mov.w	r6, #0
 800a09e:	f04f 0200 	mov.w	r2, #0
 800a0a2:	bf0c      	ite	eq
 800a0a4:	4b2f      	ldreq	r3, [pc, #188]	; (800a164 <__ieee754_pow+0x3dc>)
 800a0a6:	4b2c      	ldrne	r3, [pc, #176]	; (800a158 <__ieee754_pow+0x3d0>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b0:	e9cd 2300 	strd	r2, r3, [sp]
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	463b      	mov	r3, r7
 800a0b8:	f7f6 f860 	bl	800017c <__aeabi_dsub>
 800a0bc:	4652      	mov	r2, sl
 800a0be:	465b      	mov	r3, fp
 800a0c0:	f7f6 fa14 	bl	80004ec <__aeabi_dmul>
 800a0c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c8:	4680      	mov	r8, r0
 800a0ca:	4689      	mov	r9, r1
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	f7f6 fa0c 	bl	80004ec <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 f850 	bl	8000180 <__adddf3>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	4659      	mov	r1, fp
 800a0ec:	f7f6 f9fe 	bl	80004ec <__aeabi_dmul>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a100:	f7f6 f83e 	bl	8000180 <__adddf3>
 800a104:	4b18      	ldr	r3, [pc, #96]	; (800a168 <__ieee754_pow+0x3e0>)
 800a106:	4682      	mov	sl, r0
 800a108:	4299      	cmp	r1, r3
 800a10a:	460f      	mov	r7, r1
 800a10c:	460e      	mov	r6, r1
 800a10e:	f340 82e7 	ble.w	800a6e0 <__ieee754_pow+0x958>
 800a112:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a116:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a11a:	4303      	orrs	r3, r0
 800a11c:	f000 81e2 	beq.w	800a4e4 <__ieee754_pow+0x75c>
 800a120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a124:	2200      	movs	r2, #0
 800a126:	2300      	movs	r3, #0
 800a128:	f7f6 fc52 	bl	80009d0 <__aeabi_dcmplt>
 800a12c:	3800      	subs	r0, #0
 800a12e:	bf18      	it	ne
 800a130:	2001      	movne	r0, #1
 800a132:	e72f      	b.n	8009f94 <__ieee754_pow+0x20c>
 800a134:	f3af 8000 	nop.w
 800a138:	60000000 	.word	0x60000000
 800a13c:	3ff71547 	.word	0x3ff71547
 800a140:	f85ddf44 	.word	0xf85ddf44
 800a144:	3e54ae0b 	.word	0x3e54ae0b
 800a148:	55555555 	.word	0x55555555
 800a14c:	3fd55555 	.word	0x3fd55555
 800a150:	652b82fe 	.word	0x652b82fe
 800a154:	3ff71547 	.word	0x3ff71547
 800a158:	3ff00000 	.word	0x3ff00000
 800a15c:	3fd00000 	.word	0x3fd00000
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	bff00000 	.word	0xbff00000
 800a168:	408fffff 	.word	0x408fffff
 800a16c:	4bd4      	ldr	r3, [pc, #848]	; (800a4c0 <__ieee754_pow+0x738>)
 800a16e:	2200      	movs	r2, #0
 800a170:	402b      	ands	r3, r5
 800a172:	b943      	cbnz	r3, 800a186 <__ieee754_pow+0x3fe>
 800a174:	4658      	mov	r0, fp
 800a176:	4661      	mov	r1, ip
 800a178:	4bd2      	ldr	r3, [pc, #840]	; (800a4c4 <__ieee754_pow+0x73c>)
 800a17a:	f7f6 f9b7 	bl	80004ec <__aeabi_dmul>
 800a17e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a182:	4683      	mov	fp, r0
 800a184:	460c      	mov	r4, r1
 800a186:	1523      	asrs	r3, r4, #20
 800a188:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a18c:	4413      	add	r3, r2
 800a18e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a190:	4bcd      	ldr	r3, [pc, #820]	; (800a4c8 <__ieee754_pow+0x740>)
 800a192:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a196:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a19a:	429c      	cmp	r4, r3
 800a19c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a1a0:	dd08      	ble.n	800a1b4 <__ieee754_pow+0x42c>
 800a1a2:	4bca      	ldr	r3, [pc, #808]	; (800a4cc <__ieee754_pow+0x744>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	f340 8164 	ble.w	800a472 <__ieee754_pow+0x6ea>
 800a1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ac:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1b4:	2600      	movs	r6, #0
 800a1b6:	00f3      	lsls	r3, r6, #3
 800a1b8:	930d      	str	r3, [sp, #52]	; 0x34
 800a1ba:	4bc5      	ldr	r3, [pc, #788]	; (800a4d0 <__ieee754_pow+0x748>)
 800a1bc:	4658      	mov	r0, fp
 800a1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a1ce:	4623      	mov	r3, r4
 800a1d0:	f7f5 ffd4 	bl	800017c <__aeabi_dsub>
 800a1d4:	46da      	mov	sl, fp
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	4652      	mov	r2, sl
 800a1da:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a1de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1e2:	f7f5 ffcd 	bl	8000180 <__adddf3>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	49b9      	ldr	r1, [pc, #740]	; (800a4d4 <__ieee754_pow+0x74c>)
 800a1ee:	f7f6 faa7 	bl	8000740 <__aeabi_ddiv>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1fe:	f7f6 f975 	bl	80004ec <__aeabi_dmul>
 800a202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a206:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a20a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a20e:	2300      	movs	r3, #0
 800a210:	2200      	movs	r2, #0
 800a212:	46ab      	mov	fp, r5
 800a214:	106d      	asrs	r5, r5, #1
 800a216:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a220:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a224:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	4614      	mov	r4, r2
 800a22e:	461d      	mov	r5, r3
 800a230:	f7f6 f95c 	bl	80004ec <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a23c:	f7f5 ff9e 	bl	800017c <__aeabi_dsub>
 800a240:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	4620      	mov	r0, r4
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7f5 ff96 	bl	800017c <__aeabi_dsub>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4650      	mov	r0, sl
 800a256:	4659      	mov	r1, fp
 800a258:	f7f5 ff90 	bl	800017c <__aeabi_dsub>
 800a25c:	4642      	mov	r2, r8
 800a25e:	464b      	mov	r3, r9
 800a260:	f7f6 f944 	bl	80004ec <__aeabi_dmul>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4630      	mov	r0, r6
 800a26a:	4639      	mov	r1, r7
 800a26c:	f7f5 ff86 	bl	800017c <__aeabi_dsub>
 800a270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a274:	f7f6 f93a 	bl	80004ec <__aeabi_dmul>
 800a278:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a27c:	4682      	mov	sl, r0
 800a27e:	468b      	mov	fp, r1
 800a280:	4610      	mov	r0, r2
 800a282:	4619      	mov	r1, r3
 800a284:	f7f6 f932 	bl	80004ec <__aeabi_dmul>
 800a288:	a37b      	add	r3, pc, #492	; (adr r3, 800a478 <__ieee754_pow+0x6f0>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	4604      	mov	r4, r0
 800a290:	460d      	mov	r5, r1
 800a292:	f7f6 f92b 	bl	80004ec <__aeabi_dmul>
 800a296:	a37a      	add	r3, pc, #488	; (adr r3, 800a480 <__ieee754_pow+0x6f8>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	f7f5 ff70 	bl	8000180 <__adddf3>
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f7f6 f922 	bl	80004ec <__aeabi_dmul>
 800a2a8:	a377      	add	r3, pc, #476	; (adr r3, 800a488 <__ieee754_pow+0x700>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f5 ff67 	bl	8000180 <__adddf3>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f6 f919 	bl	80004ec <__aeabi_dmul>
 800a2ba:	a375      	add	r3, pc, #468	; (adr r3, 800a490 <__ieee754_pow+0x708>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f5 ff5e 	bl	8000180 <__adddf3>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f6 f910 	bl	80004ec <__aeabi_dmul>
 800a2cc:	a372      	add	r3, pc, #456	; (adr r3, 800a498 <__ieee754_pow+0x710>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 ff55 	bl	8000180 <__adddf3>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	f7f6 f907 	bl	80004ec <__aeabi_dmul>
 800a2de:	a370      	add	r3, pc, #448	; (adr r3, 800a4a0 <__ieee754_pow+0x718>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ff4c 	bl	8000180 <__adddf3>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460f      	mov	r7, r1
 800a2ee:	462b      	mov	r3, r5
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 f8fa 	bl	80004ec <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 f8f4 	bl	80004ec <__aeabi_dmul>
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a30c:	4642      	mov	r2, r8
 800a30e:	464b      	mov	r3, r9
 800a310:	f7f5 ff36 	bl	8000180 <__adddf3>
 800a314:	4652      	mov	r2, sl
 800a316:	465b      	mov	r3, fp
 800a318:	f7f6 f8e8 	bl	80004ec <__aeabi_dmul>
 800a31c:	4622      	mov	r2, r4
 800a31e:	462b      	mov	r3, r5
 800a320:	f7f5 ff2e 	bl	8000180 <__adddf3>
 800a324:	4642      	mov	r2, r8
 800a326:	4606      	mov	r6, r0
 800a328:	460f      	mov	r7, r1
 800a32a:	464b      	mov	r3, r9
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7f6 f8dc 	bl	80004ec <__aeabi_dmul>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a33c:	2200      	movs	r2, #0
 800a33e:	4b66      	ldr	r3, [pc, #408]	; (800a4d8 <__ieee754_pow+0x750>)
 800a340:	f7f5 ff1e 	bl	8000180 <__adddf3>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f7f5 ff1a 	bl	8000180 <__adddf3>
 800a34c:	2400      	movs	r4, #0
 800a34e:	460d      	mov	r5, r1
 800a350:	4622      	mov	r2, r4
 800a352:	460b      	mov	r3, r1
 800a354:	4640      	mov	r0, r8
 800a356:	4649      	mov	r1, r9
 800a358:	f7f6 f8c8 	bl	80004ec <__aeabi_dmul>
 800a35c:	2200      	movs	r2, #0
 800a35e:	4680      	mov	r8, r0
 800a360:	4689      	mov	r9, r1
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	4b5c      	ldr	r3, [pc, #368]	; (800a4d8 <__ieee754_pow+0x750>)
 800a368:	f7f5 ff08 	bl	800017c <__aeabi_dsub>
 800a36c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a370:	f7f5 ff04 	bl	800017c <__aeabi_dsub>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f5 fefe 	bl	800017c <__aeabi_dsub>
 800a380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a384:	f7f6 f8b2 	bl	80004ec <__aeabi_dmul>
 800a388:	4622      	mov	r2, r4
 800a38a:	4606      	mov	r6, r0
 800a38c:	460f      	mov	r7, r1
 800a38e:	462b      	mov	r3, r5
 800a390:	4650      	mov	r0, sl
 800a392:	4659      	mov	r1, fp
 800a394:	f7f6 f8aa 	bl	80004ec <__aeabi_dmul>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4630      	mov	r0, r6
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f7f5 feee 	bl	8000180 <__adddf3>
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460f      	mov	r7, r1
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f5 fee5 	bl	8000180 <__adddf3>
 800a3b6:	a33c      	add	r3, pc, #240	; (adr r3, 800a4a8 <__ieee754_pow+0x720>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	4620      	mov	r0, r4
 800a3be:	460d      	mov	r5, r1
 800a3c0:	f7f6 f894 	bl	80004ec <__aeabi_dmul>
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f5 fed4 	bl	800017c <__aeabi_dsub>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f5 fece 	bl	800017c <__aeabi_dsub>
 800a3e0:	a333      	add	r3, pc, #204	; (adr r3, 800a4b0 <__ieee754_pow+0x728>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f7f6 f881 	bl	80004ec <__aeabi_dmul>
 800a3ea:	a333      	add	r3, pc, #204	; (adr r3, 800a4b8 <__ieee754_pow+0x730>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f6 f878 	bl	80004ec <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f5 febc 	bl	8000180 <__adddf3>
 800a408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a40a:	4b34      	ldr	r3, [pc, #208]	; (800a4dc <__ieee754_pow+0x754>)
 800a40c:	4413      	add	r3, r2
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 feb5 	bl	8000180 <__adddf3>
 800a416:	4680      	mov	r8, r0
 800a418:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a41a:	4689      	mov	r9, r1
 800a41c:	f7f5 fffc 	bl	8000418 <__aeabi_i2d>
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a42a:	4b2d      	ldr	r3, [pc, #180]	; (800a4e0 <__ieee754_pow+0x758>)
 800a42c:	4413      	add	r3, r2
 800a42e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a432:	4642      	mov	r2, r8
 800a434:	464b      	mov	r3, r9
 800a436:	f7f5 fea3 	bl	8000180 <__adddf3>
 800a43a:	4632      	mov	r2, r6
 800a43c:	463b      	mov	r3, r7
 800a43e:	f7f5 fe9f 	bl	8000180 <__adddf3>
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	f7f5 fe9b 	bl	8000180 <__adddf3>
 800a44a:	2000      	movs	r0, #0
 800a44c:	4622      	mov	r2, r4
 800a44e:	462b      	mov	r3, r5
 800a450:	4682      	mov	sl, r0
 800a452:	468b      	mov	fp, r1
 800a454:	f7f5 fe92 	bl	800017c <__aeabi_dsub>
 800a458:	4632      	mov	r2, r6
 800a45a:	463b      	mov	r3, r7
 800a45c:	f7f5 fe8e 	bl	800017c <__aeabi_dsub>
 800a460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a464:	f7f5 fe8a 	bl	800017c <__aeabi_dsub>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4640      	mov	r0, r8
 800a46e:	4649      	mov	r1, r9
 800a470:	e60b      	b.n	800a08a <__ieee754_pow+0x302>
 800a472:	2601      	movs	r6, #1
 800a474:	e69f      	b.n	800a1b6 <__ieee754_pow+0x42e>
 800a476:	bf00      	nop
 800a478:	4a454eef 	.word	0x4a454eef
 800a47c:	3fca7e28 	.word	0x3fca7e28
 800a480:	93c9db65 	.word	0x93c9db65
 800a484:	3fcd864a 	.word	0x3fcd864a
 800a488:	a91d4101 	.word	0xa91d4101
 800a48c:	3fd17460 	.word	0x3fd17460
 800a490:	518f264d 	.word	0x518f264d
 800a494:	3fd55555 	.word	0x3fd55555
 800a498:	db6fabff 	.word	0xdb6fabff
 800a49c:	3fdb6db6 	.word	0x3fdb6db6
 800a4a0:	33333303 	.word	0x33333303
 800a4a4:	3fe33333 	.word	0x3fe33333
 800a4a8:	e0000000 	.word	0xe0000000
 800a4ac:	3feec709 	.word	0x3feec709
 800a4b0:	dc3a03fd 	.word	0xdc3a03fd
 800a4b4:	3feec709 	.word	0x3feec709
 800a4b8:	145b01f5 	.word	0x145b01f5
 800a4bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a4c0:	7ff00000 	.word	0x7ff00000
 800a4c4:	43400000 	.word	0x43400000
 800a4c8:	0003988e 	.word	0x0003988e
 800a4cc:	000bb679 	.word	0x000bb679
 800a4d0:	0800afb0 	.word	0x0800afb0
 800a4d4:	3ff00000 	.word	0x3ff00000
 800a4d8:	40080000 	.word	0x40080000
 800a4dc:	0800afd0 	.word	0x0800afd0
 800a4e0:	0800afc0 	.word	0x0800afc0
 800a4e4:	a39c      	add	r3, pc, #624	; (adr r3, 800a758 <__ieee754_pow+0x9d0>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	f7f5 fe47 	bl	8000180 <__adddf3>
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f8:	462b      	mov	r3, r5
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	f7f5 fe3d 	bl	800017c <__aeabi_dsub>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a50a:	f7f6 fa7f 	bl	8000a0c <__aeabi_dcmpgt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f47f ae06 	bne.w	800a120 <__ieee754_pow+0x398>
 800a514:	4aa2      	ldr	r2, [pc, #648]	; (800a7a0 <__ieee754_pow+0xa18>)
 800a516:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a51a:	4293      	cmp	r3, r2
 800a51c:	f340 8100 	ble.w	800a720 <__ieee754_pow+0x998>
 800a520:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a524:	151b      	asrs	r3, r3, #20
 800a526:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a52a:	fa4a fa03 	asr.w	sl, sl, r3
 800a52e:	44b2      	add	sl, r6
 800a530:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a534:	489b      	ldr	r0, [pc, #620]	; (800a7a4 <__ieee754_pow+0xa1c>)
 800a536:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a53a:	4108      	asrs	r0, r1
 800a53c:	ea00 030a 	and.w	r3, r0, sl
 800a540:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a544:	f1c1 0114 	rsb	r1, r1, #20
 800a548:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a54c:	fa4a fa01 	asr.w	sl, sl, r1
 800a550:	2e00      	cmp	r6, #0
 800a552:	f04f 0200 	mov.w	r2, #0
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	bfb8      	it	lt
 800a55c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a560:	f7f5 fe0c 	bl	800017c <__aeabi_dsub>
 800a564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a56c:	2400      	movs	r4, #0
 800a56e:	4642      	mov	r2, r8
 800a570:	464b      	mov	r3, r9
 800a572:	f7f5 fe05 	bl	8000180 <__adddf3>
 800a576:	a37a      	add	r3, pc, #488	; (adr r3, 800a760 <__ieee754_pow+0x9d8>)
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	4620      	mov	r0, r4
 800a57e:	460d      	mov	r5, r1
 800a580:	f7f5 ffb4 	bl	80004ec <__aeabi_dmul>
 800a584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a588:	4606      	mov	r6, r0
 800a58a:	460f      	mov	r7, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f5 fdf4 	bl	800017c <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f5 fdee 	bl	800017c <__aeabi_dsub>
 800a5a0:	a371      	add	r3, pc, #452	; (adr r3, 800a768 <__ieee754_pow+0x9e0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f5 ffa1 	bl	80004ec <__aeabi_dmul>
 800a5aa:	a371      	add	r3, pc, #452	; (adr r3, 800a770 <__ieee754_pow+0x9e8>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	4680      	mov	r8, r0
 800a5b2:	4689      	mov	r9, r1
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f5 ff98 	bl	80004ec <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	f7f5 fddc 	bl	8000180 <__adddf3>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	460d      	mov	r5, r1
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f5 fdd4 	bl	8000180 <__adddf3>
 800a5d8:	4632      	mov	r2, r6
 800a5da:	463b      	mov	r3, r7
 800a5dc:	4680      	mov	r8, r0
 800a5de:	4689      	mov	r9, r1
 800a5e0:	f7f5 fdcc 	bl	800017c <__aeabi_dsub>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	f7f5 fdc6 	bl	800017c <__aeabi_dsub>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	464b      	mov	r3, r9
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	f7f5 ff76 	bl	80004ec <__aeabi_dmul>
 800a600:	a35d      	add	r3, pc, #372	; (adr r3, 800a778 <__ieee754_pow+0x9f0>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	4604      	mov	r4, r0
 800a608:	460d      	mov	r5, r1
 800a60a:	f7f5 ff6f 	bl	80004ec <__aeabi_dmul>
 800a60e:	a35c      	add	r3, pc, #368	; (adr r3, 800a780 <__ieee754_pow+0x9f8>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 fdb2 	bl	800017c <__aeabi_dsub>
 800a618:	4622      	mov	r2, r4
 800a61a:	462b      	mov	r3, r5
 800a61c:	f7f5 ff66 	bl	80004ec <__aeabi_dmul>
 800a620:	a359      	add	r3, pc, #356	; (adr r3, 800a788 <__ieee754_pow+0xa00>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 fdab 	bl	8000180 <__adddf3>
 800a62a:	4622      	mov	r2, r4
 800a62c:	462b      	mov	r3, r5
 800a62e:	f7f5 ff5d 	bl	80004ec <__aeabi_dmul>
 800a632:	a357      	add	r3, pc, #348	; (adr r3, 800a790 <__ieee754_pow+0xa08>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f7f5 fda0 	bl	800017c <__aeabi_dsub>
 800a63c:	4622      	mov	r2, r4
 800a63e:	462b      	mov	r3, r5
 800a640:	f7f5 ff54 	bl	80004ec <__aeabi_dmul>
 800a644:	a354      	add	r3, pc, #336	; (adr r3, 800a798 <__ieee754_pow+0xa10>)
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	f7f5 fd99 	bl	8000180 <__adddf3>
 800a64e:	4622      	mov	r2, r4
 800a650:	462b      	mov	r3, r5
 800a652:	f7f5 ff4b 	bl	80004ec <__aeabi_dmul>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 fd8d 	bl	800017c <__aeabi_dsub>
 800a662:	4604      	mov	r4, r0
 800a664:	460d      	mov	r5, r1
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 ff3d 	bl	80004ec <__aeabi_dmul>
 800a672:	2200      	movs	r2, #0
 800a674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a67c:	4620      	mov	r0, r4
 800a67e:	4629      	mov	r1, r5
 800a680:	f7f5 fd7c 	bl	800017c <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68c:	f7f6 f858 	bl	8000740 <__aeabi_ddiv>
 800a690:	4632      	mov	r2, r6
 800a692:	4604      	mov	r4, r0
 800a694:	460d      	mov	r5, r1
 800a696:	463b      	mov	r3, r7
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f5 ff26 	bl	80004ec <__aeabi_dmul>
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	f7f5 fd6c 	bl	8000180 <__adddf3>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 fd64 	bl	800017c <__aeabi_dsub>
 800a6b4:	4642      	mov	r2, r8
 800a6b6:	464b      	mov	r3, r9
 800a6b8:	f7f5 fd60 	bl	800017c <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	4939      	ldr	r1, [pc, #228]	; (800a7a8 <__ieee754_pow+0xa20>)
 800a6c4:	f7f5 fd5a 	bl	800017c <__aeabi_dsub>
 800a6c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a6cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a6d0:	da29      	bge.n	800a726 <__ieee754_pow+0x99e>
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	f000 f874 	bl	800a7c0 <scalbn>
 800a6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6dc:	f7ff bbfd 	b.w	8009eda <__ieee754_pow+0x152>
 800a6e0:	4b32      	ldr	r3, [pc, #200]	; (800a7ac <__ieee754_pow+0xa24>)
 800a6e2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a6e6:	429f      	cmp	r7, r3
 800a6e8:	f77f af14 	ble.w	800a514 <__ieee754_pow+0x78c>
 800a6ec:	4b30      	ldr	r3, [pc, #192]	; (800a7b0 <__ieee754_pow+0xa28>)
 800a6ee:	440b      	add	r3, r1
 800a6f0:	4303      	orrs	r3, r0
 800a6f2:	d009      	beq.n	800a708 <__ieee754_pow+0x980>
 800a6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f7f6 f968 	bl	80009d0 <__aeabi_dcmplt>
 800a700:	3800      	subs	r0, #0
 800a702:	bf18      	it	ne
 800a704:	2001      	movne	r0, #1
 800a706:	e452      	b.n	8009fae <__ieee754_pow+0x226>
 800a708:	4622      	mov	r2, r4
 800a70a:	462b      	mov	r3, r5
 800a70c:	f7f5 fd36 	bl	800017c <__aeabi_dsub>
 800a710:	4642      	mov	r2, r8
 800a712:	464b      	mov	r3, r9
 800a714:	f7f6 f970 	bl	80009f8 <__aeabi_dcmpge>
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f aefb 	beq.w	800a514 <__ieee754_pow+0x78c>
 800a71e:	e7e9      	b.n	800a6f4 <__ieee754_pow+0x96c>
 800a720:	f04f 0a00 	mov.w	sl, #0
 800a724:	e720      	b.n	800a568 <__ieee754_pow+0x7e0>
 800a726:	4621      	mov	r1, r4
 800a728:	e7d6      	b.n	800a6d8 <__ieee754_pow+0x950>
 800a72a:	f04f 0b00 	mov.w	fp, #0
 800a72e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a7a8 <__ieee754_pow+0xa20>
 800a732:	f7ff bbb9 	b.w	8009ea8 <__ieee754_pow+0x120>
 800a736:	f04f 0b00 	mov.w	fp, #0
 800a73a:	f04f 0c00 	mov.w	ip, #0
 800a73e:	f7ff bbb3 	b.w	8009ea8 <__ieee754_pow+0x120>
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7ff bb3c 	b.w	8009dc2 <__ieee754_pow+0x3a>
 800a74a:	9200      	str	r2, [sp, #0]
 800a74c:	f7ff bb88 	b.w	8009e60 <__ieee754_pow+0xd8>
 800a750:	2300      	movs	r3, #0
 800a752:	f7ff bb72 	b.w	8009e3a <__ieee754_pow+0xb2>
 800a756:	bf00      	nop
 800a758:	652b82fe 	.word	0x652b82fe
 800a75c:	3c971547 	.word	0x3c971547
 800a760:	00000000 	.word	0x00000000
 800a764:	3fe62e43 	.word	0x3fe62e43
 800a768:	fefa39ef 	.word	0xfefa39ef
 800a76c:	3fe62e42 	.word	0x3fe62e42
 800a770:	0ca86c39 	.word	0x0ca86c39
 800a774:	be205c61 	.word	0xbe205c61
 800a778:	72bea4d0 	.word	0x72bea4d0
 800a77c:	3e663769 	.word	0x3e663769
 800a780:	c5d26bf1 	.word	0xc5d26bf1
 800a784:	3ebbbd41 	.word	0x3ebbbd41
 800a788:	af25de2c 	.word	0xaf25de2c
 800a78c:	3f11566a 	.word	0x3f11566a
 800a790:	16bebd93 	.word	0x16bebd93
 800a794:	3f66c16c 	.word	0x3f66c16c
 800a798:	5555553e 	.word	0x5555553e
 800a79c:	3fc55555 	.word	0x3fc55555
 800a7a0:	3fe00000 	.word	0x3fe00000
 800a7a4:	fff00000 	.word	0xfff00000
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	4090cbff 	.word	0x4090cbff
 800a7b0:	3f6f3400 	.word	0x3f6f3400

0800a7b4 <fabs>:
 800a7b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4770      	bx	lr
 800a7bc:	0000      	movs	r0, r0
	...

0800a7c0 <scalbn>:
 800a7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c2:	4616      	mov	r6, r2
 800a7c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	b992      	cbnz	r2, 800a7f6 <scalbn+0x36>
 800a7d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7d4:	4303      	orrs	r3, r0
 800a7d6:	d03c      	beq.n	800a852 <scalbn+0x92>
 800a7d8:	4b31      	ldr	r3, [pc, #196]	; (800a8a0 <scalbn+0xe0>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f7f5 fe86 	bl	80004ec <__aeabi_dmul>
 800a7e0:	4b30      	ldr	r3, [pc, #192]	; (800a8a4 <scalbn+0xe4>)
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	429e      	cmp	r6, r3
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	da0f      	bge.n	800a80a <scalbn+0x4a>
 800a7ea:	a329      	add	r3, pc, #164	; (adr r3, 800a890 <scalbn+0xd0>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fe7c 	bl	80004ec <__aeabi_dmul>
 800a7f4:	e006      	b.n	800a804 <scalbn+0x44>
 800a7f6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a7fa:	42ba      	cmp	r2, r7
 800a7fc:	d109      	bne.n	800a812 <scalbn+0x52>
 800a7fe:	4602      	mov	r2, r0
 800a800:	f7f5 fcbe 	bl	8000180 <__adddf3>
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	e023      	b.n	800a852 <scalbn+0x92>
 800a80a:	460b      	mov	r3, r1
 800a80c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a810:	3a36      	subs	r2, #54	; 0x36
 800a812:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a816:	428e      	cmp	r6, r1
 800a818:	dd0e      	ble.n	800a838 <scalbn+0x78>
 800a81a:	a31f      	add	r3, pc, #124	; (adr r3, 800a898 <scalbn+0xd8>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a824:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a828:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a82c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a830:	481d      	ldr	r0, [pc, #116]	; (800a8a8 <scalbn+0xe8>)
 800a832:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a836:	e7db      	b.n	800a7f0 <scalbn+0x30>
 800a838:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a83c:	4432      	add	r2, r6
 800a83e:	428a      	cmp	r2, r1
 800a840:	dceb      	bgt.n	800a81a <scalbn+0x5a>
 800a842:	2a00      	cmp	r2, #0
 800a844:	dd08      	ble.n	800a858 <scalbn+0x98>
 800a846:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a84a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a84e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a858:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a85c:	da0c      	bge.n	800a878 <scalbn+0xb8>
 800a85e:	a30c      	add	r3, pc, #48	; (adr r3, 800a890 <scalbn+0xd0>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a868:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a86c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a870:	480e      	ldr	r0, [pc, #56]	; (800a8ac <scalbn+0xec>)
 800a872:	f041 011f 	orr.w	r1, r1, #31
 800a876:	e7bb      	b.n	800a7f0 <scalbn+0x30>
 800a878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a87c:	3236      	adds	r2, #54	; 0x36
 800a87e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a886:	4620      	mov	r0, r4
 800a888:	4629      	mov	r1, r5
 800a88a:	2200      	movs	r2, #0
 800a88c:	4b08      	ldr	r3, [pc, #32]	; (800a8b0 <scalbn+0xf0>)
 800a88e:	e7af      	b.n	800a7f0 <scalbn+0x30>
 800a890:	c2f8f359 	.word	0xc2f8f359
 800a894:	01a56e1f 	.word	0x01a56e1f
 800a898:	8800759c 	.word	0x8800759c
 800a89c:	7e37e43c 	.word	0x7e37e43c
 800a8a0:	43500000 	.word	0x43500000
 800a8a4:	ffff3cb0 	.word	0xffff3cb0
 800a8a8:	8800759c 	.word	0x8800759c
 800a8ac:	c2f8f359 	.word	0xc2f8f359
 800a8b0:	3c900000 	.word	0x3c900000

0800a8b4 <with_errno>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	4616      	mov	r6, r2
 800a8bc:	f7fd f960 	bl	8007b80 <__errno>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	6006      	str	r6, [r0, #0]
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}

0800a8c8 <xflow>:
 800a8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ca:	4615      	mov	r5, r2
 800a8cc:	461c      	mov	r4, r3
 800a8ce:	b180      	cbz	r0, 800a8f2 <xflow+0x2a>
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a8d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8de:	4628      	mov	r0, r5
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	f7f5 fe03 	bl	80004ec <__aeabi_dmul>
 800a8e6:	2222      	movs	r2, #34	; 0x22
 800a8e8:	b003      	add	sp, #12
 800a8ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8ee:	f7ff bfe1 	b.w	800a8b4 <with_errno>
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	e7ee      	b.n	800a8d6 <xflow+0xe>

0800a8f8 <__math_uflow>:
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8fe:	f7ff bfe3 	b.w	800a8c8 <xflow>

0800a902 <__math_oflow>:
 800a902:	2200      	movs	r2, #0
 800a904:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a908:	f7ff bfde 	b.w	800a8c8 <xflow>

0800a90c <__ieee754_sqrt>:
 800a90c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800aab0 <__ieee754_sqrt+0x1a4>
 800a910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	ea3c 0c01 	bics.w	ip, ip, r1
 800a918:	460b      	mov	r3, r1
 800a91a:	4606      	mov	r6, r0
 800a91c:	460d      	mov	r5, r1
 800a91e:	460a      	mov	r2, r1
 800a920:	4604      	mov	r4, r0
 800a922:	d10e      	bne.n	800a942 <__ieee754_sqrt+0x36>
 800a924:	4602      	mov	r2, r0
 800a926:	f7f5 fde1 	bl	80004ec <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4630      	mov	r0, r6
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fc25 	bl	8000180 <__adddf3>
 800a936:	4606      	mov	r6, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	4630      	mov	r0, r6
 800a93c:	4629      	mov	r1, r5
 800a93e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a942:	2900      	cmp	r1, #0
 800a944:	dc0d      	bgt.n	800a962 <__ieee754_sqrt+0x56>
 800a946:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a94a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a94e:	d0f4      	beq.n	800a93a <__ieee754_sqrt+0x2e>
 800a950:	b139      	cbz	r1, 800a962 <__ieee754_sqrt+0x56>
 800a952:	4602      	mov	r2, r0
 800a954:	f7f5 fc12 	bl	800017c <__aeabi_dsub>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	f7f5 fef0 	bl	8000740 <__aeabi_ddiv>
 800a960:	e7e9      	b.n	800a936 <__ieee754_sqrt+0x2a>
 800a962:	1512      	asrs	r2, r2, #20
 800a964:	f000 8089 	beq.w	800aa7a <__ieee754_sqrt+0x16e>
 800a968:	2500      	movs	r5, #0
 800a96a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a96e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a976:	07d2      	lsls	r2, r2, #31
 800a978:	bf5c      	itt	pl
 800a97a:	005b      	lslpl	r3, r3, #1
 800a97c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a984:	bf58      	it	pl
 800a986:	0064      	lslpl	r4, r4, #1
 800a988:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a98c:	0062      	lsls	r2, r4, #1
 800a98e:	2016      	movs	r0, #22
 800a990:	4629      	mov	r1, r5
 800a992:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a996:	1076      	asrs	r6, r6, #1
 800a998:	190f      	adds	r7, r1, r4
 800a99a:	429f      	cmp	r7, r3
 800a99c:	bfde      	ittt	le
 800a99e:	1bdb      	suble	r3, r3, r7
 800a9a0:	1939      	addle	r1, r7, r4
 800a9a2:	192d      	addle	r5, r5, r4
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	3801      	subs	r0, #1
 800a9a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9ac:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a9b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9b4:	d1f0      	bne.n	800a998 <__ieee754_sqrt+0x8c>
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	2720      	movs	r7, #32
 800a9ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a9be:	428b      	cmp	r3, r1
 800a9c0:	eb0c 0e00 	add.w	lr, ip, r0
 800a9c4:	dc02      	bgt.n	800a9cc <__ieee754_sqrt+0xc0>
 800a9c6:	d113      	bne.n	800a9f0 <__ieee754_sqrt+0xe4>
 800a9c8:	4596      	cmp	lr, r2
 800a9ca:	d811      	bhi.n	800a9f0 <__ieee754_sqrt+0xe4>
 800a9cc:	f1be 0f00 	cmp.w	lr, #0
 800a9d0:	eb0e 000c 	add.w	r0, lr, ip
 800a9d4:	da56      	bge.n	800aa84 <__ieee754_sqrt+0x178>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	db54      	blt.n	800aa84 <__ieee754_sqrt+0x178>
 800a9da:	f101 0801 	add.w	r8, r1, #1
 800a9de:	1a5b      	subs	r3, r3, r1
 800a9e0:	4641      	mov	r1, r8
 800a9e2:	4596      	cmp	lr, r2
 800a9e4:	bf88      	it	hi
 800a9e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a9ea:	eba2 020e 	sub.w	r2, r2, lr
 800a9ee:	4464      	add	r4, ip
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	3f01      	subs	r7, #1
 800a9f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a9fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aa00:	d1dd      	bne.n	800a9be <__ieee754_sqrt+0xb2>
 800aa02:	4313      	orrs	r3, r2
 800aa04:	d01b      	beq.n	800aa3e <__ieee754_sqrt+0x132>
 800aa06:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aab4 <__ieee754_sqrt+0x1a8>
 800aa0a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aab8 <__ieee754_sqrt+0x1ac>
 800aa0e:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa12:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa16:	f7f5 fbb1 	bl	800017c <__aeabi_dsub>
 800aa1a:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4640      	mov	r0, r8
 800aa24:	4649      	mov	r1, r9
 800aa26:	f7f5 ffdd 	bl	80009e4 <__aeabi_dcmple>
 800aa2a:	b140      	cbz	r0, 800aa3e <__ieee754_sqrt+0x132>
 800aa2c:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa30:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa34:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aa38:	d126      	bne.n	800aa88 <__ieee754_sqrt+0x17c>
 800aa3a:	463c      	mov	r4, r7
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	106b      	asrs	r3, r5, #1
 800aa40:	0864      	lsrs	r4, r4, #1
 800aa42:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa46:	07ea      	lsls	r2, r5, #31
 800aa48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa4c:	bf48      	it	mi
 800aa4e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800aa52:	4620      	mov	r0, r4
 800aa54:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800aa58:	e76d      	b.n	800a936 <__ieee754_sqrt+0x2a>
 800aa5a:	0ae3      	lsrs	r3, r4, #11
 800aa5c:	3915      	subs	r1, #21
 800aa5e:	0564      	lsls	r4, r4, #21
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0fa      	beq.n	800aa5a <__ieee754_sqrt+0x14e>
 800aa64:	02d8      	lsls	r0, r3, #11
 800aa66:	d50a      	bpl.n	800aa7e <__ieee754_sqrt+0x172>
 800aa68:	f1c2 0020 	rsb	r0, r2, #32
 800aa6c:	fa24 f000 	lsr.w	r0, r4, r0
 800aa70:	1e55      	subs	r5, r2, #1
 800aa72:	4094      	lsls	r4, r2
 800aa74:	4303      	orrs	r3, r0
 800aa76:	1b4a      	subs	r2, r1, r5
 800aa78:	e776      	b.n	800a968 <__ieee754_sqrt+0x5c>
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	e7f0      	b.n	800aa60 <__ieee754_sqrt+0x154>
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	3201      	adds	r2, #1
 800aa82:	e7ef      	b.n	800aa64 <__ieee754_sqrt+0x158>
 800aa84:	4688      	mov	r8, r1
 800aa86:	e7aa      	b.n	800a9de <__ieee754_sqrt+0xd2>
 800aa88:	f7f5 fb7a 	bl	8000180 <__adddf3>
 800aa8c:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 ff9a 	bl	80009d0 <__aeabi_dcmplt>
 800aa9c:	b120      	cbz	r0, 800aaa8 <__ieee754_sqrt+0x19c>
 800aa9e:	1ca1      	adds	r1, r4, #2
 800aaa0:	bf08      	it	eq
 800aaa2:	3501      	addeq	r5, #1
 800aaa4:	3402      	adds	r4, #2
 800aaa6:	e7ca      	b.n	800aa3e <__ieee754_sqrt+0x132>
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	f024 0401 	bic.w	r4, r4, #1
 800aaae:	e7c6      	b.n	800aa3e <__ieee754_sqrt+0x132>
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	200001e0 	.word	0x200001e0
 800aab8:	200001e8 	.word	0x200001e8

0800aabc <_init>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr

0800aac8 <_fini>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr
