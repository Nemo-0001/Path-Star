
Path_Star.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a94c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800aa60  0800aa60  0001aa60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af68  0800af68  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800af68  0800af68  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af68  0800af68  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800af70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  200001f0  0800b160  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  0800b160  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102b3  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e99  00000000  00000000  0003050f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b84  00000000  00000000  000342b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa8a  00000000  00000000  00034e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153a3  00000000  00000000  0004f8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d5f0  00000000  00000000  00064c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000511c  00000000  00000000  000f225c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f7378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa44 	.word	0x0800aa44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800aa44 	.word	0x0800aa44

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__gesf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__lesf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpsf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpsf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b66:	d011      	beq.n	8000b8c <__cmpsf2+0x40>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b6e:	bf18      	it	ne
 8000b70:	ea90 0f01 	teqne	r0, r1
 8000b74:	bf58      	it	pl
 8000b76:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b7a:	bf88      	it	hi
 8000b7c:	17c8      	asrhi	r0, r1, #31
 8000b7e:	bf38      	it	cc
 8000b80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b84:	bf18      	it	ne
 8000b86:	f040 0001 	orrne.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	d102      	bne.n	8000b98 <__cmpsf2+0x4c>
 8000b92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b96:	d105      	bne.n	8000ba4 <__cmpsf2+0x58>
 8000b98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b9c:	d1e4      	bne.n	8000b68 <__cmpsf2+0x1c>
 8000b9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ba2:	d0e1      	beq.n	8000b68 <__cmpsf2+0x1c>
 8000ba4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_cfrcmple>:
 8000bac:	4684      	mov	ip, r0
 8000bae:	4608      	mov	r0, r1
 8000bb0:	4661      	mov	r1, ip
 8000bb2:	e7ff      	b.n	8000bb4 <__aeabi_cfcmpeq>

08000bb4 <__aeabi_cfcmpeq>:
 8000bb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bb6:	f7ff ffc9 	bl	8000b4c <__cmpsf2>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	bf48      	it	mi
 8000bbe:	f110 0f00 	cmnmi.w	r0, #0
 8000bc2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bc4 <__aeabi_fcmpeq>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff fff4 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000bcc:	bf0c      	ite	eq
 8000bce:	2001      	moveq	r0, #1
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmplt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffea 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmple>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffe0 	bl	8000bb4 <__aeabi_cfcmpeq>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpge>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffd2 	bl	8000bac <__aeabi_cfrcmple>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_fcmpgt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffc8 	bl	8000bac <__aeabi_cfrcmple>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3c:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L298_IN1_Pin|L298_IN2_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f248 0103 	movw	r1, #32771	; 0x8003
 8000c8a:	481d      	ldr	r0, [pc, #116]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000c8c:	f001 fe43 	bl	8002916 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger1_GPIO_Port, Trigger1_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c96:	481b      	ldr	r0, [pc, #108]	; (8000d04 <MX_GPIO_Init+0xdc>)
 8000c98:	f001 fe3d 	bl	8002916 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = L298_IN1_Pin|L298_IN2_Pin|Buzzer_Pin;
 8000c9c:	f248 0303 	movw	r3, #32771	; 0x8003
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cb6:	f001 fc93 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = But2_Pin|But3_Pin|But4_Pin|But5_Pin
 8000cba:	f647 7330 	movw	r3, #32560	; 0x7f30
 8000cbe:	613b      	str	r3, [r7, #16]
                          |But6_Pin|Store_But_Pin|Send_But_Pin|PIR_Pin
                          |But1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cd0:	f001 fc86 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger1_Pin;
 8000cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xdc>)
 8000cee:	f001 fc77 	bl	80025e0 <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	40010800 	.word	0x40010800

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f001 fa21 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f82b 	bl	8000d6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Sys_Init();
 8000d16:	f000 f86f 	bl	8000df8 <Sys_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f7ff ff85 	bl	8000c28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d1e:	f001 f90b 	bl	8001f38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d22:	f001 f933 	bl	8001f8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Check_Password();  //Stuck here until entering correct password
 8000d26:	f000 fb37 	bl	8001398 <Check_Password>

  UART_SendString(&huart1, "UART is ready for sending & receiving...\r\n");
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <main+0x5c>)
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <main+0x60>)
 8000d2e:	f000 fc97 	bl	8001660 <UART_SendString>
  HAL_Delay(50);
 8000d32:	2032      	movs	r0, #50	; 0x32
 8000d34:	f001 fa70 	bl	8002218 <HAL_Delay>

  Ringbuf_init();
 8000d38:	f000 feee 	bl	8001b18 <Ringbuf_init>
  HAL_Delay (100);
 8000d3c:	2064      	movs	r0, #100	; 0x64
 8000d3e:	f001 fa6b 	bl	8002218 <HAL_Delay>

  /*Local variables begin*/
  float Distance1 = 0.0;
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  /*Local variables end*/

  UART_Receiving_IT_Init();
 8000d48:	f000 fc78 	bl	800163c <UART_Receiving_IT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f005 fa37 	bl	80061c0 <HCSR04_Read>
 8000d52:	6078      	str	r0, [r7, #4]

	Ultraonic_Response(Distance1);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f8a7 	bl	8000ea8 <Ultraonic_Response>

	PIR_Response();
 8000d5a:	f000 f88d 	bl	8000e78 <PIR_Response>

	Send_Braille();
 8000d5e:	f000 faf1 	bl	8001344 <Send_Braille>
	Distance1 = HCSR04_Read(HCSR04_SENSOR1);
 8000d62:	e7f3      	b.n	8000d4c <main+0x44>
 8000d64:	0800aa60 	.word	0x0800aa60
 8000d68:	200008c4 	.word	0x200008c4

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b090      	sub	sp, #64	; 0x40
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fe71 	bl	8007a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000daa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fdc7 	bl	8002948 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dc0:	f000 fcc0 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 f834 	bl	8002e4c <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dea:	f000 fcab 	bl	8001744 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <Sys_Init>:

/* USER CODE BEGIN 4 */
static void Sys_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HCSR04_Init(HCSR04_SENSOR1, &htim4);
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <Sys_Init+0x24>)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f004 fd94 	bl	800592c <HCSR04_Init>
    DC_MOTOR_Init(DC_MOTOR1);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f004 fafb 	bl	8005400 <DC_MOTOR_Init>
    DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MIN_SPEED);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f004 fc96 	bl	8005740 <DC_MOTOR_Start>
    Buzzer_Init();
 8000e14:	f004 fad0 	bl	80053b8 <Buzzer_Init>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000020c 	.word	0x2000020c

08000e20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_IC_ISR(htim);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f004 ff81 	bl	8005d30 <HCSR04_TMR_IC_ISR>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	HCSR04_TMR_OVF_ISR(htim);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f004 ff3a 	bl	8005cb8 <HCSR04_TMR_OVF_ISR>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SysTick_CallBack>:

void SysTick_CallBack(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	TRIG_Ticks++;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <SysTick_CallBack+0x28>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SysTick_CallBack+0x28>)
 8000e5a:	801a      	strh	r2, [r3, #0]

    if(TRIG_Ticks >= 10) // Each 10msec
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_CallBack+0x28>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d905      	bls.n	8000e70 <SysTick_CallBack+0x24>
    {
    	HCSR04_Trigger(HCSR04_SENSOR1);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f005 f9c1 	bl	80061ec <HCSR04_Trigger>
    	TRIG_Ticks = 0;
 8000e6a:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <SysTick_CallBack+0x28>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
    }
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000254 	.word	0x20000254

08000e78 <PIR_Response>:


void PIR_Response(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin) == GPIO_PIN_SET) {
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <PIR_Response+0x2c>)
 8000e82:	f001 fd31 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <PIR_Response+0x22>
		DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8000e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e90:	2101      	movs	r1, #1
 8000e92:	2000      	movs	r0, #0
 8000e94:	f004 fc54 	bl	8005740 <DC_MOTOR_Start>
	} else{
		DC_MOTOR_Stop(DC_MOTOR1);
	}
}
 8000e98:	e002      	b.n	8000ea0 <PIR_Response+0x28>
		DC_MOTOR_Stop(DC_MOTOR1);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f004 fce0 	bl	8005860 <DC_MOTOR_Stop>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <Ultraonic_Response>:

void Ultraonic_Response(float distance1){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if(distance1 < THRESHOLD_DISTANCE){
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <Ultraonic_Response+0x3c>)
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fe90 	bl	8000bd8 <__aeabi_fcmplt>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <Ultraonic_Response+0x28>
		DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 8000ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f004 fc3b 	bl	8005740 <DC_MOTOR_Start>
		Buzzer_ON();
 8000eca:	f004 fa81 	bl	80053d0 <Buzzer_ON>
	} else{
		DC_MOTOR_Stop(DC_MOTOR1);
		Buzzer_OFF();
	}
}
 8000ece:	e004      	b.n	8000eda <Ultraonic_Response+0x32>
		DC_MOTOR_Stop(DC_MOTOR1);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f004 fcc5 	bl	8005860 <DC_MOTOR_Stop>
		Buzzer_OFF();
 8000ed6:	f004 fa87 	bl	80053e8 <Buzzer_OFF>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	42480000 	.word	0x42480000

08000ee8 <Read_Buttons>:


void Read_Buttons(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(But1_GPIO_Port, But1_Pin) == GPIO_PIN_SET) {
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	4847      	ldr	r0, [pc, #284]	; (8001010 <Read_Buttons+0x128>)
 8000ef2:	f001 fcf9 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10f      	bne.n	8000f1c <Read_Buttons+0x34>
    	braillePattern |= (1 << 5);
 8000efc:	4b45      	ldr	r3, [pc, #276]	; (8001014 <Read_Buttons+0x12c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <Read_Buttons+0x12c>)
 8000f08:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But1_Pin) == GPIO_PIN_SET);
 8000f0a:	bf00      	nop
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	483f      	ldr	r0, [pc, #252]	; (8001010 <Read_Buttons+0x128>)
 8000f12:	f001 fce9 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d0f7      	beq.n	8000f0c <Read_Buttons+0x24>
    }
    if (HAL_GPIO_ReadPin(But2_GPIO_Port, But2_Pin) == GPIO_PIN_SET) {
 8000f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f20:	483b      	ldr	r0, [pc, #236]	; (8001010 <Read_Buttons+0x128>)
 8000f22:	f001 fce1 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10f      	bne.n	8000f4c <Read_Buttons+0x64>
    	braillePattern |= (1 << 4);
 8000f2c:	4b39      	ldr	r3, [pc, #228]	; (8001014 <Read_Buttons+0x12c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <Read_Buttons+0x12c>)
 8000f38:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But2_Pin) == GPIO_PIN_SET);
 8000f3a:	bf00      	nop
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4833      	ldr	r0, [pc, #204]	; (8001010 <Read_Buttons+0x128>)
 8000f42:	f001 fcd1 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d0f7      	beq.n	8000f3c <Read_Buttons+0x54>
    }
    if (HAL_GPIO_ReadPin(But3_GPIO_Port, But3_Pin) == GPIO_PIN_SET) {
 8000f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f50:	482f      	ldr	r0, [pc, #188]	; (8001010 <Read_Buttons+0x128>)
 8000f52:	f001 fcc9 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d10f      	bne.n	8000f7c <Read_Buttons+0x94>
    	braillePattern |= (1 << 3);
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <Read_Buttons+0x12c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <Read_Buttons+0x12c>)
 8000f68:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But3_Pin) == GPIO_PIN_SET);
 8000f6a:	bf00      	nop
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	4827      	ldr	r0, [pc, #156]	; (8001010 <Read_Buttons+0x128>)
 8000f72:	f001 fcb9 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d0f7      	beq.n	8000f6c <Read_Buttons+0x84>
    }
    if (HAL_GPIO_ReadPin(But4_GPIO_Port, But4_Pin) == GPIO_PIN_SET) {
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <Read_Buttons+0x128>)
 8000f82:	f001 fcb1 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10f      	bne.n	8000fac <Read_Buttons+0xc4>
    	braillePattern |= (1 << 2);
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <Read_Buttons+0x12c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <Read_Buttons+0x12c>)
 8000f98:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But4_Pin) == GPIO_PIN_SET);
 8000f9a:	bf00      	nop
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <Read_Buttons+0x128>)
 8000fa2:	f001 fca1 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d0f7      	beq.n	8000f9c <Read_Buttons+0xb4>
    }
    if (HAL_GPIO_ReadPin(But5_GPIO_Port, But5_Pin) == GPIO_PIN_SET) {
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	4817      	ldr	r0, [pc, #92]	; (8001010 <Read_Buttons+0x128>)
 8000fb2:	f001 fc99 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d10f      	bne.n	8000fdc <Read_Buttons+0xf4>
    	braillePattern |= (1 << 1);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <Read_Buttons+0x12c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <Read_Buttons+0x12c>)
 8000fc8:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But5_Pin) == GPIO_PIN_SET);
 8000fca:	bf00      	nop
 8000fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <Read_Buttons+0x128>)
 8000fd2:	f001 fc89 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d0f7      	beq.n	8000fcc <Read_Buttons+0xe4>
    }
    if (HAL_GPIO_ReadPin(But6_GPIO_Port, But6_Pin) == GPIO_PIN_SET) {
 8000fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <Read_Buttons+0x128>)
 8000fe2:	f001 fc81 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10f      	bne.n	800100c <Read_Buttons+0x124>
    	braillePattern |= (1 << 0);
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Read_Buttons+0x12c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <Read_Buttons+0x12c>)
 8000ff8:	701a      	strb	r2, [r3, #0]
    	while (HAL_GPIO_ReadPin(But1_GPIO_Port, But6_Pin) == GPIO_PIN_SET);
 8000ffa:	bf00      	nop
 8000ffc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <Read_Buttons+0x128>)
 8001002:	f001 fc71 	bl	80028e8 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	d0f7      	beq.n	8000ffc <Read_Buttons+0x114>
    }
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010c00 	.word	0x40010c00
 8001014:	200004a2 	.word	0x200004a2

08001018 <Translate_Braille>:

char Translate_Braille(uint8_t braillePattern, bool *isNumber) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
	if (braillePattern == 0b001111){
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d104      	bne.n	8001034 <Translate_Braille+0x1c>
		*isNumber = true;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
		return '\0';
 8001030:	2300      	movs	r3, #0
 8001032:	e12a      	b.n	800128a <Translate_Braille+0x272>
	}

	if (*isNumber){
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d065      	beq.n	8001108 <Translate_Braille+0xf0>
		*isNumber = false;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
		switch (braillePattern) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3b14      	subs	r3, #20
 8001046:	2b22      	cmp	r3, #34	; 0x22
 8001048:	d85c      	bhi.n	8001104 <Translate_Braille+0xec>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <Translate_Braille+0x38>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	080010fd 	.word	0x080010fd
 8001054:	08001105 	.word	0x08001105
 8001058:	08001101 	.word	0x08001101
 800105c:	08001105 	.word	0x08001105
 8001060:	08001105 	.word	0x08001105
 8001064:	08001105 	.word	0x08001105
 8001068:	08001105 	.word	0x08001105
 800106c:	08001105 	.word	0x08001105
 8001070:	08001105 	.word	0x08001105
 8001074:	08001105 	.word	0x08001105
 8001078:	08001105 	.word	0x08001105
 800107c:	08001105 	.word	0x08001105
 8001080:	080010dd 	.word	0x080010dd
 8001084:	08001105 	.word	0x08001105
 8001088:	080010ed 	.word	0x080010ed
 800108c:	08001105 	.word	0x08001105
 8001090:	080010e5 	.word	0x080010e5
 8001094:	08001105 	.word	0x08001105
 8001098:	080010e9 	.word	0x080010e9
 800109c:	08001105 	.word	0x08001105
 80010a0:	08001105 	.word	0x08001105
 80010a4:	08001105 	.word	0x08001105
 80010a8:	08001105 	.word	0x08001105
 80010ac:	08001105 	.word	0x08001105
 80010b0:	08001105 	.word	0x08001105
 80010b4:	08001105 	.word	0x08001105
 80010b8:	08001105 	.word	0x08001105
 80010bc:	08001105 	.word	0x08001105
 80010c0:	080010e1 	.word	0x080010e1
 80010c4:	08001105 	.word	0x08001105
 80010c8:	080010f9 	.word	0x080010f9
 80010cc:	08001105 	.word	0x08001105
 80010d0:	080010f1 	.word	0x080010f1
 80010d4:	08001105 	.word	0x08001105
 80010d8:	080010f5 	.word	0x080010f5
			case 0b100000: return '1';
 80010dc:	2331      	movs	r3, #49	; 0x31
 80010de:	e0d4      	b.n	800128a <Translate_Braille+0x272>
			case 0b110000: return '2';
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	e0d2      	b.n	800128a <Translate_Braille+0x272>
			case 0b100100: return '3';
 80010e4:	2333      	movs	r3, #51	; 0x33
 80010e6:	e0d0      	b.n	800128a <Translate_Braille+0x272>
			case 0b100110: return '4';
 80010e8:	2334      	movs	r3, #52	; 0x34
 80010ea:	e0ce      	b.n	800128a <Translate_Braille+0x272>
			case 0b100010: return '5';
 80010ec:	2335      	movs	r3, #53	; 0x35
 80010ee:	e0cc      	b.n	800128a <Translate_Braille+0x272>
			case 0b110100: return '6';
 80010f0:	2336      	movs	r3, #54	; 0x36
 80010f2:	e0ca      	b.n	800128a <Translate_Braille+0x272>
			case 0b110110: return '7';
 80010f4:	2337      	movs	r3, #55	; 0x37
 80010f6:	e0c8      	b.n	800128a <Translate_Braille+0x272>
			case 0b110010: return '8';
 80010f8:	2338      	movs	r3, #56	; 0x38
 80010fa:	e0c6      	b.n	800128a <Translate_Braille+0x272>
			case 0b010100: return '9';
 80010fc:	2339      	movs	r3, #57	; 0x39
 80010fe:	e0c4      	b.n	800128a <Translate_Braille+0x272>
			case 0b010110: return '0';
 8001100:	2330      	movs	r3, #48	; 0x30
 8001102:	e0c2      	b.n	800128a <Translate_Braille+0x272>
			default: return '?';
 8001104:	233f      	movs	r3, #63	; 0x3f
 8001106:	e0c0      	b.n	800128a <Translate_Braille+0x272>
		}
	} else{
		switch (braillePattern) {
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b3e      	cmp	r3, #62	; 0x3e
 800110c:	f200 80bc 	bhi.w	8001288 <Translate_Braille+0x270>
 8001110:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <Translate_Braille+0x100>)
 8001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001116:	bf00      	nop
 8001118:	08001215 	.word	0x08001215
 800111c:	08001289 	.word	0x08001289
 8001120:	08001289 	.word	0x08001289
 8001124:	08001289 	.word	0x08001289
 8001128:	08001289 	.word	0x08001289
 800112c:	08001289 	.word	0x08001289
 8001130:	08001289 	.word	0x08001289
 8001134:	08001289 	.word	0x08001289
 8001138:	08001289 	.word	0x08001289
 800113c:	08001289 	.word	0x08001289
 8001140:	08001289 	.word	0x08001289
 8001144:	08001289 	.word	0x08001289
 8001148:	08001289 	.word	0x08001289
 800114c:	08001289 	.word	0x08001289
 8001150:	08001289 	.word	0x08001289
 8001154:	08001289 	.word	0x08001289
 8001158:	08001285 	.word	0x08001285
 800115c:	08001289 	.word	0x08001289
 8001160:	08001289 	.word	0x08001289
 8001164:	08001281 	.word	0x08001281
 8001168:	08001239 	.word	0x08001239
 800116c:	08001289 	.word	0x08001289
 8001170:	0800123d 	.word	0x0800123d
 8001174:	08001271 	.word	0x08001271
 8001178:	08001289 	.word	0x08001289
 800117c:	08001289 	.word	0x08001289
 8001180:	08001289 	.word	0x08001289
 8001184:	08001289 	.word	0x08001289
 8001188:	08001261 	.word	0x08001261
 800118c:	08001289 	.word	0x08001289
 8001190:	08001265 	.word	0x08001265
 8001194:	08001289 	.word	0x08001289
 8001198:	08001219 	.word	0x08001219
 800119c:	08001289 	.word	0x08001289
 80011a0:	08001229 	.word	0x08001229
 80011a4:	08001289 	.word	0x08001289
 80011a8:	08001221 	.word	0x08001221
 80011ac:	08001289 	.word	0x08001289
 80011b0:	08001225 	.word	0x08001225
 80011b4:	08001289 	.word	0x08001289
 80011b8:	08001241 	.word	0x08001241
 80011bc:	08001269 	.word	0x08001269
 80011c0:	08001251 	.word	0x08001251
 80011c4:	0800127d 	.word	0x0800127d
 80011c8:	08001249 	.word	0x08001249
 80011cc:	08001275 	.word	0x08001275
 80011d0:	0800124d 	.word	0x0800124d
 80011d4:	08001279 	.word	0x08001279
 80011d8:	0800121d 	.word	0x0800121d
 80011dc:	08001289 	.word	0x08001289
 80011e0:	08001235 	.word	0x08001235
 80011e4:	08001289 	.word	0x08001289
 80011e8:	0800122d 	.word	0x0800122d
 80011ec:	08001289 	.word	0x08001289
 80011f0:	08001231 	.word	0x08001231
 80011f4:	08001289 	.word	0x08001289
 80011f8:	08001245 	.word	0x08001245
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	0800125d 	.word	0x0800125d
 8001204:	08001289 	.word	0x08001289
 8001208:	08001255 	.word	0x08001255
 800120c:	08001289 	.word	0x08001289
 8001210:	08001259 	.word	0x08001259
			case 0b000000: return ' ';
 8001214:	2320      	movs	r3, #32
 8001216:	e038      	b.n	800128a <Translate_Braille+0x272>
			case 0b100000: return 'A';
 8001218:	2341      	movs	r3, #65	; 0x41
 800121a:	e036      	b.n	800128a <Translate_Braille+0x272>
			case 0b110000: return 'B';
 800121c:	2342      	movs	r3, #66	; 0x42
 800121e:	e034      	b.n	800128a <Translate_Braille+0x272>
			case 0b100100: return 'C';
 8001220:	2343      	movs	r3, #67	; 0x43
 8001222:	e032      	b.n	800128a <Translate_Braille+0x272>
			case 0b100110: return 'D';
 8001224:	2344      	movs	r3, #68	; 0x44
 8001226:	e030      	b.n	800128a <Translate_Braille+0x272>
			case 0b100010: return 'E';
 8001228:	2345      	movs	r3, #69	; 0x45
 800122a:	e02e      	b.n	800128a <Translate_Braille+0x272>
			case 0b110100: return 'F';
 800122c:	2346      	movs	r3, #70	; 0x46
 800122e:	e02c      	b.n	800128a <Translate_Braille+0x272>
			case 0b110110: return 'G';
 8001230:	2347      	movs	r3, #71	; 0x47
 8001232:	e02a      	b.n	800128a <Translate_Braille+0x272>
			case 0b110010: return 'H';
 8001234:	2348      	movs	r3, #72	; 0x48
 8001236:	e028      	b.n	800128a <Translate_Braille+0x272>
			case 0b010100: return 'I';
 8001238:	2349      	movs	r3, #73	; 0x49
 800123a:	e026      	b.n	800128a <Translate_Braille+0x272>
			case 0b010110: return 'J';
 800123c:	234a      	movs	r3, #74	; 0x4a
 800123e:	e024      	b.n	800128a <Translate_Braille+0x272>
			case 0b101000: return 'K';
 8001240:	234b      	movs	r3, #75	; 0x4b
 8001242:	e022      	b.n	800128a <Translate_Braille+0x272>
			case 0b111000: return 'L';
 8001244:	234c      	movs	r3, #76	; 0x4c
 8001246:	e020      	b.n	800128a <Translate_Braille+0x272>
			case 0b101100: return 'M';
 8001248:	234d      	movs	r3, #77	; 0x4d
 800124a:	e01e      	b.n	800128a <Translate_Braille+0x272>
			case 0b101110: return 'N';
 800124c:	234e      	movs	r3, #78	; 0x4e
 800124e:	e01c      	b.n	800128a <Translate_Braille+0x272>
			case 0b101010: return 'O';
 8001250:	234f      	movs	r3, #79	; 0x4f
 8001252:	e01a      	b.n	800128a <Translate_Braille+0x272>
			case 0b111100: return 'P';
 8001254:	2350      	movs	r3, #80	; 0x50
 8001256:	e018      	b.n	800128a <Translate_Braille+0x272>
			case 0b111110: return 'Q';
 8001258:	2351      	movs	r3, #81	; 0x51
 800125a:	e016      	b.n	800128a <Translate_Braille+0x272>
			case 0b111010: return 'R';
 800125c:	2352      	movs	r3, #82	; 0x52
 800125e:	e014      	b.n	800128a <Translate_Braille+0x272>
			case 0b011100: return 'S';
 8001260:	2353      	movs	r3, #83	; 0x53
 8001262:	e012      	b.n	800128a <Translate_Braille+0x272>
			case 0b011110: return 'T';
 8001264:	2354      	movs	r3, #84	; 0x54
 8001266:	e010      	b.n	800128a <Translate_Braille+0x272>
			case 0b101001: return 'U';
 8001268:	2355      	movs	r3, #85	; 0x55
 800126a:	e00e      	b.n	800128a <Translate_Braille+0x272>
			case 0b111001: return 'V';
 800126c:	2356      	movs	r3, #86	; 0x56
 800126e:	e00c      	b.n	800128a <Translate_Braille+0x272>
			case 0b010111: return 'W';
 8001270:	2357      	movs	r3, #87	; 0x57
 8001272:	e00a      	b.n	800128a <Translate_Braille+0x272>
			case 0b101101: return 'X';
 8001274:	2358      	movs	r3, #88	; 0x58
 8001276:	e008      	b.n	800128a <Translate_Braille+0x272>
			case 0b101111: return 'Y';
 8001278:	2359      	movs	r3, #89	; 0x59
 800127a:	e006      	b.n	800128a <Translate_Braille+0x272>
			case 0b101011: return 'Z';
 800127c:	235a      	movs	r3, #90	; 0x5a
 800127e:	e004      	b.n	800128a <Translate_Braille+0x272>
			case 0b010011: return '.';
 8001280:	232e      	movs	r3, #46	; 0x2e
 8001282:	e002      	b.n	800128a <Translate_Braille+0x272>
			case 0b010000: return ',';
 8001284:	232c      	movs	r3, #44	; 0x2c
 8001286:	e000      	b.n	800128a <Translate_Braille+0x272>
			default: return '?';
 8001288:	233f      	movs	r3, #63	; 0x3f
		}
	}
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Store_Character>:

void Store_Character(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	char currentChar = Translate_Braille(braillePattern, &Is_Num);
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <Store_Character+0x54>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4913      	ldr	r1, [pc, #76]	; (80012ec <Store_Character+0x58>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff feb9 	bl	8001018 <Translate_Braille>
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
    if ((currentChar != '\0') && (sentenceIndex < sizeof(sentenceBuffer) - 1)) {
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <Store_Character+0x44>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <Store_Character+0x5c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d00f      	beq.n	80012d8 <Store_Character+0x44>
        sentenceBuffer[sentenceIndex++] = currentChar;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <Store_Character+0x5c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	b2d1      	uxtb	r1, r2
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <Store_Character+0x5c>)
 80012c2:	7011      	strb	r1, [r2, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <Store_Character+0x60>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	5453      	strb	r3, [r2, r1]
        sentenceBuffer[sentenceIndex] = '\0';  // Null-terminate the string
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <Store_Character+0x5c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Store_Character+0x60>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	5499      	strb	r1, [r3, r2]
    }
    braillePattern = 0;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <Store_Character+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004a2 	.word	0x200004a2
 80012ec:	200004a1 	.word	0x200004a1
 80012f0:	200004a0 	.word	0x200004a0
 80012f4:	200003a0 	.word	0x200003a0

080012f8 <Send_Sentence>:

void Send_Sentence(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    // Implement sending the sentence via UART
	if((strcmp(sentenceBuffer, GPS_CODE)) == 0){
 80012fc:	490d      	ldr	r1, [pc, #52]	; (8001334 <Send_Sentence+0x3c>)
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <Send_Sentence+0x40>)
 8001300:	f7fe ff26 	bl	8000150 <strcmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <Send_Sentence+0x18>
		Send_GPS_Data();
 800130a:	f000 f89d 	bl	8001448 <Send_GPS_Data>
 800130e:	e008      	b.n	8001322 <Send_Sentence+0x2a>
	} else{
		HAL_UART_Transmit(&huart1, (uint8_t *)sentenceBuffer, sentenceIndex, HAL_MAX_DELAY);
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <Send_Sentence+0x44>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b29a      	uxth	r2, r3
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	4907      	ldr	r1, [pc, #28]	; (8001338 <Send_Sentence+0x40>)
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <Send_Sentence+0x48>)
 800131e:	f003 fa23 	bl	8004768 <HAL_UART_Transmit>
	}

    sentenceIndex = 0;  // Reset the buffer index for the next sentence
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <Send_Sentence+0x44>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    sentenceBuffer[0] = '\0';  // Clear the buffer
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <Send_Sentence+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800aa8c 	.word	0x0800aa8c
 8001338:	200003a0 	.word	0x200003a0
 800133c:	200004a0 	.word	0x200004a0
 8001340:	200008c4 	.word	0x200008c4

08001344 <Send_Braille>:

void Send_Braille(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	Read_Buttons();
 8001348:	f7ff fdce 	bl	8000ee8 <Read_Buttons>
	// Check if store char button is pressed (PB4)
	if (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET) {
 800134c:	2110      	movs	r1, #16
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <Send_Braille+0x50>)
 8001350:	f001 faca 	bl	80028e8 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d109      	bne.n	800136e <Send_Braille+0x2a>
		Store_Character();
 800135a:	f7ff ff9b 	bl	8001294 <Store_Character>
		//braillePattern = 0;  // Reset the pattern for next input
		while (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 800135e:	bf00      	nop
 8001360:	2110      	movs	r1, #16
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <Send_Braille+0x50>)
 8001364:	f001 fac0 	bl	80028e8 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d0f8      	beq.n	8001360 <Send_Braille+0x1c>
	}

	// Check if send button is pressed (PB2)
	if (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET) {
 800136e:	2120      	movs	r1, #32
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <Send_Braille+0x50>)
 8001372:	f001 fab9 	bl	80028e8 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d109      	bne.n	8001390 <Send_Braille+0x4c>
		Send_Sentence();
 800137c:	f7ff ffbc 	bl	80012f8 <Send_Sentence>
		while (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 8001380:	bf00      	nop
 8001382:	2120      	movs	r1, #32
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <Send_Braille+0x50>)
 8001386:	f001 faaf 	bl	80028e8 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d0f8      	beq.n	8001382 <Send_Braille+0x3e>
	}
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010c00 	.word	0x40010c00

08001398 <Check_Password>:


void Check_Password(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	while(1){
		Read_Buttons();
 800139c:	f7ff fda4 	bl	8000ee8 <Read_Buttons>
		// Check if store char button is pressed (PB4)
		if (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET) {
 80013a0:	2110      	movs	r1, #16
 80013a2:	4821      	ldr	r0, [pc, #132]	; (8001428 <Check_Password+0x90>)
 80013a4:	f001 faa0 	bl	80028e8 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d109      	bne.n	80013c2 <Check_Password+0x2a>
			Store_Character();
 80013ae:	f7ff ff71 	bl	8001294 <Store_Character>
			//braillePattern = 0;  // Reset the pattern for next input
			while (HAL_GPIO_ReadPin(Store_But_GPIO_Port, Store_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 80013b2:	bf00      	nop
 80013b4:	2110      	movs	r1, #16
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <Check_Password+0x90>)
 80013b8:	f001 fa96 	bl	80028e8 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d0f8      	beq.n	80013b4 <Check_Password+0x1c>
		}

		// Check if send button is pressed (PB2)
		if (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET) {
 80013c2:	2120      	movs	r1, #32
 80013c4:	4818      	ldr	r0, [pc, #96]	; (8001428 <Check_Password+0x90>)
 80013c6:	f001 fa8f 	bl	80028e8 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d1e5      	bne.n	800139c <Check_Password+0x4>
			if(strcmp(sentenceBuffer, PASSWORD) == 0){
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <Check_Password+0x94>)
 80013d2:	4817      	ldr	r0, [pc, #92]	; (8001430 <Check_Password+0x98>)
 80013d4:	f7fe febc 	bl	8000150 <strcmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10a      	bne.n	80013f4 <Check_Password+0x5c>
				UART_SendString(&huart1, "Welcome... \r\n");
 80013de:	4915      	ldr	r1, [pc, #84]	; (8001434 <Check_Password+0x9c>)
 80013e0:	4815      	ldr	r0, [pc, #84]	; (8001438 <Check_Password+0xa0>)
 80013e2:	f000 f93d 	bl	8001660 <UART_SendString>
				sentenceIndex = 0;  // Reset the buffer index for the next sentence
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <Check_Password+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
				sentenceBuffer[0] = '\0';  // Clear the buffer
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <Check_Password+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
				break;
 80013f2:	e016      	b.n	8001422 <Check_Password+0x8a>
			} else{
				UART_SendString(&huart1, "Wrong password..!! \r\n");
 80013f4:	4912      	ldr	r1, [pc, #72]	; (8001440 <Check_Password+0xa8>)
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <Check_Password+0xa0>)
 80013f8:	f000 f932 	bl	8001660 <UART_SendString>
				UART_SendString(&huart1, "Please try again \r\n");
 80013fc:	4911      	ldr	r1, [pc, #68]	; (8001444 <Check_Password+0xac>)
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <Check_Password+0xa0>)
 8001400:	f000 f92e 	bl	8001660 <UART_SendString>
				sentenceIndex = 0;  // Reset the buffer index for the next sentence
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <Check_Password+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
				sentenceBuffer[0] = '\0';  // Clear the buffer
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <Check_Password+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
			}

			while (HAL_GPIO_ReadPin(Send_But_GPIO_Port, Send_But_Pin) == GPIO_PIN_SET);  // Wait for button release
 8001410:	bf00      	nop
 8001412:	2120      	movs	r1, #32
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <Check_Password+0x90>)
 8001416:	f001 fa67 	bl	80028e8 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	d0f8      	beq.n	8001412 <Check_Password+0x7a>
		Read_Buttons();
 8001420:	e7bc      	b.n	800139c <Check_Password+0x4>
		}
	}
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010c00 	.word	0x40010c00
 800142c:	0800aa90 	.word	0x0800aa90
 8001430:	200003a0 	.word	0x200003a0
 8001434:	0800aa94 	.word	0x0800aa94
 8001438:	200008c4 	.word	0x200008c4
 800143c:	200004a0 	.word	0x200004a0
 8001440:	0800aaa4 	.word	0x0800aaa4
 8001444:	0800aabc 	.word	0x0800aabc

08001448 <Send_GPS_Data>:


void Send_GPS_Data(void){
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af06      	add	r7, sp, #24
	uint32_t Start_Time = HAL_GetTick();
 800144e:	f000 fed9 	bl	8002204 <HAL_GetTick>
 8001452:	6078      	str	r0, [r7, #4]
	while((HAL_GetTick() - Start_Time) < 200){
 8001454:	e0bf      	b.n	80015d6 <Send_GPS_Data+0x18e>
		if (Wait_for("GGA") == 1) {
 8001456:	4866      	ldr	r0, [pc, #408]	; (80015f0 <Send_GPS_Data+0x1a8>)
 8001458:	f000 fc88 	bl	8001d6c <Wait_for>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d115      	bne.n	800148e <Send_GPS_Data+0x46>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <Send_GPS_Data+0x1ac>)
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	601a      	str	r2, [r3, #0]
			Copy_upto("*", GGA);
 800146a:	4963      	ldr	r1, [pc, #396]	; (80015f8 <Send_GPS_Data+0x1b0>)
 800146c:	4863      	ldr	r0, [pc, #396]	; (80015fc <Send_GPS_Data+0x1b4>)
 800146e:	f000 fbfd 	bl	8001c6c <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0)
 8001472:	4963      	ldr	r1, [pc, #396]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001474:	4860      	ldr	r0, [pc, #384]	; (80015f8 <Send_GPS_Data+0x1b0>)
 8001476:	f004 ff0f 	bl	8006298 <decodeGGA>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <Send_GPS_Data+0x40>
				flagGGA = 2;  // 2 indicates the data is valid
 8001480:	4b60      	ldr	r3, [pc, #384]	; (8001604 <Send_GPS_Data+0x1bc>)
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e002      	b.n	800148e <Send_GPS_Data+0x46>
			else
				flagGGA = 1;  // 1 indicates the data is invalid
 8001488:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <Send_GPS_Data+0x1bc>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
		}

		if (Wait_for("RMC") == 1) {
 800148e:	485e      	ldr	r0, [pc, #376]	; (8001608 <Send_GPS_Data+0x1c0>)
 8001490:	f000 fc6c 	bl	8001d6c <Wait_for>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d115      	bne.n	80014c6 <Send_GPS_Data+0x7e>

			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 800149a:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <Send_GPS_Data+0x1ac>)
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	601a      	str	r2, [r3, #0]
			Copy_upto("*", RMC);
 80014a2:	495a      	ldr	r1, [pc, #360]	; (800160c <Send_GPS_Data+0x1c4>)
 80014a4:	4855      	ldr	r0, [pc, #340]	; (80015fc <Send_GPS_Data+0x1b4>)
 80014a6:	f000 fbe1 	bl	8001c6c <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0)
 80014aa:	4959      	ldr	r1, [pc, #356]	; (8001610 <Send_GPS_Data+0x1c8>)
 80014ac:	4857      	ldr	r0, [pc, #348]	; (800160c <Send_GPS_Data+0x1c4>)
 80014ae:	f005 fa91 	bl	80069d4 <decodeRMC>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <Send_GPS_Data+0x78>
				flagRMC = 2;  // 2 indicates the data is valid
 80014b8:	4b56      	ldr	r3, [pc, #344]	; (8001614 <Send_GPS_Data+0x1cc>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e002      	b.n	80014c6 <Send_GPS_Data+0x7e>
			else
				flagRMC = 1;  // 1 indicates the data is invalid
 80014c0:	4b54      	ldr	r3, [pc, #336]	; (8001614 <Send_GPS_Data+0x1cc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
		}

		if ((flagGGA == 2) | (flagRMC == 2)) {
 80014c6:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <Send_GPS_Data+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <Send_GPS_Data+0x1cc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <Send_GPS_Data+0x12c>
			sprintf(lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d",
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <Send_GPS_Data+0x1b8>)
 80014ec:	691c      	ldr	r4, [r3, #16]
 80014ee:	4b44      	ldr	r3, [pc, #272]	; (8001600 <Send_GPS_Data+0x1b8>)
 80014f0:	695d      	ldr	r5, [r3, #20]
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <Send_GPS_Data+0x1b8>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a42      	ldr	r2, [pc, #264]	; (8001600 <Send_GPS_Data+0x1b8>)
 80014f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014fa:	4941      	ldr	r1, [pc, #260]	; (8001600 <Send_GPS_Data+0x1b8>)
 80014fc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80014fe:	4840      	ldr	r0, [pc, #256]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001500:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001502:	9003      	str	r0, [sp, #12]
 8001504:	9102      	str	r1, [sp, #8]
 8001506:	9201      	str	r2, [sp, #4]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	462b      	mov	r3, r5
 800150c:	4622      	mov	r2, r4
 800150e:	4942      	ldr	r1, [pc, #264]	; (8001618 <Send_GPS_Data+0x1d0>)
 8001510:	4842      	ldr	r0, [pc, #264]	; (800161c <Send_GPS_Data+0x1d4>)
 8001512:	f006 fa43 	bl	800799c <siprintf>
					gpsData.ggastruct.tim.hour, gpsData.ggastruct.tim.min,
					gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day,
					gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
			UART_SendString(&huart2, lcdBuffer);
 8001516:	4941      	ldr	r1, [pc, #260]	; (800161c <Send_GPS_Data+0x1d4>)
 8001518:	4841      	ldr	r0, [pc, #260]	; (8001620 <Send_GPS_Data+0x1d8>)
 800151a:	f000 f8a1 	bl	8001660 <UART_SendString>
			UART_SendString(&huart2, "\r\n");
 800151e:	4941      	ldr	r1, [pc, #260]	; (8001624 <Send_GPS_Data+0x1dc>)
 8001520:	483f      	ldr	r0, [pc, #252]	; (8001620 <Send_GPS_Data+0x1d8>)
 8001522:	f000 f89d 	bl	8001660 <UART_SendString>
			memset(lcdBuffer, '\0', 50);
 8001526:	2232      	movs	r2, #50	; 0x32
 8001528:	2100      	movs	r1, #0
 800152a:	483c      	ldr	r0, [pc, #240]	; (800161c <Send_GPS_Data+0x1d4>)
 800152c:	f006 fa99 	bl	8007a62 <memset>
			sprintf(lcdBuffer, "%.2f%c, %.2f%c  ",
					gpsData.ggastruct.lcation.latitude,
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
			sprintf(lcdBuffer, "%.2f%c, %.2f%c  ",
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ff81 	bl	800043c <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
					gpsData.ggastruct.lcation.NS,
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001540:	791b      	ldrb	r3, [r3, #4]
			sprintf(lcdBuffer, "%.2f%c, %.2f%c  ",
 8001542:	461e      	mov	r6, r3
					gpsData.ggastruct.lcation.longitude,
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001546:	689b      	ldr	r3, [r3, #8]
			sprintf(lcdBuffer, "%.2f%c, %.2f%c  ",
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff77 	bl	800043c <__aeabi_f2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.EW);
 8001552:	492b      	ldr	r1, [pc, #172]	; (8001600 <Send_GPS_Data+0x1b8>)
 8001554:	7b09      	ldrb	r1, [r1, #12]
			sprintf(lcdBuffer, "%.2f%c, %.2f%c  ",
 8001556:	9104      	str	r1, [sp, #16]
 8001558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155c:	9600      	str	r6, [sp, #0]
 800155e:	4622      	mov	r2, r4
 8001560:	462b      	mov	r3, r5
 8001562:	4931      	ldr	r1, [pc, #196]	; (8001628 <Send_GPS_Data+0x1e0>)
 8001564:	482d      	ldr	r0, [pc, #180]	; (800161c <Send_GPS_Data+0x1d4>)
 8001566:	f006 fa19 	bl	800799c <siprintf>
			UART_SendString(&huart2, lcdBuffer);
 800156a:	492c      	ldr	r1, [pc, #176]	; (800161c <Send_GPS_Data+0x1d4>)
 800156c:	482c      	ldr	r0, [pc, #176]	; (8001620 <Send_GPS_Data+0x1d8>)
 800156e:	f000 f877 	bl	8001660 <UART_SendString>
 8001572:	e019      	b.n	80015a8 <Send_GPS_Data+0x160>
		}

		else if ((flagGGA == 1) | (flagRMC == 1)) {
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <Send_GPS_Data+0x1bc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <Send_GPS_Data+0x1cc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <Send_GPS_Data+0x160>
			UART_SendString(&huart2, "NO FIX YET \r\n");
 8001598:	4924      	ldr	r1, [pc, #144]	; (800162c <Send_GPS_Data+0x1e4>)
 800159a:	4821      	ldr	r0, [pc, #132]	; (8001620 <Send_GPS_Data+0x1d8>)
 800159c:	f000 f860 	bl	8001660 <UART_SendString>
			UART_SendString(&huart2, "Please wait \r\n");
 80015a0:	4923      	ldr	r1, [pc, #140]	; (8001630 <Send_GPS_Data+0x1e8>)
 80015a2:	481f      	ldr	r0, [pc, #124]	; (8001620 <Send_GPS_Data+0x1d8>)
 80015a4:	f000 f85c 	bl	8001660 <UART_SendString>
		}

		if (VCCTimeout <= 0) {
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <Send_GPS_Data+0x1ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dc12      	bgt.n	80015d6 <Send_GPS_Data+0x18e>
			VCCTimeout = 5000;  // Reset the timeout
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <Send_GPS_Data+0x1ac>)
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	601a      	str	r2, [r3, #0]

			//reset flags
			flagGGA = flagRMC = 0;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <Send_GPS_Data+0x1cc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <Send_GPS_Data+0x1cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <Send_GPS_Data+0x1bc>)
 80015c4:	6013      	str	r3, [r2, #0]

			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
			UART_SendString(&huart2, "VCC Issue \r\n");
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <Send_GPS_Data+0x1ec>)
 80015c8:	4815      	ldr	r0, [pc, #84]	; (8001620 <Send_GPS_Data+0x1d8>)
 80015ca:	f000 f849 	bl	8001660 <UART_SendString>
			UART_SendString(&huart2, "Check Connection \r\n");
 80015ce:	491a      	ldr	r1, [pc, #104]	; (8001638 <Send_GPS_Data+0x1f0>)
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <Send_GPS_Data+0x1d8>)
 80015d2:	f000 f845 	bl	8001660 <UART_SendString>
	while((HAL_GetTick() - Start_Time) < 200){
 80015d6:	f000 fe15 	bl	8002204 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2bc7      	cmp	r3, #199	; 0xc7
 80015e2:	f67f af38 	bls.w	8001456 <Send_GPS_Data+0xe>
		}
	}
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f0:	0800aad0 	.word	0x0800aad0
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000258 	.word	0x20000258
 80015fc:	0800aad4 	.word	0x0800aad4
 8001600:	20000320 	.word	0x20000320
 8001604:	20000364 	.word	0x20000364
 8001608:	0800aad8 	.word	0x0800aad8
 800160c:	200002bc 	.word	0x200002bc
 8001610:	2000034c 	.word	0x2000034c
 8001614:	20000368 	.word	0x20000368
 8001618:	0800aadc 	.word	0x0800aadc
 800161c:	2000036c 	.word	0x2000036c
 8001620:	2000090c 	.word	0x2000090c
 8001624:	0800aafc 	.word	0x0800aafc
 8001628:	0800ab00 	.word	0x0800ab00
 800162c:	0800ab14 	.word	0x0800ab14
 8001630:	0800ab24 	.word	0x0800ab24
 8001634:	0800ab34 	.word	0x0800ab34
 8001638:	0800ab44 	.word	0x0800ab44

0800163c <UART_Receiving_IT_Init>:


void UART_Receiving_IT_Init(void){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &RX_Data, 1) != HAL_OK) {
 8001640:	2201      	movs	r2, #1
 8001642:	4905      	ldr	r1, [pc, #20]	; (8001658 <UART_Receiving_IT_Init+0x1c>)
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <UART_Receiving_IT_Init+0x20>)
 8001646:	f003 f912 	bl	800486e <HAL_UART_Receive_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <UART_Receiving_IT_Init+0x18>
		  Error_Handler();
 8001650:	f000 f878 	bl	8001744 <Error_Handler>
	  }
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000256 	.word	0x20000256
 800165c:	200008c4 	.word	0x200008c4

08001660 <UART_SendString>:

//Function to send string over UART(Blocking mode)
void UART_SendString(UART_HandleTypeDef *huart, char *string){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	uint16_t length = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 800166e:	e002      	b.n	8001676 <UART_SendString+0x16>
		length++;
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	3301      	adds	r3, #1
 8001674:	81fb      	strh	r3, [r7, #14]
	while(string[length] != '\0'){
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f6      	bne.n	8001670 <UART_SendString+0x10>
	}

	HAL_UART_Transmit(huart, (uint8_t *)string, length, HAL_MAX_DELAY);
 8001682:	89fa      	ldrh	r2, [r7, #14]
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f003 f86c 	bl	8004768 <HAL_UART_Transmit>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_UART_RxCpltCallback>:
    sprintf(buffer, "%.2f", num);  // Convert float to string with 2 decimal places
    UART_SendString(huart, buffer);       // Send the string via UART
}

//Auto Called when receiving a new data over UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_UART_RxCpltCallback+0x94>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d13b      	bne.n	8001722 <HAL_UART_RxCpltCallback+0x8a>
		HAL_UART_Receive_IT(&huart1, &RX_Data, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	4920      	ldr	r1, [pc, #128]	; (8001730 <HAL_UART_RxCpltCallback+0x98>)
 80016ae:	4821      	ldr	r0, [pc, #132]	; (8001734 <HAL_UART_RxCpltCallback+0x9c>)
 80016b0:	f003 f8dd 	bl	800486e <HAL_UART_Receive_IT>
		if (ALARM_ON == RX_Data){
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_UART_RxCpltCallback+0x98>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b41      	cmp	r3, #65	; 0x41
 80016ba:	d132      	bne.n	8001722 <HAL_UART_RxCpltCallback+0x8a>
			DC_MOTOR_Start(DC_MOTOR1, DIR_CCW, MAX_SPEED);
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	2101      	movs	r1, #1
 80016c2:	2000      	movs	r0, #0
 80016c4:	f004 f83c 	bl	8005740 <DC_MOTOR_Start>
			Buzzer_ON();
 80016c8:	f003 fe82 	bl	80053d0 <Buzzer_ON>

			DELAY_MS(100);
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e01f      	b.n	8001712 <HAL_UART_RxCpltCallback+0x7a>
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_RxCpltCallback+0xa4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_UART_RxCpltCallback+0xa8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e8:	fb03 f202 	mul.w	r2, r3, r2
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_UART_RxCpltCallback+0xa4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4913      	ldr	r1, [pc, #76]	; (8001740 <HAL_UART_RxCpltCallback+0xa8>)
 80016f2:	fba1 1303 	umull	r1, r3, r1, r3
 80016f6:	0c9b      	lsrs	r3, r3, #18
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_UART_RxCpltCallback+0xa0>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f8      	bhi.n	80016fe <HAL_UART_RxCpltCallback+0x66>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b63      	cmp	r3, #99	; 0x63
 8001716:	d9dc      	bls.n	80016d2 <HAL_UART_RxCpltCallback+0x3a>
			DC_MOTOR_Stop(DC_MOTOR1);
 8001718:	2000      	movs	r0, #0
 800171a:	f004 f8a1 	bl	8005860 <DC_MOTOR_Stop>
			Buzzer_OFF();
 800171e:	f003 fe63 	bl	80053e8 <Buzzer_OFF>
    }

	if (huart->Instance == USART2) {
		//HAL_UART_Receive_IT(&huart2, &RX_Data, 1);
	}
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40013800 	.word	0x40013800
 8001730:	20000256 	.word	0x20000256
 8001734:	200008c4 	.word	0x200008c4
 8001738:	e000e010 	.word	0xe000e010
 800173c:	20000004 	.word	0x20000004
 8001740:	431bde83 	.word	0x431bde83

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(timeout >0)  timeout--;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <SysTick_Handler+0x3c>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <SysTick_Handler+0x1c>
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <SysTick_Handler+0x3c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <SysTick_Handler+0x3c>)
 8001812:	801a      	strh	r2, [r3, #0]
  if (VCCTimeout>0) VCCTimeout--;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SysTick_Handler+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd04      	ble.n	8001826 <SysTick_Handler+0x2e>
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SysTick_Handler+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SysTick_Handler+0x40>)
 8001824:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001826:	f000 fcdb 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 800182a:	f7ff fb0f 	bl	8000e4c <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200004a8 	.word	0x200004a8
 8001838:	20000000 	.word	0x20000000

0800183c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM4_IRQHandler+0x10>)
 8001842:	f001 ff91 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000020c 	.word	0x2000020c

08001850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART1_IRQHandler+0x10>)
 8001856:	f003 f82f 	bl	80048b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200008c4 	.word	0x200008c4

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  Uart_isr(&huart2);
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <USART2_IRQHandler+0x14>)
 800186a:	f000 fb07 	bl	8001e7c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800186e:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART2_IRQHandler+0x14>)
 8001870:	f003 f822 	bl	80048b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000090c 	.word	0x2000090c

0800187c <_getpid>:
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
 8001880:	2301      	movs	r3, #1
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_kill>:
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
 8001894:	f006 f938 	bl	8007b08 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	2216      	movs	r2, #22
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_exit>:
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	f04f 31ff 	mov.w	r1, #4294967295
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffe7 	bl	800188a <_kill>
 80018bc:	e7fe      	b.n	80018bc <_exit+0x12>

080018be <_read>:
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e00a      	b.n	80018e6 <_read+0x28>
 80018d0:	f3af 8000 	nop.w
 80018d4:	4601      	mov	r1, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	60ba      	str	r2, [r7, #8]
 80018dc:	b2ca      	uxtb	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbf0      	blt.n	80018d0 <_read+0x12>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_write>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e009      	b.n	800191e <_write+0x26>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f3af 8000 	nop.w
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf1      	blt.n	800190a <_write+0x12>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_close>:
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <_fstat>:
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	2300      	movs	r3, #0
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <_isatty>:
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	2301      	movs	r3, #1
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <_lseek>:
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <_sbrk>:
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
 80019c0:	f006 f8a2 	bl	8007b08 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20005000 	.word	0x20005000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200004a4 	.word	0x200004a4
 80019f8:	20000ae8 	.word	0x20000ae8

080019fc <SystemInit>:
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HAL_TIM_Base_MspInit>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a26:	d10c      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	61d3      	str	r3, [r2, #28]
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a40:	e030      	b.n	8001aa4 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM4)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_TIM_Base_MspInit+0xa8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d12b      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	61d3      	str	r3, [r2, #28]
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_TIM_Base_MspInit+0xa4>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo1_Pin;
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_TIM_Base_MspInit+0xac>)
 8001a90:	f000 fda6 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	201e      	movs	r0, #30
 8001a9a:	f000 fcb8 	bl	800240e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a9e:	201e      	movs	r0, #30
 8001aa0:	f000 fcd1 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d117      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_TIM_MspPostInit+0x58>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_TIM_MspPostInit+0x58>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_TIM_MspPostInit+0x58>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = L298_ENA_Pin;
 8001af0:	2302      	movs	r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(L298_ENA_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <HAL_TIM_MspPostInit+0x5c>)
 8001b04:	f000 fd6c 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010800 	.word	0x40010800

08001b18 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <Ringbuf_init+0x38>)
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <Ringbuf_init+0x3c>)
 8001b20:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <Ringbuf_init+0x40>)
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <Ringbuf_init+0x44>)
 8001b26:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <Ringbuf_init+0x48>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <Ringbuf_init+0x48>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <Ringbuf_init+0x48>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <Ringbuf_init+0x48>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	60da      	str	r2, [r3, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	200008bc 	.word	0x200008bc
 8001b54:	200004ac 	.word	0x200004ac
 8001b58:	200008c0 	.word	0x200008c0
 8001b5c:	200006b4 	.word	0x200006b4
 8001b60:	2000090c 	.word	0x2000090c

08001b64 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d009      	beq.n	8001b9e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	79f9      	ldrb	r1, [r7, #7]
 8001b94:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <Uart_read+0x54>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <Uart_read+0x54>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d102      	bne.n	8001bc8 <Uart_read+0x20>
  {
    return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e013      	b.n	8001bf0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <Uart_read+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <Uart_read+0x54>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <Uart_read+0x54>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <Uart_read+0x54>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200008bc 	.word	0x200008bc

08001c00 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <IsDataAvailable+0x30>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <IsDataAvailable+0x30>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200008bc 	.word	0x200008bc

08001c34 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <Uart_peek+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <Uart_peek+0x34>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d102      	bne.n	8001c52 <Uart_peek+0x1e>
  {
    return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	e006      	b.n	8001c60 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <Uart_peek+0x34>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <Uart_peek+0x34>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	200008bc 	.word	0x200008bc

08001c6c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fa72 	bl	8000164 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001c88:	e01e      	b.n	8001cc8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <Copy_upto+0xf8>)
 8001c8c:	6819      	ldr	r1, [r3, #0]
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <Copy_upto+0xf8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	4403      	add	r3, r0
 8001c9c:	5c8a      	ldrb	r2, [r1, r2]
 8001c9e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <Copy_upto+0xf8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <Copy_upto+0xf8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001cbc:	bf00      	nop
 8001cbe:	f7ff ff9f 	bl	8001c00 <IsDataAvailable>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0fa      	beq.n	8001cbe <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001cc8:	f7ff ffb4 	bl	8001c34 <Uart_peek>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d1d7      	bne.n	8001c8a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001cda:	e027      	b.n	8001d2c <Copy_upto+0xc0>
	{
		so_far++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001ce2:	f7ff ff61 	bl	8001ba8 <Uart_read>
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	613a      	str	r2, [r7, #16]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d101      	bne.n	8001d04 <Copy_upto+0x98>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e02a      	b.n	8001d5a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <Copy_upto+0xfc>)
 8001d06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d0a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001d0c:	bf00      	nop
 8001d0e:	f7ff ff77 	bl	8001c00 <IsDataAvailable>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d103      	bne.n	8001d20 <Copy_upto+0xb4>
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <Copy_upto+0xfc>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f6      	bne.n	8001d0e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <Copy_upto+0xfc>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <Copy_upto+0xc0>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e016      	b.n	8001d5a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001d2c:	f7ff ff82 	bl	8001c34 <Uart_peek>
 8001d30:	4601      	mov	r1, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4299      	cmp	r1, r3
 8001d3c:	d0ce      	beq.n	8001cdc <Copy_upto+0x70>
	}

	if (so_far != len)
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d002      	beq.n	8001d4c <Copy_upto+0xe0>
	{
		so_far = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
		goto again;
 8001d4a:	e79d      	b.n	8001c88 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d101      	bne.n	8001d58 <Copy_upto+0xec>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <Copy_upto+0xee>
	else return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200008bc 	.word	0x200008bc
 8001d68:	200004a8 	.word	0x200004a8

08001d6c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe f9f3 	bl	8000164 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <Wait_for+0x108>)
 8001d84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d88:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ff38 	bl	8001c00 <IsDataAvailable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <Wait_for+0x32>
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <Wait_for+0x108>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f6      	bne.n	8001d8c <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001d9e:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <Wait_for+0x108>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d119      	bne.n	8001dda <Wait_for+0x6e>
 8001da6:	2300      	movs	r3, #0
 8001da8:	e060      	b.n	8001e6c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <Wait_for+0x10c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <Wait_for+0x10c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d00b      	beq.n	8001dd6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <Wait_for+0x10c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <Wait_for+0x10c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dd4:	e001      	b.n	8001dda <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e048      	b.n	8001e6c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001dda:	f7ff ff2b 	bl	8001c34 <Uart_peek>
 8001dde:	4601      	mov	r1, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4299      	cmp	r1, r3
 8001dea:	d1de      	bne.n	8001daa <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001dec:	e027      	b.n	8001e3e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <Wait_for+0x10c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <Wait_for+0x10c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d101      	bne.n	8001e16 <Wait_for+0xaa>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e02a      	b.n	8001e6c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <Wait_for+0x108>)
 8001e18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e1c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001e1e:	bf00      	nop
 8001e20:	f7ff feee 	bl	8001c00 <IsDataAvailable>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <Wait_for+0xc6>
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <Wait_for+0x108>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f6      	bne.n	8001e20 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <Wait_for+0x108>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <Wait_for+0xd2>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e016      	b.n	8001e6c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001e3e:	f7ff fef9 	bl	8001c34 <Uart_peek>
 8001e42:	4601      	mov	r1, r0
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d0ce      	beq.n	8001dee <Wait_for+0x82>
	}

	if (so_far != len)
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d002      	beq.n	8001e5e <Wait_for+0xf2>
	{
		so_far = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
		goto again;
 8001e5c:	e791      	b.n	8001d82 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d101      	bne.n	8001e6a <Wait_for+0xfe>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <Wait_for+0x100>
	else return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200004a8 	.word	0x200004a8
 8001e78:	200008bc 	.word	0x200008bc

08001e7c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d013      	beq.n	8001ec6 <Uart_isr+0x4a>
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <Uart_isr+0xb4>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe50 	bl	8001b64 <store_char>
        return;
 8001ec4:	e031      	b.n	8001f2a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02c      	beq.n	8001f2a <Uart_isr+0xae>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d027      	beq.n	8001f2a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <Uart_isr+0xb8>)
 8001edc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <Uart_isr+0xb8>)
 8001ee2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d108      	bne.n	8001efc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001efa:	e015      	b.n	8001f28 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <Uart_isr+0xb8>)
 8001efe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <Uart_isr+0xb8>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <Uart_isr+0xb8>)
 8001f0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <Uart_isr+0xb8>)
 8001f16:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	7bba      	ldrb	r2, [r7, #14]
 8001f26:	605a      	str	r2, [r3, #4]
    	return;
 8001f28:	bf00      	nop
    }
}
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200008bc 	.word	0x200008bc
 8001f34:	200006b4 	.word	0x200006b4

08001f38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <MX_USART1_UART_Init+0x50>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_USART1_UART_Init+0x4c>)
 8001f70:	f002 fbaa 	bl	80046c8 <HAL_UART_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f7a:	f7ff fbe3 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200008c4 	.word	0x200008c4
 8001f88:	40013800 	.word	0x40013800

08001f8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f002 fb80 	bl	80046c8 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7ff fbb9 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000090c 	.word	0x2000090c
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	; (80020f8 <HAL_UART_MspInit+0x118>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d13a      	bne.n	8002076 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_UART_MspInit+0x11c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_UART_MspInit+0x11c>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a37      	ldr	r2, [pc, #220]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_UART_MspInit+0x11c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	4619      	mov	r1, r3
 8002044:	482e      	ldr	r0, [pc, #184]	; (8002100 <HAL_UART_MspInit+0x120>)
 8002046:	f000 facb 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	4619      	mov	r1, r3
 800205e:	4828      	ldr	r0, [pc, #160]	; (8002100 <HAL_UART_MspInit+0x120>)
 8002060:	f000 fabe 	bl	80025e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2025      	movs	r0, #37	; 0x25
 800206a:	f000 f9d0 	bl	800240e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800206e:	2025      	movs	r0, #37	; 0x25
 8002070:	f000 f9e9 	bl	8002446 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002074:	e03c      	b.n	80020f0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a22      	ldr	r2, [pc, #136]	; (8002104 <HAL_UART_MspInit+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d137      	bne.n	80020f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_UART_MspInit+0x11c>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_UART_MspInit+0x11c>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	61d3      	str	r3, [r2, #28]
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <HAL_UART_MspInit+0x11c>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_MspInit+0x11c>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b0:	2304      	movs	r3, #4
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	480f      	ldr	r0, [pc, #60]	; (8002100 <HAL_UART_MspInit+0x120>)
 80020c4:	f000 fa8c 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c8:	2308      	movs	r3, #8
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4619      	mov	r1, r3
 80020da:	4809      	ldr	r0, [pc, #36]	; (8002100 <HAL_UART_MspInit+0x120>)
 80020dc:	f000 fa80 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2026      	movs	r0, #38	; 0x26
 80020e6:	f000 f992 	bl	800240e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ea:	2026      	movs	r0, #38	; 0x26
 80020ec:	f000 f9ab 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010800 	.word	0x40010800
 8002104:	40004400 	.word	0x40004400

08002108 <Reset_Handler>:
 8002108:	f7ff fc78 	bl	80019fc <SystemInit>
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <LoopFillZerobss+0xe>)
 800210e:	490c      	ldr	r1, [pc, #48]	; (8002140 <LoopFillZerobss+0x12>)
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <LoopFillZerobss+0x16>)
 8002112:	2300      	movs	r3, #0
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:
 8002116:	58d4      	ldr	r4, [r2, r3]
 8002118:	50c4      	str	r4, [r0, r3]
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:
 800211c:	18c4      	adds	r4, r0, r3
 800211e:	428c      	cmp	r4, r1
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <LoopFillZerobss+0x1a>)
 8002124:	4c09      	ldr	r4, [pc, #36]	; (800214c <LoopFillZerobss+0x1e>)
 8002126:	2300      	movs	r3, #0
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:
 800212e:	42a2      	cmp	r2, r4
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>
 8002132:	f005 fcef 	bl	8007b14 <__libc_init_array>
 8002136:	f7fe fde7 	bl	8000d08 <main>
 800213a:	4770      	bx	lr
 800213c:	20000000 	.word	0x20000000
 8002140:	200001f0 	.word	0x200001f0
 8002144:	0800af70 	.word	0x0800af70
 8002148:	200001f0 	.word	0x200001f0
 800214c:	20000ae4 	.word	0x20000ae4

08002150 <ADC1_2_IRQHandler>:
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <HAL_Init>:
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x28>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f947 	bl	80023f8 <HAL_NVIC_SetPriorityGrouping>
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>
 8002170:	f7ff faee 	bl	8001750 <HAL_MspInit>
 8002174:	2300      	movs	r3, #0
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_InitTick>:
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f95f 	bl	8002462 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f927 	bl	800240e <HAL_NVIC_SetPriority>
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
 80021ca:	2301      	movs	r3, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000004 	.word	0x20000004
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000008 	.word	0x20000008

080021e0 <HAL_IncTick>:
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_IncTick+0x1c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x20>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_IncTick+0x20>)
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	2000000c 	.word	0x2000000c
 8002200:	20000954 	.word	0x20000954

08002204 <HAL_GetTick>:
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_GetTick+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000954 	.word	0x20000954

08002218 <HAL_Delay>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	f7ff fff0 	bl	8002204 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	bf00      	nop
 8002240:	f7ff ffe0 	bl	8002204 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c

08002260 <__NVIC_SetPriorityGrouping>:
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <__NVIC_EnableIRQ+0x34>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
 80023a8:	4313      	orrs	r3, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Config>:
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f7ff ff90 	bl	80022fc <__NVIC_SetPriority>
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	2300      	movs	r3, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <HAL_NVIC_SetPriorityGrouping>:
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff2d 	bl	8002260 <__NVIC_SetPriorityGrouping>
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_SetPriority>:
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	f7ff ff42 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 8002424:	6178      	str	r0, [r7, #20]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7ff ff90 	bl	8002350 <NVIC_EncodePriority>
 8002430:	4602      	mov	r2, r0
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff5f 	bl	80022fc <__NVIC_SetPriority>
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_EnableIRQ>:
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff35 	bl	80022c4 <__NVIC_EnableIRQ>
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SYSTICK_Config>:
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffa2 	bl	80023b4 <SysTick_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_DMA_Abort>:
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d008      	beq.n	80024a4 <HAL_DMA_Abort+0x2a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]
 80024a0:	2301      	movs	r3, #1
 80024a2:	e020      	b.n	80024e6 <HAL_DMA_Abort+0x6c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020e 	bic.w	r2, r2, #14
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2020 	strb.w	r2, [r3, #32]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_DMA_Abort_IT>:
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d005      	beq.n	8002514 <HAL_DMA_Abort_IT+0x24>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	e051      	b.n	80025b8 <HAL_DMA_Abort_IT+0xc8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_DMA_Abort_IT+0xd4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d029      	beq.n	8002592 <HAL_DMA_Abort_IT+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_DMA_Abort_IT+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <HAL_DMA_Abort_IT+0x9e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_DMA_Abort_IT+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01a      	beq.n	8002588 <HAL_DMA_Abort_IT+0x98>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_DMA_Abort_IT+0xe0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d012      	beq.n	8002582 <HAL_DMA_Abort_IT+0x92>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_DMA_Abort_IT+0xe4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00a      	beq.n	800257c <HAL_DMA_Abort_IT+0x8c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_DMA_Abort_IT+0xe8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d102      	bne.n	8002576 <HAL_DMA_Abort_IT+0x86>
 8002570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002574:	e00e      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 8002576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257a:	e00b      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 800257c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002580:	e008      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 8002582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002586:	e005      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 8002588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258c:	e002      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 800258e:	2310      	movs	r3, #16
 8002590:	e000      	b.n	8002594 <HAL_DMA_Abort_IT+0xa4>
 8002592:	2301      	movs	r3, #1
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_DMA_Abort_IT+0xec>)
 8002596:	6053      	str	r3, [r2, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Abort_IT+0xc8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40020008 	.word	0x40020008
 80025c8:	4002001c 	.word	0x4002001c
 80025cc:	40020030 	.word	0x40020030
 80025d0:	40020044 	.word	0x40020044
 80025d4:	40020058 	.word	0x40020058
 80025d8:	4002006c 	.word	0x4002006c
 80025dc:	40020000 	.word	0x40020000

080025e0 <HAL_GPIO_Init>:
 80025e0:	b480      	push	{r7}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	e169      	b.n	80028c8 <HAL_GPIO_Init+0x2e8>
 80025f4:	2201      	movs	r2, #1
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8158 	bne.w	80028c2 <HAL_GPIO_Init+0x2e2>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a9a      	ldr	r2, [pc, #616]	; (8002880 <HAL_GPIO_Init+0x2a0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d05e      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 800261c:	4a98      	ldr	r2, [pc, #608]	; (8002880 <HAL_GPIO_Init+0x2a0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d875      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002622:	4a98      	ldr	r2, [pc, #608]	; (8002884 <HAL_GPIO_Init+0x2a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d058      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002628:	4a96      	ldr	r2, [pc, #600]	; (8002884 <HAL_GPIO_Init+0x2a4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d86f      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800262e:	4a96      	ldr	r2, [pc, #600]	; (8002888 <HAL_GPIO_Init+0x2a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d052      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002634:	4a94      	ldr	r2, [pc, #592]	; (8002888 <HAL_GPIO_Init+0x2a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d869      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800263a:	4a94      	ldr	r2, [pc, #592]	; (800288c <HAL_GPIO_Init+0x2ac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d04c      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002640:	4a92      	ldr	r2, [pc, #584]	; (800288c <HAL_GPIO_Init+0x2ac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d863      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002646:	4a92      	ldr	r2, [pc, #584]	; (8002890 <HAL_GPIO_Init+0x2b0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d046      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 800264c:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_GPIO_Init+0x2b0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d85d      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002652:	2b12      	cmp	r3, #18
 8002654:	d82a      	bhi.n	80026ac <HAL_GPIO_Init+0xcc>
 8002656:	2b12      	cmp	r3, #18
 8002658:	d859      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_GPIO_Init+0x80>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	080026db 	.word	0x080026db
 8002664:	080026b5 	.word	0x080026b5
 8002668:	080026c7 	.word	0x080026c7
 800266c:	08002709 	.word	0x08002709
 8002670:	0800270f 	.word	0x0800270f
 8002674:	0800270f 	.word	0x0800270f
 8002678:	0800270f 	.word	0x0800270f
 800267c:	0800270f 	.word	0x0800270f
 8002680:	0800270f 	.word	0x0800270f
 8002684:	0800270f 	.word	0x0800270f
 8002688:	0800270f 	.word	0x0800270f
 800268c:	0800270f 	.word	0x0800270f
 8002690:	0800270f 	.word	0x0800270f
 8002694:	0800270f 	.word	0x0800270f
 8002698:	0800270f 	.word	0x0800270f
 800269c:	0800270f 	.word	0x0800270f
 80026a0:	0800270f 	.word	0x0800270f
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	4a79      	ldr	r2, [pc, #484]	; (8002894 <HAL_GPIO_Init+0x2b4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 80026b2:	e02c      	b.n	800270e <HAL_GPIO_Init+0x12e>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	e029      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	e024      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	3308      	adds	r3, #8
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	e01f      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	330c      	adds	r3, #12
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	e01a      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_GPIO_Init+0x108>
 80026e2:	2304      	movs	r3, #4
 80026e4:	623b      	str	r3, [r7, #32]
 80026e6:	e013      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_GPIO_Init+0x11c>
 80026f0:	2308      	movs	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e009      	b.n	8002710 <HAL_GPIO_Init+0x130>
 80026fc:	2308      	movs	r3, #8
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	e003      	b.n	8002710 <HAL_GPIO_Init+0x130>
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x130>
 800270e:	bf00      	nop
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	; 0xff
 8002714:	d801      	bhi.n	800271a <HAL_GPIO_Init+0x13a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e001      	b.n	800271e <HAL_GPIO_Init+0x13e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2bff      	cmp	r3, #255	; 0xff
 8002724:	d802      	bhi.n	800272c <HAL_GPIO_Init+0x14c>
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x152>
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	3b08      	subs	r3, #8
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	210f      	movs	r1, #15
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	6a39      	ldr	r1, [r7, #32]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	431a      	orrs	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80b1 	beq.w	80028c2 <HAL_GPIO_Init+0x2e2>
 8002760:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_GPIO_Init+0x2bc>)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_GPIO_Init+0x2c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_GPIO_Init+0x1ec>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3f      	ldr	r2, [pc, #252]	; (80028a4 <HAL_GPIO_Init+0x2c4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_GPIO_Init+0x1e8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3e      	ldr	r2, [pc, #248]	; (80028a8 <HAL_GPIO_Init+0x2c8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x1e4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_GPIO_Init+0x2cc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_GPIO_Init+0x1e0>
 80027bc:	2303      	movs	r3, #3
 80027be:	e006      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c0:	2304      	movs	r3, #4
 80027c2:	e004      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027cc:	2300      	movs	r3, #0
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	492f      	ldr	r1, [pc, #188]	; (800289c <HAL_GPIO_Init+0x2bc>)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	492c      	ldr	r1, [pc, #176]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x234>
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	4928      	ldr	r1, [pc, #160]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002810:	4013      	ands	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x24e>
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x25c>
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	491e      	ldr	r1, [pc, #120]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002838:	4013      	ands	r3, r2
 800283a:	60cb      	str	r3, [r1, #12]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_GPIO_Init+0x276>
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4918      	ldr	r1, [pc, #96]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e006      	b.n	8002864 <HAL_GPIO_Init+0x284>
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	43db      	mvns	r3, r3
 800285e:	4914      	ldr	r1, [pc, #80]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002860:	4013      	ands	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d021      	beq.n	80028b4 <HAL_GPIO_Init+0x2d4>
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	490e      	ldr	r1, [pc, #56]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e021      	b.n	80028c2 <HAL_GPIO_Init+0x2e2>
 800287e:	bf00      	nop
 8002880:	10320000 	.word	0x10320000
 8002884:	10310000 	.word	0x10310000
 8002888:	10220000 	.word	0x10220000
 800288c:	10210000 	.word	0x10210000
 8002890:	10120000 	.word	0x10120000
 8002894:	10110000 	.word	0x10110000
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000
 80028a0:	40010800 	.word	0x40010800
 80028a4:	40010c00 	.word	0x40010c00
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	40010400 	.word	0x40010400
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_GPIO_Init+0x304>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <HAL_GPIO_Init+0x304>)
 80028be:	4013      	ands	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	3301      	adds	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f47f ae8e 	bne.w	80025f4 <HAL_GPIO_Init+0x14>
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	372c      	adds	r7, #44	; 0x2c
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_GPIO_ReadPin>:
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_GPIO_ReadPin+0x1e>
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e001      	b.n	800290a <HAL_GPIO_ReadPin+0x22>
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <HAL_GPIO_WritePin>:
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
 8002922:	4613      	mov	r3, r2
 8002924:	707b      	strb	r3, [r7, #1]
 8002926:	787b      	ldrb	r3, [r7, #1]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_WritePin+0x1e>
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	e003      	b.n	800293c <HAL_GPIO_WritePin+0x26>
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	041a      	lsls	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
	...

08002948 <HAL_RCC_OscConfig>:
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
 8002956:	2301      	movs	r3, #1
 8002958:	e272      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x12e>
 8002968:	4b92      	ldr	r3, [pc, #584]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x46>
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d112      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d10b      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d168      	bne.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e24c      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x76>
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7f      	ldr	r2, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e02e      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7a      	ldr	r2, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0xbc>
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0x104>
 8002a24:	f7ff fbee 	bl	8002204 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xf6>
 8002a2c:	f7ff fbea 	bl	8002204 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xf6>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e200      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe4>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
 8002a4c:	f7ff fbda 	bl	8002204 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x11e>
 8002a54:	f7ff fbd6 	bl	8002204 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x11e>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1ec      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x10c>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
 8002a74:	bf00      	nop
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x202>
 8002a82:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x15e>
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1c0      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1d6>
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f7ff fb8f 	bl	8002204 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1b4>
 8002aea:	f7ff fb8b 	bl	8002204 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1b4>
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a1      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1a2>
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4927      	ldr	r1, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f7ff fb6e 	bl	8002204 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
 8002b2c:	f7ff fb6a 	bl	8002204 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e180      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1e4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03a      	beq.n	8002bcc <HAL_RCC_OscConfig+0x284>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCC_OscConfig+0x24a>
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f7ff fb4e 	bl	8002204 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x236>
 8002b6c:	f7ff fb4a 	bl	8002204 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x236>
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e160      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x224>
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 face 	bl	800312c <RCC_Delay>
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x284>
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f7ff fb34 	bl	8002204 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x278>
 8002ba0:	f7ff fb30 	bl	8002204 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x278>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e146      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	42420000 	.word	0x42420000
 8002bbc:	42420480 	.word	0x42420480
 8002bc0:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e9      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x258>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a6 	beq.w	8002d26 <HAL_RCC_OscConfig+0x3de>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2be>
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
 8002c06:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2fc>
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	f7ff faf1 	bl	8002204 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
 8002c26:	f7ff faed 	bl	8002204 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
 8002c34:	2303      	movs	r3, #3
 8002c36:	e103      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002c38:	4b75      	ldr	r3, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2de>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e02d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x334>
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x356>
 8002c84:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x3a2>
 8002cbe:	f7ff faa1 	bl	8002204 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x394>
 8002cc6:	f7ff fa9d 	bl	8002204 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x394>
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0b1      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x37e>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x3cc>
 8002cea:	f7ff fa8b 	bl	8002204 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
 8002cf2:	f7ff fa87 	bl	8002204 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
 8002d04:	2303      	movs	r3, #3
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3de>
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8087 	beq.w	8002e3e <HAL_RCC_OscConfig+0x4f6>
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d061      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4b8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d146      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x48a>
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f7ff fa5b 	bl	8002204 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x41c>
 8002d52:	f7ff fa57 	bl	8002204 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x41c>
 8002d60:	2303      	movs	r3, #3
 8002d62:	e06d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x40a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0x444>
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4921      	ldr	r1, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a19      	ldr	r1, [r3, #32]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	491b      	ldr	r1, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f7ff fa2b 	bl	8002204 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
 8002db2:	f7ff fa27 	bl	8002204 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
 8002dd0:	e035      	b.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f7ff fa14 	bl	8002204 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
 8002de0:	f7ff fa10 	bl	8002204 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e026      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x498>
 8002dfe:	e01e      	b.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4d0>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e019      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42420060 	.word	0x42420060
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x500>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x4f2>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_RCC_ClockConfig>:
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0d0      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d910      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x44>
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4965      	ldr	r1, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x44>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x92>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x68>
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eb2:	6053      	str	r3, [r2, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x80>
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eca:	6053      	str	r3, [r2, #4]
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d040      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xb6>
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d115      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e073      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06b      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002f2a:	4b39      	ldr	r3, [pc, #228]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4936      	ldr	r1, [pc, #216]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	f7ff f962 	bl	8002204 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
 8002f44:	f7ff f95e 	bl	8002204 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e053      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d210      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x150>
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	4922      	ldr	r1, [pc, #136]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x150>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x16e>
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x18e>
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
 8002fda:	f000 f821 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f8c0 	bl	8002180 <HAL_InitTick>
 8003000:	2300      	movs	r3, #0
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
 8003014:	0800ab60 	.word	0x0800ab60
 8003018:	20000004 	.word	0x20000004
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_RCC_GetSysClockFreq>:
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x30>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x36>
 800304e:	e027      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x80>
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e027      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x86>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x70>
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0c5b      	lsrs	r3, r3, #17
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e004      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x7a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x86>
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	bf00      	nop
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4618      	mov	r0, r3
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	0800ab78 	.word	0x0800ab78
 80030c0:	0800ab88 	.word	0x0800ab88
 80030c4:	003d0900 	.word	0x003d0900

080030c8 <HAL_RCC_GetHCLKFreq>:
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetPCLK1Freq>:
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
 80030e0:	f7ff fff2 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	0800ab70 	.word	0x0800ab70

08003104 <HAL_RCC_GetPCLK2Freq>:
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
 8003108:	f7ff ffde 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	0800ab70 	.word	0x0800ab70

0800312c <RCC_Delay>:
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RCC_Delay+0x34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <RCC_Delay+0x38>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a5b      	lsrs	r3, r3, #9
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	bf00      	nop
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	60fa      	str	r2, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <RCC_Delay+0x1c>
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	20000004 	.word	0x20000004
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_TIM_Base_Init>:
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_TIM_Base_Init+0x12>
 8003176:	2301      	movs	r3, #1
 8003178:	e041      	b.n	80031fe <HAL_TIM_Base_Init+0x96>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_TIM_Base_Init+0x2c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fc3a 	bl	8001a08 <HAL_TIM_Base_MspInit>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4610      	mov	r0, r2
 80031a8:	f000 fe6c 	bl	8003e84 <TIM_Base_SetConfig>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031fc:	2300      	movs	r3, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_TIM_Base_Start_IT>:
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d001      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e03a      	b.n	8003296 <HAL_TIM_Base_Start_IT+0x8e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_TIM_Base_Start_IT+0x98>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x58>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d009      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x58>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x58>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_TIM_Base_Start_IT+0x7c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d010      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x8c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <HAL_TIM_Base_Start_IT+0x8c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800

080032ac <HAL_TIM_PWM_Init>:
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_PWM_Init+0x12>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e041      	b.n	8003342 <HAL_TIM_PWM_Init+0x96>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_TIM_PWM_Init+0x2c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f839 	bl	800334a <HAL_TIM_PWM_MspInit>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 fdca 	bl	8003e84 <TIM_Base_SetConfig>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003340:	2300      	movs	r3, #0
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_TIM_PWM_MspInit>:
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_PWM_Start>:
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_TIM_PWM_Start+0x24>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e022      	b.n	80033c6 <HAL_TIM_PWM_Start+0x6a>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b04      	cmp	r3, #4
 8003384:	d109      	bne.n	800339a <HAL_TIM_PWM_Start+0x3e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e015      	b.n	80033c6 <HAL_TIM_PWM_Start+0x6a>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d109      	bne.n	80033b4 <HAL_TIM_PWM_Start+0x58>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e008      	b.n	80033c6 <HAL_TIM_PWM_Start+0x6a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_TIM_PWM_Start+0x72>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e05e      	b.n	800348c <HAL_TIM_PWM_Start+0x130>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d104      	bne.n	80033de <HAL_TIM_PWM_Start+0x82>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033dc:	e013      	b.n	8003406 <HAL_TIM_PWM_Start+0xaa>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d104      	bne.n	80033ee <HAL_TIM_PWM_Start+0x92>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ec:	e00b      	b.n	8003406 <HAL_TIM_PWM_Start+0xaa>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d104      	bne.n	80033fe <HAL_TIM_PWM_Start+0xa2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fc:	e003      	b.n	8003406 <HAL_TIM_PWM_Start+0xaa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f8c5 	bl	800459e <TIM_CCxChannelCmd>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIM_PWM_Start+0x138>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d107      	bne.n	800342e <HAL_TIM_PWM_Start+0xd2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_TIM_PWM_Start+0x138>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIM_PWM_Start+0xfa>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d009      	beq.n	8003456 <HAL_TIM_PWM_Start+0xfa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_TIM_PWM_Start+0x13c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIM_PWM_Start+0xfa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_TIM_PWM_Start+0x140>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <HAL_TIM_PWM_Start+0x11e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d010      	beq.n	800348a <HAL_TIM_PWM_Start+0x12e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e007      	b.n	800348a <HAL_TIM_PWM_Start+0x12e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <HAL_TIM_IC_Init>:
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_TIM_IC_Init+0x12>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e041      	b.n	8003536 <HAL_TIM_IC_Init+0x96>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_TIM_IC_Init+0x2c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f839 	bl	800353e <HAL_TIM_IC_MspInit>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f000 fcd0 	bl	8003e84 <TIM_Base_SetConfig>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003534:	2300      	movs	r3, #0
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_TIM_IC_MspInit>:
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_IC_Start_IT>:
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0x1e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e013      	b.n	8003596 <HAL_TIM_IC_Start_IT+0x46>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0x2e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e00b      	b.n	8003596 <HAL_TIM_IC_Start_IT+0x46>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_IC_Start_IT+0x3e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e003      	b.n	8003596 <HAL_TIM_IC_Start_IT+0x46>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	73bb      	strb	r3, [r7, #14]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <HAL_TIM_IC_Start_IT+0x58>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e013      	b.n	80035d0 <HAL_TIM_IC_Start_IT+0x80>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d104      	bne.n	80035b8 <HAL_TIM_IC_Start_IT+0x68>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e00b      	b.n	80035d0 <HAL_TIM_IC_Start_IT+0x80>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d104      	bne.n	80035c8 <HAL_TIM_IC_Start_IT+0x78>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e003      	b.n	80035d0 <HAL_TIM_IC_Start_IT+0x80>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	737b      	strb	r3, [r7, #13]
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d102      	bne.n	80035de <HAL_TIM_IC_Start_IT+0x8e>
 80035d8:	7b7b      	ldrb	r3, [r7, #13]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <HAL_TIM_IC_Start_IT+0x92>
 80035de:	2301      	movs	r3, #1
 80035e0:	e0b8      	b.n	8003754 <HAL_TIM_IC_Start_IT+0x204>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f0:	e013      	b.n	800361a <HAL_TIM_IC_Start_IT+0xca>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0xb2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003600:	e00b      	b.n	800361a <HAL_TIM_IC_Start_IT+0xca>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d104      	bne.n	8003612 <HAL_TIM_IC_Start_IT+0xc2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	e003      	b.n	800361a <HAL_TIM_IC_Start_IT+0xca>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_TIM_IC_Start_IT+0xda>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003628:	e013      	b.n	8003652 <HAL_TIM_IC_Start_IT+0x102>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d104      	bne.n	800363a <HAL_TIM_IC_Start_IT+0xea>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003638:	e00b      	b.n	8003652 <HAL_TIM_IC_Start_IT+0x102>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0xfa>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003648:	e003      	b.n	8003652 <HAL_TIM_IC_Start_IT+0x102>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d841      	bhi.n	80036dc <HAL_TIM_IC_Start_IT+0x18c>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_TIM_IC_Start_IT+0x110>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003695 	.word	0x08003695
 8003664:	080036dd 	.word	0x080036dd
 8003668:	080036dd 	.word	0x080036dd
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036a7 	.word	0x080036a7
 8003674:	080036dd 	.word	0x080036dd
 8003678:	080036dd 	.word	0x080036dd
 800367c:	080036dd 	.word	0x080036dd
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036dd 	.word	0x080036dd
 8003688:	080036dd 	.word	0x080036dd
 800368c:	080036dd 	.word	0x080036dd
 8003690:	080036cb 	.word	0x080036cb
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0202 	orr.w	r2, r2, #2
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e01d      	b.n	80036e2 <HAL_TIM_IC_Start_IT+0x192>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0204 	orr.w	r2, r2, #4
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e014      	b.n	80036e2 <HAL_TIM_IC_Start_IT+0x192>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e00b      	b.n	80036e2 <HAL_TIM_IC_Start_IT+0x192>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0210 	orr.w	r2, r2, #16
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	e002      	b.n	80036e2 <HAL_TIM_IC_Start_IT+0x192>
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	bf00      	nop
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d134      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0x202>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 ff54 	bl	800459e <TIM_CCxChannelCmd>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_TIM_IC_Start_IT+0x20c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_IC_Start_IT+0x1ce>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003708:	d009      	beq.n	800371e <HAL_TIM_IC_Start_IT+0x1ce>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_TIM_IC_Start_IT+0x210>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIM_IC_Start_IT+0x1ce>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <HAL_TIM_IC_Start_IT+0x214>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d111      	bne.n	8003742 <HAL_TIM_IC_Start_IT+0x1f2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d010      	beq.n	8003752 <HAL_TIM_IC_Start_IT+0x202>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e007      	b.n	8003752 <HAL_TIM_IC_Start_IT+0x202>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800

08003768 <HAL_TIM_IRQHandler>:
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fb38 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fb4a 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb50 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fb0e 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb20 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fb26 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fae4 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 faf6 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fafc 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd faba 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 facc 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fad2 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd faa5 	bl	8000e36 <HAL_TIM_PeriodElapsedCallback>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fecf 	bl	80046b6 <HAL_TIMEx_BreakCallback>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393c:	611a      	str	r2, [r3, #16]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa96 	bl	8003e70 <HAL_TIM_TriggerCallback>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fe9a 	bl	80046a4 <HAL_TIMEx_CommutCallback>
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_IC_ConfigChannel>:
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e088      	b.n	8003aa8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IC_ConfigChannel+0x64>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f000 fc50 	bl	8004258 <TIM_TI1_SetConfig>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 020c 	bic.w	r2, r2, #12
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6999      	ldr	r1, [r3, #24]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	619a      	str	r2, [r3, #24]
 80039da:	e060      	b.n	8003a9e <HAL_TIM_IC_ConfigChannel+0x126>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d11c      	bne.n	8003a1c <HAL_TIM_IC_ConfigChannel+0xa4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f000 fcb9 	bl	8004368 <TIM_TI2_SetConfig>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a04:	619a      	str	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6999      	ldr	r1, [r3, #24]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	619a      	str	r2, [r3, #24]
 8003a1a:	e040      	b.n	8003a9e <HAL_TIM_IC_ConfigChannel+0x126>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11b      	bne.n	8003a5a <HAL_TIM_IC_ConfigChannel+0xe2>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f000 fd04 	bl	800443e <TIM_TI3_SetConfig>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69da      	ldr	r2, [r3, #28]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 020c 	bic.w	r2, r2, #12
 8003a44:	61da      	str	r2, [r3, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69d9      	ldr	r1, [r3, #28]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	61da      	str	r2, [r3, #28]
 8003a58:	e021      	b.n	8003a9e <HAL_TIM_IC_ConfigChannel+0x126>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d11c      	bne.n	8003a9a <HAL_TIM_IC_ConfigChannel+0x122>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f000 fd20 	bl	80044b4 <TIM_TI4_SetConfig>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a82:	61da      	str	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69d9      	ldr	r1, [r3, #28]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	61da      	str	r2, [r3, #28]
 8003a98:	e001      	b.n	8003a9e <HAL_TIM_IC_ConfigChannel+0x126>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_TIM_PWM_ConfigChannel>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e0ae      	b.n	8003c2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	f200 809f 	bhi.w	8003c1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003c1d 	.word	0x08003c1d
 8003aec:	08003c1d 	.word	0x08003c1d
 8003af0:	08003c1d 	.word	0x08003c1d
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003c1d 	.word	0x08003c1d
 8003afc:	08003c1d 	.word	0x08003c1d
 8003b00:	08003c1d 	.word	0x08003c1d
 8003b04:	08003b9b 	.word	0x08003b9b
 8003b08:	08003c1d 	.word	0x08003c1d
 8003b0c:	08003c1d 	.word	0x08003c1d
 8003b10:	08003c1d 	.word	0x08003c1d
 8003b14:	08003bdb 	.word	0x08003bdb
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fa12 	bl	8003f48 <TIM_OC1_SetConfig>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	619a      	str	r2, [r3, #24]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	619a      	str	r2, [r3, #24]
 8003b56:	e064      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fa58 	bl	8004014 <TIM_OC2_SetConfig>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	619a      	str	r2, [r3, #24]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
 8003b98:	e043      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 faa1 	bl	80040e8 <TIM_OC3_SetConfig>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0208 	orr.w	r2, r2, #8
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0204 	bic.w	r2, r2, #4
 8003bc4:	61da      	str	r2, [r3, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69d9      	ldr	r1, [r3, #28]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
 8003bd8:	e023      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 faeb 	bl	80041bc <TIM_OC4_SetConfig>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf4:	61da      	str	r2, [r3, #28]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c04:	61da      	str	r2, [r3, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	61da      	str	r2, [r3, #28]
 8003c1a:	e002      	b.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x172>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
 8003c20:	bf00      	nop
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_TIM_ConfigClockSource>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_ConfigClockSource+0x1c>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0b4      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x186>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d03e      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xd4>
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	f200 8087 	bhi.w	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	f000 8086 	beq.w	8003da6 <HAL_TIM_ConfigClockSource+0x172>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d87f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d01a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xa6>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d87b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d050      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x11a>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d877      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d03c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xfa>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d873      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d058      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x13a>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d86f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d064      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d86b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d060      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d867      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d05a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	e062      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f000 fc39 	bl	8004560 <TIM_ETR_SetConfig>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	e04f      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f000 fc22 	bl	8004560 <TIM_ETR_SetConfig>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e03c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 fae6 	bl	800430c <TIM_TI1_ConfigInputStage>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2150      	movs	r1, #80	; 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fbf0 	bl	800452c <TIM_ITRx_SetConfig>
 8003d4c:	e02c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 fb40 	bl	80043e0 <TIM_TI2_ConfigInputStage>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2160      	movs	r1, #96	; 0x60
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fbe0 	bl	800452c <TIM_ITRx_SetConfig>
 8003d6c:	e01c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 fac6 	bl	800430c <TIM_TI1_ConfigInputStage>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fbd0 	bl	800452c <TIM_ITRx_SetConfig>
 8003d8c:	e00c      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 fbc7 	bl	800452c <TIM_ITRx_SetConfig>
 8003d9e:	e003      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e000      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x174>
 8003da6:	bf00      	nop
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_ReadCapturedValue>:
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d831      	bhi.n	8003e3c <HAL_TIM_ReadCapturedValue+0x78>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e3d 	.word	0x08003e3d
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e3d 	.word	0x08003e3d
 8003df8:	08003e3d 	.word	0x08003e3d
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e3d 	.word	0x08003e3d
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e00f      	b.n	8003e3e <HAL_TIM_ReadCapturedValue+0x7a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e00a      	b.n	8003e3e <HAL_TIM_ReadCapturedValue+0x7a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_ReadCapturedValue+0x7a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e000      	b.n	8003e3e <HAL_TIM_ReadCapturedValue+0x7a>
 8003e3c:	bf00      	nop
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <HAL_TIM_OC_DelayElapsedCallback>:
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_PWM_PulseFinishedCallback>:
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_TriggerCallback>:
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
	...

08003e84 <TIM_Base_SetConfig>:
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0xb8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x30>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x30>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <TIM_Base_SetConfig+0xbc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x30>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0xc0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x42>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <TIM_Base_SetConfig+0xb8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <TIM_Base_SetConfig+0x62>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0x62>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <TIM_Base_SetConfig+0xbc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0x62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <TIM_Base_SetConfig+0xc0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <TIM_Base_SetConfig+0x74>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <TIM_Base_SetConfig+0xb8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0xa8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800

08003f48 <TIM_OC1_SetConfig>:
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f023 0201 	bic.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	621a      	str	r2, [r3, #32]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <TIM_OC1_SetConfig+0xc8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10c      	bne.n	8003fbe <TIM_OC1_SetConfig+0x76>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0308 	bic.w	r3, r3, #8
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <TIM_OC1_SetConfig+0xc8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d111      	bne.n	8003fea <TIM_OC1_SetConfig+0xa2>
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40012c00 	.word	0x40012c00

08004014 <TIM_OC2_SetConfig>:
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f023 0210 	bic.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0320 	bic.w	r3, r3, #32
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <TIM_OC2_SetConfig+0xd0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10d      	bne.n	8004090 <TIM_OC2_SetConfig+0x7c>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <TIM_OC2_SetConfig+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d113      	bne.n	80040c0 <TIM_OC2_SetConfig+0xac>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	619a      	str	r2, [r3, #24]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	40012c00 	.word	0x40012c00

080040e8 <TIM_OC3_SetConfig>:
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <TIM_OC3_SetConfig+0xd0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10d      	bne.n	8004162 <TIM_OC3_SetConfig+0x7a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <TIM_OC3_SetConfig+0xd0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d113      	bne.n	8004192 <TIM_OC3_SetConfig+0xaa>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	61da      	str	r2, [r3, #28]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00

080041bc <TIM_OC4_SetConfig>:
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <TIM_OC4_SetConfig+0x98>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d109      	bne.n	8004230 <TIM_OC4_SetConfig+0x74>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	61da      	str	r2, [r3, #28]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00

08004258 <TIM_TI1_SetConfig>:
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 0201 	bic.w	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	621a      	str	r2, [r3, #32]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <TIM_TI1_SetConfig+0xa8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_TI1_SetConfig+0x46>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d007      	beq.n	800429e <TIM_TI1_SetConfig+0x46>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <TIM_TI1_SetConfig+0xac>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_TI1_SetConfig+0x46>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <TIM_TI1_SetConfig+0xb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <TIM_TI1_SetConfig+0x4a>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <TIM_TI1_SetConfig+0x4c>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <TIM_TI1_SetConfig+0x62>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e003      	b.n	80042c2 <TIM_TI1_SetConfig+0x6a>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f023 030a 	bic.w	r3, r3, #10
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 030a 	and.w	r3, r3, #10
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	619a      	str	r2, [r3, #24]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	621a      	str	r2, [r3, #32]
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800

0800430c <TIM_TI1_ConfigInputStage>:
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <TIM_TI2_SetConfig>:
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0210 	bic.w	r2, r3, #16
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <TIM_TI2_ConfigInputStage>:
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0210 	bic.w	r2, r3, #16
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	621a      	str	r2, [r3, #32]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	031b      	lsls	r3, r3, #12
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	619a      	str	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <TIM_TI3_SetConfig>:
 800443e:	b480      	push	{r7}
 8004440:	b087      	sub	sp, #28
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	b2db      	uxtb	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	61da      	str	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <TIM_TI4_SetConfig>:
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	031b      	lsls	r3, r3, #12
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	031b      	lsls	r3, r3, #12
 800450c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	61da      	str	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <TIM_ITRx_SetConfig>:
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	f043 0307 	orr.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <TIM_ETR_SetConfig>:
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <TIM_CCxChannelCmd>:
 800459e:	b480      	push	{r7}
 80045a0:	b087      	sub	sp, #28
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	2201      	movs	r2, #1
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	43db      	mvns	r3, r3
 80045c0:	401a      	ands	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1a      	ldr	r2, [r3, #32]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	fa01 f303 	lsl.w	r3, r1, r3
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e046      	b.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d009      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10c      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800468c:	2300      	movs	r3, #0
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800

080046a4 <HAL_TIMEx_CommutCallback>:
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIMEx_BreakCallback>:
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_Init>:
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e042      	b.n	8004760 <HAL_UART_Init+0x98>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x2c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fc76 	bl	8001fe0 <HAL_UART_MspInit>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fdc5 	bl	800529c <UART_SetConfig>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004720:	611a      	str	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004730:	615a      	str	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	; 0x34
 800475e:	2300      	movs	r3, #0
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_Transmit>:
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b20      	cmp	r3, #32
 8004786:	d16d      	bne.n	8004864 <HAL_UART_Transmit+0xfc>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Transmit+0x2c>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_UART_Transmit+0x30>
 8004794:	2301      	movs	r3, #1
 8004796:	e066      	b.n	8004866 <HAL_UART_Transmit+0xfe>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2221      	movs	r2, #33	; 0x21
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a6:	f7fd fd2d 	bl	8002204 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	849a      	strh	r2, [r3, #36]	; 0x24
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	84da      	strh	r2, [r3, #38]	; 0x26
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c0:	d108      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e003      	b.n	80047dc <HAL_UART_Transmit+0x74>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e02a      	b.n	8004834 <HAL_UART_Transmit+0xcc>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fb14 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_UART_Transmit+0x90>
 80047f4:	2303      	movs	r3, #3
 80047f6:	e036      	b.n	8004866 <HAL_UART_Transmit+0xfe>
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_UART_Transmit+0xae>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3302      	adds	r3, #2
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e007      	b.n	8004826 <HAL_UART_Transmit+0xbe>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	3301      	adds	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1cf      	bne.n	80047de <HAL_UART_Transmit+0x76>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fae4 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_UART_Transmit+0xf0>
 8004854:	2303      	movs	r3, #3
 8004856:	e006      	b.n	8004866 <HAL_UART_Transmit+0xfe>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_UART_Transmit+0xfe>
 8004864:	2302      	movs	r3, #2
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UART_Receive_IT>:
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	d112      	bne.n	80048ae <HAL_UART_Receive_IT+0x40>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Receive_IT+0x26>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Receive_IT+0x2a>
 8004894:	2301      	movs	r3, #1
 8004896:	e00b      	b.n	80048b0 <HAL_UART_Receive_IT+0x42>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	461a      	mov	r2, r3
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fb24 	bl	8004ef2 <UART_Start_Receive_IT>
 80048aa:	4603      	mov	r3, r0
 80048ac:	e000      	b.n	80048b0 <HAL_UART_Receive_IT+0x42>
 80048ae:	2302      	movs	r3, #2
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_UART_IRQHandler>:
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b0ba      	sub	sp, #232	; 0xe8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048de:	2300      	movs	r3, #0
 80048e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048e4:	2300      	movs	r3, #0
 80048e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <HAL_UART_IRQHandler+0x66>
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_UART_IRQHandler+0x66>
 800490a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_UART_IRQHandler+0x66>
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fc01 	bl	800511e <UART_Receive_IT>
 800491c:	e25b      	b.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 800491e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80de 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x22c>
 8004928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_UART_IRQHandler+0x8a>
 8004934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80d1 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x22c>
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xae>
 800494e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xae>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_UART_IRQHandler+0xd2>
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f043 0202 	orr.w	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_UART_IRQHandler+0xf6>
 8004996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0xf6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f043 0204 	orr.w	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <HAL_UART_IRQHandler+0x126>
 80049ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_UART_IRQHandler+0x11a>
 80049c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_UART_IRQHandler+0x126>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f043 0208 	orr.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 81f2 	beq.w	8004dcc <HAL_UART_IRQHandler+0x514>
 80049e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_UART_IRQHandler+0x14e>
 80049f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_UART_IRQHandler+0x14e>
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fb8c 	bl	800511e <UART_Receive_IT>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <HAL_UART_IRQHandler+0x17a>
 8004a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04f      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x21a>
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa96 	bl	8004f64 <UART_EndRxTransfer>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d041      	beq.n	8004aca <HAL_UART_IRQHandler+0x212>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1d9      	bne.n	8004a46 <HAL_UART_IRQHandler+0x18e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d013      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x20a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <HAL_UART_IRQHandler+0x3e0>)
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd fd22 	bl	80024f0 <HAL_DMA_Abort_IT>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x228>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004abc:	4610      	mov	r0, r2
 8004abe:	4798      	blx	r3
 8004ac0:	e00e      	b.n	8004ae0 <HAL_UART_IRQHandler+0x228>
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f993 	bl	8004dee <HAL_UART_ErrorCallback>
 8004ac8:	e00a      	b.n	8004ae0 <HAL_UART_IRQHandler+0x228>
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f98f 	bl	8004dee <HAL_UART_ErrorCallback>
 8004ad0:	e006      	b.n	8004ae0 <HAL_UART_IRQHandler+0x228>
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f98b 	bl	8004dee <HAL_UART_ErrorCallback>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
 8004ade:	e175      	b.n	8004dcc <HAL_UART_IRQHandler+0x514>
 8004ae0:	bf00      	nop
 8004ae2:	e173      	b.n	8004dcc <HAL_UART_IRQHandler+0x514>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f040 814f 	bne.w	8004d8c <HAL_UART_IRQHandler+0x4d4>
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8148 	beq.w	8004d8c <HAL_UART_IRQHandler+0x4d4>
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8141 	beq.w	8004d8c <HAL_UART_IRQHandler+0x4d4>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80b6 	beq.w	8004c9c <HAL_UART_IRQHandler+0x3e4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8145 	beq.w	8004dd0 <HAL_UART_IRQHandler+0x518>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	f080 813e 	bcs.w	8004dd0 <HAL_UART_IRQHandler+0x518>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b5a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	f000 8088 	beq.w	8004c78 <HAL_UART_IRQHandler+0x3c0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1d9      	bne.n	8004b68 <HAL_UART_IRQHandler+0x2b0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	677b      	str	r3, [r7, #116]	; 0x74
 8004bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004be0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e1      	bne.n	8004bb4 <HAL_UART_IRQHandler+0x2fc>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3314      	adds	r3, #20
 8004c10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	667b      	str	r3, [r7, #100]	; 0x64
 8004c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e3      	bne.n	8004bf0 <HAL_UART_IRQHandler+0x338>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	653b      	str	r3, [r7, #80]	; 0x50
 8004c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e3      	bne.n	8004c36 <HAL_UART_IRQHandler+0x37e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd fc01 	bl	800247a <HAL_DMA_Abort>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8b6 	bl	8004e00 <HAL_UARTEx_RxEventCallback>
 8004c94:	e09c      	b.n	8004dd0 <HAL_UART_IRQHandler+0x518>
 8004c96:	bf00      	nop
 8004c98:	08005029 	.word	0x08005029
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 808e 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x51c>
 8004cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8089 	beq.w	8004dd4 <HAL_UART_IRQHandler+0x51c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x40a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3314      	adds	r3, #20
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e3      	bne.n	8004cfa <HAL_UART_IRQHandler+0x442>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	330c      	adds	r3, #12
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0310 	bic.w	r3, r3, #16
 8004d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	69b9      	ldr	r1, [r7, #24]
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e3      	bne.n	8004d40 <HAL_UART_IRQHandler+0x488>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f83b 	bl	8004e00 <HAL_UARTEx_RxEventCallback>
 8004d8a:	e023      	b.n	8004dd4 <HAL_UART_IRQHandler+0x51c>
 8004d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_UART_IRQHandler+0x4f4>
 8004d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_UART_IRQHandler+0x4f4>
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f953 	bl	8005050 <UART_Transmit_IT>
 8004daa:	e014      	b.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f992 	bl	80050ee <UART_EndTransmit_IT>
 8004dca:	e004      	b.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004dcc:	bf00      	nop
 8004dce:	e002      	b.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004dd0:	bf00      	nop
 8004dd2:	e000      	b.n	8004dd6 <HAL_UART_IRQHandler+0x51e>
 8004dd4:	bf00      	nop
 8004dd6:	37e8      	adds	r7, #232	; 0xe8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_TxCpltCallback>:
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <HAL_UART_ErrorCallback>:
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UARTEx_RxEventCallback>:
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <UART_WaitOnFlagUntilTimeout>:
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b090      	sub	sp, #64	; 0x40
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]
 8004e26:	e050      	b.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb4>
 8004e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d04c      	beq.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb4>
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e36:	f7fd f9e5 	bl	8002204 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d241      	bcs.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb4>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e66:	637a      	str	r2, [r7, #52]	; 0x34
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e9a:	623a      	str	r2, [r7, #32]
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	69f9      	ldr	r1, [r7, #28]
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x64>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e00f      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd4>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d09f      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x12>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	3740      	adds	r7, #64	; 0x40
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <UART_Start_Receive_IT>:
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2222      	movs	r2, #34	; 0x22
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <UART_Start_Receive_IT+0x46>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f36:	60da      	str	r2, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	615a      	str	r2, [r3, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0220 	orr.w	r2, r2, #32
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <UART_EndRxTransfer>:
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	; 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x3c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <UART_EndRxTransfer+0xac>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x78>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
 800501e:	bf00      	nop
 8005020:	3754      	adds	r7, #84	; 0x54
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <UART_DMAAbortOnError>:
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	84da      	strh	r2, [r3, #38]	; 0x26
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fed3 	bl	8004dee <HAL_UART_ErrorCallback>
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_Transmit_IT>:
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b21      	cmp	r3, #33	; 0x21
 8005062:	d13e      	bne.n	80050e2 <UART_Transmit_IT+0x92>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506c:	d114      	bne.n	8005098 <UART_Transmit_IT+0x48>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d110      	bne.n	8005098 <UART_Transmit_IT+0x48>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508a:	605a      	str	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]
 8005096:	e008      	b.n	80050aa <UART_Transmit_IT+0x5a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6211      	str	r1, [r2, #32]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4619      	mov	r1, r3
 80050b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <UART_Transmit_IT+0x8e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <UART_Transmit_IT+0x94>
 80050e2:	2302      	movs	r3, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <UART_EndTransmit_IT>:
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe64 	bl	8004ddc <HAL_UART_TxCpltCallback>
 8005114:	2300      	movs	r3, #0
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Receive_IT>:
 800511e:	b580      	push	{r7, lr}
 8005120:	b08c      	sub	sp, #48	; 0x30
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	; 0x22
 8005130:	f040 80ae 	bne.w	8005290 <UART_Receive_IT+0x172>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d117      	bne.n	800516e <UART_Receive_IT+0x50>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d113      	bne.n	800516e <UART_Receive_IT+0x50>
 8005146:	2300      	movs	r3, #0
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	b29a      	uxth	r2, r3
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
 800516c:	e026      	b.n	80051bc <UART_Receive_IT+0x9e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d007      	beq.n	8005192 <UART_Receive_IT+0x74>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <UART_Receive_IT+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <UART_Receive_IT+0x82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e008      	b.n	80051b2 <UART_Receive_IT+0x94>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d15d      	bne.n	800528c <UART_Receive_IT+0x16e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0220 	bic.w	r2, r2, #32
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	615a      	str	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	635a      	str	r2, [r3, #52]	; 0x34
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	2b01      	cmp	r3, #1
 8005214:	d135      	bne.n	8005282 <UART_Receive_IT+0x164>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	623a      	str	r2, [r7, #32]
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_Receive_IT+0xfe>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d10a      	bne.n	8005274 <UART_Receive_IT+0x156>
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fdc0 	bl	8004e00 <HAL_UARTEx_RxEventCallback>
 8005280:	e002      	b.n	8005288 <UART_Receive_IT+0x16a>
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fa08 	bl	8001698 <HAL_UART_RxCpltCallback>
 8005288:	2300      	movs	r3, #0
 800528a:	e002      	b.n	8005292 <UART_Receive_IT+0x174>
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <UART_Receive_IT+0x174>
 8005290:	2302      	movs	r3, #2
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	; 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <UART_SetConfig>:
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052d6:	f023 030c 	bic.w	r3, r3, #12
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	615a      	str	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2c      	ldr	r2, [pc, #176]	; (80053b0 <UART_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <UART_SetConfig+0x70>
 8005304:	f7fd fefe 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	e002      	b.n	8005312 <UART_SetConfig+0x76>
 800530c:	f7fd fee6 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009a      	lsls	r2, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <UART_SetConfig+0x118>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	0119      	lsls	r1, r3, #4
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <UART_SetConfig+0x118>)
 800534a:	fba3 0302 	umull	r0, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2064      	movs	r0, #100	; 0x64
 8005352:	fb00 f303 	mul.w	r3, r0, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <UART_SetConfig+0x118>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005368:	4419      	add	r1, r3
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <UART_SetConfig+0x118>)
 8005382:	fba3 0302 	umull	r0, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2064      	movs	r0, #100	; 0x64
 800538a:	fb00 f303 	mul.w	r3, r0, r3
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	3332      	adds	r3, #50	; 0x32
 8005394:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <UART_SetConfig+0x118>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	440a      	add	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40013800 	.word	0x40013800
 80053b4:	51eb851f 	.word	0x51eb851f

080053b8 <Buzzer_Init>:
 *      Author: Abdallah Alnemr
 */

#include "../Inc/Buzzer.h"

void Buzzer_Init(void){
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053c2:	4802      	ldr	r0, [pc, #8]	; (80053cc <Buzzer_Init+0x14>)
 80053c4:	f7fd faa7 	bl	8002916 <HAL_GPIO_WritePin>
}
 80053c8:	bf00      	nop
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40010c00 	.word	0x40010c00

080053d0 <Buzzer_ON>:

void Buzzer_ON(void){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80053d4:	2201      	movs	r2, #1
 80053d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053da:	4802      	ldr	r0, [pc, #8]	; (80053e4 <Buzzer_ON+0x14>)
 80053dc:	f7fd fa9b 	bl	8002916 <HAL_GPIO_WritePin>
}
 80053e0:	bf00      	nop
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40010c00 	.word	0x40010c00

080053e8 <Buzzer_OFF>:

void Buzzer_OFF(void){
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f2:	4802      	ldr	r0, [pc, #8]	; (80053fc <Buzzer_OFF+0x14>)
 80053f4:	f7fd fa8f 	bl	8002916 <HAL_GPIO_WritePin>
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40010c00 	.word	0x40010c00

08005400 <DC_MOTOR_Init>:
#include "../Inc/DC_MOTOR.h"
#include "../Inc/DC_MOTOR_cfg.h"
#include "../../Core/Inc/main.h"

void DC_MOTOR_Init(uint8_t au8_MOTOR_Instance)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b0ac      	sub	sp, #176	; 0xb0
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005418:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005426:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8005430:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	611a      	str	r2, [r3, #16]
 8005440:	615a      	str	r2, [r3, #20]
 8005442:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t ARR_Value = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint8_t i = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	/*--------[ Configure The 2 Direction Control GPIO Pins ]-------*/

    if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOA || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOA)
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	4ab2      	ldr	r2, [pc, #712]	; (8005724 <DC_MOTOR_Init+0x324>)
 800545a:	015b      	lsls	r3, r3, #5
 800545c:	4413      	add	r3, r2
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4ab1      	ldr	r2, [pc, #708]	; (8005728 <DC_MOTOR_Init+0x328>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d008      	beq.n	8005478 <DC_MOTOR_Init+0x78>
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4aae      	ldr	r2, [pc, #696]	; (8005724 <DC_MOTOR_Init+0x324>)
 800546a:	015b      	lsls	r3, r3, #5
 800546c:	4413      	add	r3, r2
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4aad      	ldr	r2, [pc, #692]	; (8005728 <DC_MOTOR_Init+0x328>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10c      	bne.n	8005492 <DC_MOTOR_Init+0x92>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005478:	4bac      	ldr	r3, [pc, #688]	; (800572c <DC_MOTOR_Init+0x32c>)
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	4aab      	ldr	r2, [pc, #684]	; (800572c <DC_MOTOR_Init+0x32c>)
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	6193      	str	r3, [r2, #24]
 8005484:	4ba9      	ldr	r3, [pc, #676]	; (800572c <DC_MOTOR_Init+0x32c>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	e058      	b.n	8005544 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOB || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOB)
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	4aa3      	ldr	r2, [pc, #652]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005496:	015b      	lsls	r3, r3, #5
 8005498:	4413      	add	r3, r2
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4aa4      	ldr	r2, [pc, #656]	; (8005730 <DC_MOTOR_Init+0x330>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d008      	beq.n	80054b4 <DC_MOTOR_Init+0xb4>
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4a9f      	ldr	r2, [pc, #636]	; (8005724 <DC_MOTOR_Init+0x324>)
 80054a6:	015b      	lsls	r3, r3, #5
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4aa0      	ldr	r2, [pc, #640]	; (8005730 <DC_MOTOR_Init+0x330>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <DC_MOTOR_Init+0xce>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80054b4:	4b9d      	ldr	r3, [pc, #628]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	4a9c      	ldr	r2, [pc, #624]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054ba:	f043 0308 	orr.w	r3, r3, #8
 80054be:	6193      	str	r3, [r2, #24]
 80054c0:	4b9a      	ldr	r3, [pc, #616]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	e03a      	b.n	8005544 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOC || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOC)
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	4a94      	ldr	r2, [pc, #592]	; (8005724 <DC_MOTOR_Init+0x324>)
 80054d2:	015b      	lsls	r3, r3, #5
 80054d4:	4413      	add	r3, r2
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a96      	ldr	r2, [pc, #600]	; (8005734 <DC_MOTOR_Init+0x334>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d008      	beq.n	80054f0 <DC_MOTOR_Init+0xf0>
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4a90      	ldr	r2, [pc, #576]	; (8005724 <DC_MOTOR_Init+0x324>)
 80054e2:	015b      	lsls	r3, r3, #5
 80054e4:	4413      	add	r3, r2
 80054e6:	3304      	adds	r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a92      	ldr	r2, [pc, #584]	; (8005734 <DC_MOTOR_Init+0x334>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <DC_MOTOR_Init+0x10a>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80054f0:	4b8e      	ldr	r3, [pc, #568]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4a8d      	ldr	r2, [pc, #564]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054f6:	f043 0310 	orr.w	r3, r3, #16
 80054fa:	6193      	str	r3, [r2, #24]
 80054fc:	4b8b      	ldr	r3, [pc, #556]	; (800572c <DC_MOTOR_Init+0x32c>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	e01c      	b.n	8005544 <DC_MOTOR_Init+0x144>
    }
    else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOD || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOD)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	4a85      	ldr	r2, [pc, #532]	; (8005724 <DC_MOTOR_Init+0x324>)
 800550e:	015b      	lsls	r3, r3, #5
 8005510:	4413      	add	r3, r2
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a88      	ldr	r2, [pc, #544]	; (8005738 <DC_MOTOR_Init+0x338>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d008      	beq.n	800552c <DC_MOTOR_Init+0x12c>
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4a81      	ldr	r2, [pc, #516]	; (8005724 <DC_MOTOR_Init+0x324>)
 800551e:	015b      	lsls	r3, r3, #5
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a84      	ldr	r2, [pc, #528]	; (8005738 <DC_MOTOR_Init+0x338>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10b      	bne.n	8005544 <DC_MOTOR_Init+0x144>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800552c:	4b7f      	ldr	r3, [pc, #508]	; (800572c <DC_MOTOR_Init+0x32c>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4a7e      	ldr	r2, [pc, #504]	; (800572c <DC_MOTOR_Init+0x32c>)
 8005532:	f043 0320 	orr.w	r3, r3, #32
 8005536:	6193      	str	r3, [r2, #24]
 8005538:	4b7c      	ldr	r3, [pc, #496]	; (800572c <DC_MOTOR_Init+0x32c>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO == GPIOE || DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN;
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	4a77      	ldr	r2, [pc, #476]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005548:	015b      	lsls	r3, r3, #5
 800554a:	4413      	add	r3, r2
 800554c:	3308      	adds	r3, #8
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005554:	2301      	movs	r3, #1
 8005556:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555a:	2302      	movs	r3, #2
 800555c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, &GPIO_InitStruct);
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	4a70      	ldr	r2, [pc, #448]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005564:	015b      	lsls	r3, r3, #5
 8005566:	4413      	add	r3, r2
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7fd f835 	bl	80025e0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN;
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	4a6a      	ldr	r2, [pc, #424]	; (8005724 <DC_MOTOR_Init+0x324>)
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	4413      	add	r3, r2
 800557e:	330a      	adds	r3, #10
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005586:	2301      	movs	r3, #1
 8005588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558c:	2302      	movs	r3, #2
 800558e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_GPIO_Init(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, &GPIO_InitStruct);
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4a63      	ldr	r2, [pc, #396]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005596:	015b      	lsls	r3, r3, #5
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80055a2:	4611      	mov	r1, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd f81b 	bl	80025e0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	4a5d      	ldr	r2, [pc, #372]	; (8005724 <DC_MOTOR_Init+0x324>)
 80055ae:	015b      	lsls	r3, r3, #5
 80055b0:	4413      	add	r3, r2
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	4a5b      	ldr	r2, [pc, #364]	; (8005724 <DC_MOTOR_Init+0x324>)
 80055b8:	015b      	lsls	r3, r3, #5
 80055ba:	4413      	add	r3, r2
 80055bc:	3308      	adds	r3, #8
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	4619      	mov	r1, r3
 80055c4:	f7fd f9a7 	bl	8002916 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4a56      	ldr	r2, [pc, #344]	; (8005724 <DC_MOTOR_Init+0x324>)
 80055cc:	015b      	lsls	r3, r3, #5
 80055ce:	4413      	add	r3, r2
 80055d0:	3304      	adds	r3, #4
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	4a53      	ldr	r2, [pc, #332]	; (8005724 <DC_MOTOR_Init+0x324>)
 80055d8:	015b      	lsls	r3, r3, #5
 80055da:	4413      	add	r3, r2
 80055dc:	330a      	adds	r3, #10
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	4619      	mov	r1, r3
 80055e4:	f7fd f997 	bl	8002916 <HAL_GPIO_WritePin>

	/*--------[ Calculate The PSC & ARR Values To Set PWM Resolution And Approx. The F_pwm ]-------*/

	/* Those Equations Sets The PWM Resolution & Approximates The F_pwm */
	ARR_Value = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80055f4:	e009      	b.n	800560a <DC_MOTOR_Init+0x20a>
	{
		ARR_Value *= 2;
 80055f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for(i=0; i<DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_RES_BITS; i++)
 8005600:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8005604:	3301      	adds	r3, #1
 8005606:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	4a45      	ldr	r2, [pc, #276]	; (8005724 <DC_MOTOR_Init+0x324>)
 800560e:	015b      	lsls	r3, r3, #5
 8005610:	4413      	add	r3, r2
 8005612:	331c      	adds	r3, #28
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800561a:	429a      	cmp	r2, r3
 800561c:	d3eb      	bcc.n	80055f6 <DC_MOTOR_Init+0x1f6>
	}
	PSC_Value = (uint32_t) ((DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_CLK_MHz*1000000) / (ARR_Value*DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_FREQ_Hz));
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	4a40      	ldr	r2, [pc, #256]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005622:	015b      	lsls	r3, r3, #5
 8005624:	4413      	add	r3, r2
 8005626:	3314      	adds	r3, #20
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	4b43      	ldr	r3, [pc, #268]	; (800573c <DC_MOTOR_Init+0x33c>)
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	4619      	mov	r1, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4a3b      	ldr	r2, [pc, #236]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005638:	015b      	lsls	r3, r3, #5
 800563a:	4413      	add	r3, r2
 800563c:	3318      	adds	r3, #24
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	fbb1 f3f3 	udiv	r3, r1, r3
 800564c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PSC_Value--;
 8005650:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005654:	3b01      	subs	r3, #1
 8005656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	ARR_Value -= 2;
 800565a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800565e:	3b02      	subs	r3, #2
 8005660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	/*--------[ Configure The DC Motor PWM Timer Channel ]-------*/

	htim.Instance = DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance;
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	4a2f      	ldr	r2, [pc, #188]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005668:	015b      	lsls	r3, r3, #5
 800566a:	4413      	add	r3, r2
 800566c:	330c      	adds	r3, #12
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	61bb      	str	r3, [r7, #24]
	htim.Init.Prescaler = PSC_Value;
 8005672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005676:	61fb      	str	r3, [r7, #28]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005678:	2300      	movs	r3, #0
 800567a:	623b      	str	r3, [r7, #32]
	htim.Init.Period = ARR_Value;
 800567c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005682:	2300      	movs	r3, #0
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_Base_Init(&htim);
 800568a:	f107 0318 	add.w	r3, r7, #24
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd fd6a 	bl	8003168 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 800569c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80056a0:	f107 0318 	add.w	r3, r7, #24
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fac4 	bl	8003c34 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fd fdfb 	bl	80032ac <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 80056c0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80056c4:	f107 0318 	add.w	r3, r7, #24
 80056c8:	4611      	mov	r1, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe ff8c 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056d0:	2360      	movs	r3, #96	; 0x60
 80056d2:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.Pulse = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	667b      	str	r3, [r7, #100]	; 0x64
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056d8:	2300      	movs	r3, #0
 80056da:	66bb      	str	r3, [r7, #104]	; 0x68
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056dc:	2300      	movs	r3, #0
 80056de:	673b      	str	r3, [r7, #112]	; 0x70
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <DC_MOTOR_Init+0x324>)
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	4413      	add	r3, r2
 80056e8:	3310      	adds	r3, #16
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80056f0:	f107 0318 	add.w	r3, r7, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe f9db 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 80056fa:	f107 0318 	add.w	r3, r7, #24
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc f9da 	bl	8001ab8 <HAL_TIM_MspPostInit>

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH);
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <DC_MOTOR_Init+0x324>)
 8005708:	015b      	lsls	r3, r3, #5
 800570a:	4413      	add	r3, r2
 800570c:	3310      	adds	r3, #16
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fe20 	bl	800335c <HAL_TIM_PWM_Start>
}
 800571c:	bf00      	nop
 800571e:	37b0      	adds	r7, #176	; 0xb0
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	0800ab8c 	.word	0x0800ab8c
 8005728:	40010800 	.word	0x40010800
 800572c:	40021000 	.word	0x40021000
 8005730:	40010c00 	.word	0x40010c00
 8005734:	40011000 	.word	0x40011000
 8005738:	40011400 	.word	0x40011400
 800573c:	000f4240 	.word	0x000f4240

08005740 <DC_MOTOR_Start>:

void DC_MOTOR_Start(uint8_t au8_MOTOR_Instance, uint8_t au8_DIR, uint16_t au16_SPEED)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
 800574a:	460b      	mov	r3, r1
 800574c:	71bb      	strb	r3, [r7, #6]
 800574e:	4613      	mov	r3, r2
 8005750:	80bb      	strh	r3, [r7, #4]
	/* Write To The 2 Direction Control Pins */
	if(au8_DIR == DIR_CW)
 8005752:	79bb      	ldrb	r3, [r7, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11f      	bne.n	8005798 <DC_MOTOR_Start+0x58>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 1);
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	4a40      	ldr	r2, [pc, #256]	; (800585c <DC_MOTOR_Start+0x11c>)
 800575c:	015b      	lsls	r3, r3, #5
 800575e:	4413      	add	r3, r2
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	4a3d      	ldr	r2, [pc, #244]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005766:	015b      	lsls	r3, r3, #5
 8005768:	4413      	add	r3, r2
 800576a:	3308      	adds	r3, #8
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	4619      	mov	r1, r3
 8005772:	f7fd f8d0 	bl	8002916 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	4a38      	ldr	r2, [pc, #224]	; (800585c <DC_MOTOR_Start+0x11c>)
 800577a:	015b      	lsls	r3, r3, #5
 800577c:	4413      	add	r3, r2
 800577e:	3304      	adds	r3, #4
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	4a35      	ldr	r2, [pc, #212]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005786:	015b      	lsls	r3, r3, #5
 8005788:	4413      	add	r3, r2
 800578a:	330a      	adds	r3, #10
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	4619      	mov	r1, r3
 8005792:	f7fd f8c0 	bl	8002916 <HAL_GPIO_WritePin>
 8005796:	e021      	b.n	80057dc <DC_MOTOR_Start+0x9c>
	}
	else if(au8_DIR == DIR_CCW)
 8005798:	79bb      	ldrb	r3, [r7, #6]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d11e      	bne.n	80057dc <DC_MOTOR_Start+0x9c>
	{
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	4a2e      	ldr	r2, [pc, #184]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057a2:	015b      	lsls	r3, r3, #5
 80057a4:	4413      	add	r3, r2
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	4a2c      	ldr	r2, [pc, #176]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057ac:	015b      	lsls	r3, r3, #5
 80057ae:	4413      	add	r3, r2
 80057b0:	3308      	adds	r3, #8
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	2200      	movs	r2, #0
 80057b6:	4619      	mov	r1, r3
 80057b8:	f7fd f8ad 	bl	8002916 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	4a27      	ldr	r2, [pc, #156]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057c0:	015b      	lsls	r3, r3, #5
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	4a24      	ldr	r2, [pc, #144]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057cc:	015b      	lsls	r3, r3, #5
 80057ce:	4413      	add	r3, r2
 80057d0:	330a      	adds	r3, #10
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	4619      	mov	r1, r3
 80057d8:	f7fd f89d 	bl	8002916 <HAL_GPIO_WritePin>
	}

	/* Write The Speed Value To The PWM CH DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	4a1f      	ldr	r2, [pc, #124]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057e0:	015b      	lsls	r3, r3, #5
 80057e2:	4413      	add	r3, r2
 80057e4:	3310      	adds	r3, #16
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d108      	bne.n	80057fe <DC_MOTOR_Start+0xbe>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = au16_SPEED;
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <DC_MOTOR_Start+0x11c>)
 80057f0:	015b      	lsls	r3, r3, #5
 80057f2:	4413      	add	r3, r2
 80057f4:	330c      	adds	r3, #12
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	88ba      	ldrh	r2, [r7, #4]
 80057fa:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
	}
}
 80057fc:	e029      	b.n	8005852 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	4a16      	ldr	r2, [pc, #88]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005802:	015b      	lsls	r3, r3, #5
 8005804:	4413      	add	r3, r2
 8005806:	3310      	adds	r3, #16
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b04      	cmp	r3, #4
 800580c:	d108      	bne.n	8005820 <DC_MOTOR_Start+0xe0>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = au16_SPEED;
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	4a12      	ldr	r2, [pc, #72]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005812:	015b      	lsls	r3, r3, #5
 8005814:	4413      	add	r3, r2
 8005816:	330c      	adds	r3, #12
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	88ba      	ldrh	r2, [r7, #4]
 800581c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800581e:	e018      	b.n	8005852 <DC_MOTOR_Start+0x112>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4a0e      	ldr	r2, [pc, #56]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005824:	015b      	lsls	r3, r3, #5
 8005826:	4413      	add	r3, r2
 8005828:	3310      	adds	r3, #16
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b08      	cmp	r3, #8
 800582e:	d108      	bne.n	8005842 <DC_MOTOR_Start+0x102>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = au16_SPEED;
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	4a0a      	ldr	r2, [pc, #40]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005834:	015b      	lsls	r3, r3, #5
 8005836:	4413      	add	r3, r2
 8005838:	330c      	adds	r3, #12
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	88ba      	ldrh	r2, [r7, #4]
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005840:	e007      	b.n	8005852 <DC_MOTOR_Start+0x112>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = au16_SPEED;
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4a05      	ldr	r2, [pc, #20]	; (800585c <DC_MOTOR_Start+0x11c>)
 8005846:	015b      	lsls	r3, r3, #5
 8005848:	4413      	add	r3, r2
 800584a:	330c      	adds	r3, #12
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	88ba      	ldrh	r2, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	0800ab8c 	.word	0x0800ab8c

08005860 <DC_MOTOR_Stop>:
		HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 1);
	}
}

void DC_MOTOR_Stop(uint8_t au8_MOTOR_Instance)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
	/* Write To The 2 Direction Control Pins */
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR1_PIN, 0);
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 800586e:	015b      	lsls	r3, r3, #5
 8005870:	4413      	add	r3, r2
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 8005878:	015b      	lsls	r3, r3, #5
 800587a:	4413      	add	r3, r2
 800587c:	3308      	adds	r3, #8
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	4619      	mov	r1, r3
 8005884:	f7fd f847 	bl	8002916 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_GPIO, DC_MOTOR_CfgParam[au8_MOTOR_Instance].DIR2_PIN, 0);
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	4a27      	ldr	r2, [pc, #156]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 800588c:	015b      	lsls	r3, r3, #5
 800588e:	4413      	add	r3, r2
 8005890:	3304      	adds	r3, #4
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	4a24      	ldr	r2, [pc, #144]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 8005898:	015b      	lsls	r3, r3, #5
 800589a:	4413      	add	r3, r2
 800589c:	330a      	adds	r3, #10
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	4619      	mov	r1, r3
 80058a4:	f7fd f837 	bl	8002916 <HAL_GPIO_WritePin>

	/* Write ZERO To The PWM Ch DutyCycle Register */
	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_1)
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 80058ac:	015b      	lsls	r3, r3, #5
 80058ae:	4413      	add	r3, r2
 80058b0:	3310      	adds	r3, #16
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d108      	bne.n	80058ca <DC_MOTOR_Stop+0x6a>
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR1 = 0;
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 80058bc:	015b      	lsls	r3, r3, #5
 80058be:	4413      	add	r3, r2
 80058c0:	330c      	adds	r3, #12
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else
	{
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
	}
}
 80058c8:	e029      	b.n	800591e <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_2)
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	4a16      	ldr	r2, [pc, #88]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 80058ce:	015b      	lsls	r3, r3, #5
 80058d0:	4413      	add	r3, r2
 80058d2:	3310      	adds	r3, #16
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d108      	bne.n	80058ec <DC_MOTOR_Stop+0x8c>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR2 = 0;
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4a12      	ldr	r2, [pc, #72]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 80058de:	015b      	lsls	r3, r3, #5
 80058e0:	4413      	add	r3, r2
 80058e2:	330c      	adds	r3, #12
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2200      	movs	r2, #0
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80058ea:	e018      	b.n	800591e <DC_MOTOR_Stop+0xbe>
	else if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].PWM_TIM_CH == TIM_CHANNEL_3)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 80058f0:	015b      	lsls	r3, r3, #5
 80058f2:	4413      	add	r3, r2
 80058f4:	3310      	adds	r3, #16
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d108      	bne.n	800590e <DC_MOTOR_Stop+0xae>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR3 = 0;
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 8005900:	015b      	lsls	r3, r3, #5
 8005902:	4413      	add	r3, r2
 8005904:	330c      	adds	r3, #12
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800590c:	e007      	b.n	800591e <DC_MOTOR_Stop+0xbe>
		DC_MOTOR_CfgParam[au8_MOTOR_Instance].TIM_Instance->CCR4 = 0;
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	4a05      	ldr	r2, [pc, #20]	; (8005928 <DC_MOTOR_Stop+0xc8>)
 8005912:	015b      	lsls	r3, r3, #5
 8005914:	4413      	add	r3, r2
 8005916:	330c      	adds	r3, #12
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	0800ab8c 	.word	0x0800ab8c

0800592c <HCSR04_Init>:
static HCSR04_info gs_HCSR04_info[HCSR04_UNITS] = {0};



void HCSR04_Init(uint8_t au8_HCSR04_Instance, TIM_HandleTypeDef* TMR_Handle)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b094      	sub	sp, #80	; 0x50
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef TRIG_GPIO_InitStruct = {0};
 8005938:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	605a      	str	r2, [r3, #4]
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800595e:	f107 0318 	add.w	r3, r7, #24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	60da      	str	r2, [r3, #12]

	/*--------[ Configure The HCSR04 TRIGGER GPIO Pin ]-------*/

    if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOA)
 800596c:	79fa      	ldrb	r2, [r7, #7]
 800596e:	4987      	ldr	r1, [pc, #540]	; (8005b8c <HCSR04_Init+0x260>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a84      	ldr	r2, [pc, #528]	; (8005b90 <HCSR04_Init+0x264>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HCSR04_Init+0x70>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005982:	4b84      	ldr	r3, [pc, #528]	; (8005b94 <HCSR04_Init+0x268>)
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	4a83      	ldr	r2, [pc, #524]	; (8005b94 <HCSR04_Init+0x268>)
 8005988:	f043 0304 	orr.w	r3, r3, #4
 800598c:	6193      	str	r3, [r2, #24]
 800598e:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HCSR04_Init+0x268>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	e046      	b.n	8005a2a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOB)
 800599c:	79fa      	ldrb	r2, [r7, #7]
 800599e:	497b      	ldr	r1, [pc, #492]	; (8005b8c <HCSR04_Init+0x260>)
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a7a      	ldr	r2, [pc, #488]	; (8005b98 <HCSR04_Init+0x26c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HCSR04_Init+0xa0>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 80059b2:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <HCSR04_Init+0x268>)
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	4a77      	ldr	r2, [pc, #476]	; (8005b94 <HCSR04_Init+0x268>)
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	6193      	str	r3, [r2, #24]
 80059be:	4b75      	ldr	r3, [pc, #468]	; (8005b94 <HCSR04_Init+0x268>)
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	e02e      	b.n	8005a2a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOC)
 80059cc:	79fa      	ldrb	r2, [r7, #7]
 80059ce:	496f      	ldr	r1, [pc, #444]	; (8005b8c <HCSR04_Init+0x260>)
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6f      	ldr	r2, [pc, #444]	; (8005b9c <HCSR04_Init+0x270>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10c      	bne.n	80059fc <HCSR04_Init+0xd0>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <HCSR04_Init+0x268>)
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4a6b      	ldr	r2, [pc, #428]	; (8005b94 <HCSR04_Init+0x268>)
 80059e8:	f043 0310 	orr.w	r3, r3, #16
 80059ec:	6193      	str	r3, [r2, #24]
 80059ee:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <HCSR04_Init+0x268>)
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	e016      	b.n	8005a2a <HCSR04_Init+0xfe>
    }
    else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOD)
 80059fc:	79fa      	ldrb	r2, [r7, #7]
 80059fe:	4963      	ldr	r1, [pc, #396]	; (8005b8c <HCSR04_Init+0x260>)
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a64      	ldr	r2, [pc, #400]	; (8005ba0 <HCSR04_Init+0x274>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10b      	bne.n	8005a2a <HCSR04_Init+0xfe>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a12:	4b60      	ldr	r3, [pc, #384]	; (8005b94 <HCSR04_Init+0x268>)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4a5f      	ldr	r2, [pc, #380]	; (8005b94 <HCSR04_Init+0x268>)
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6193      	str	r3, [r2, #24]
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <HCSR04_Init+0x268>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
    }
    /*else if(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO == GPIOE)
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
    }*/
    TRIG_GPIO_InitStruct.Pin = HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN;
 8005a2a:	79fa      	ldrb	r2, [r7, #7]
 8005a2c:	4957      	ldr	r1, [pc, #348]	; (8005b8c <HCSR04_Init+0x260>)
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3304      	adds	r3, #4
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	643b      	str	r3, [r7, #64]	; 0x40
    TRIG_GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	647b      	str	r3, [r7, #68]	; 0x44
    TRIG_GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	64bb      	str	r3, [r7, #72]	; 0x48
    TRIG_GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a46:	2302      	movs	r3, #2
 8005a48:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_GPIO_Init(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, &TRIG_GPIO_InitStruct);
 8005a4a:	79fa      	ldrb	r2, [r7, #7]
 8005a4c:	494f      	ldr	r1, [pc, #316]	; (8005b8c <HCSR04_Init+0x260>)
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fc fdbd 	bl	80025e0 <HAL_GPIO_Init>

	/*--------[ Initialize The HCSR04 Static Global Info ]-------*/

	gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->PSC;
 8005a66:	79fa      	ldrb	r2, [r7, #7]
 8005a68:	4948      	ldr	r1, [pc, #288]	; (8005b8c <HCSR04_Init+0x260>)
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3308      	adds	r3, #8
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005a7c:	4849      	ldr	r0, [pc, #292]	; (8005ba4 <HCSR04_Init+0x278>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4403      	add	r3, r0
 8005a88:	3304      	adds	r3, #4
 8005a8a:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance->ARR;
 8005a8c:	79fa      	ldrb	r2, [r7, #7]
 8005a8e:	493f      	ldr	r1, [pc, #252]	; (8005b8c <HCSR04_Init+0x260>)
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	79fa      	ldrb	r2, [r7, #7]
 8005aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005aa2:	4840      	ldr	r0, [pc, #256]	; (8005ba4 <HCSR04_Init+0x278>)
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4403      	add	r3, r0
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6019      	str	r1, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].TMR_OVC = 0;
 8005ab2:	79fa      	ldrb	r2, [r7, #7]
 8005ab4:	493b      	ldr	r1, [pc, #236]	; (8005ba4 <HCSR04_Init+0x278>)
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	801a      	strh	r2, [r3, #0]
	gs_HCSR04_info[au8_HCSR04_Instance].HTIM = TMR_Handle;
 8005ac6:	79fa      	ldrb	r2, [r7, #7]
 8005ac8:	4936      	ldr	r1, [pc, #216]	; (8005ba4 <HCSR04_Init+0x278>)
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	331c      	adds	r3, #28
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	601a      	str	r2, [r3, #0]
	if(gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR == 0)
 8005ada:	79fa      	ldrb	r2, [r7, #7]
 8005adc:	4931      	ldr	r1, [pc, #196]	; (8005ba4 <HCSR04_Init+0x278>)
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	3308      	adds	r3, #8
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <HCSR04_Init+0x1da>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR = 65535;
 8005af0:	79fa      	ldrb	r2, [r7, #7]
 8005af2:	492c      	ldr	r1, [pc, #176]	; (8005ba4 <HCSR04_Init+0x278>)
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3308      	adds	r3, #8
 8005b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b04:	601a      	str	r2, [r3, #0]
	}
	if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_1)
 8005b06:	79fa      	ldrb	r2, [r7, #7]
 8005b08:	4920      	ldr	r1, [pc, #128]	; (8005b8c <HCSR04_Init+0x260>)
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	330c      	adds	r3, #12
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <HCSR04_Init+0x206>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	4921      	ldr	r1, [pc, #132]	; (8005ba4 <HCSR04_Init+0x278>)
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3320      	adds	r3, #32
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e04f      	b.n	8005bd2 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_2)
 8005b32:	79fa      	ldrb	r2, [r7, #7]
 8005b34:	4915      	ldr	r1, [pc, #84]	; (8005b8c <HCSR04_Init+0x260>)
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	330c      	adds	r3, #12
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d10a      	bne.n	8005b5e <HCSR04_Init+0x232>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b48:	79fa      	ldrb	r2, [r7, #7]
 8005b4a:	4916      	ldr	r1, [pc, #88]	; (8005ba4 <HCSR04_Init+0x278>)
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3320      	adds	r3, #32
 8005b58:	2202      	movs	r2, #2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e039      	b.n	8005bd2 <HCSR04_Init+0x2a6>
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_3)
 8005b5e:	79fa      	ldrb	r2, [r7, #7]
 8005b60:	490a      	ldr	r1, [pc, #40]	; (8005b8c <HCSR04_Init+0x260>)
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d119      	bne.n	8005ba8 <HCSR04_Init+0x27c>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b74:	79fa      	ldrb	r2, [r7, #7]
 8005b76:	490b      	ldr	r1, [pc, #44]	; (8005ba4 <HCSR04_Init+0x278>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	3320      	adds	r3, #32
 8005b84:	2204      	movs	r2, #4
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	e023      	b.n	8005bd2 <HCSR04_Init+0x2a6>
 8005b8a:	bf00      	nop
 8005b8c:	0800abac 	.word	0x0800abac
 8005b90:	40010800 	.word	0x40010800
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40010c00 	.word	0x40010c00
 8005b9c:	40011000 	.word	0x40011000
 8005ba0:	40011400 	.word	0x40011400
 8005ba4:	20000958 	.word	0x20000958
	}
	else if(HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH == TIM_CHANNEL_4)
 8005ba8:	79fa      	ldrb	r2, [r7, #7]
 8005baa:	4941      	ldr	r1, [pc, #260]	; (8005cb0 <HCSR04_Init+0x384>)
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d109      	bne.n	8005bd2 <HCSR04_Init+0x2a6>
	{
		gs_HCSR04_info[au8_HCSR04_Instance].ACTIV_CH = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	493c      	ldr	r1, [pc, #240]	; (8005cb4 <HCSR04_Init+0x388>)
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	3320      	adds	r3, #32
 8005bce:	2208      	movs	r2, #8
 8005bd0:	701a      	strb	r2, [r3, #0]
	}

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/

	TMR_Handle->Instance = HCSR04_CfgParam[au8_HCSR04_Instance].TIM_Instance;
 8005bd2:	79fa      	ldrb	r2, [r7, #7]
 8005bd4:	4936      	ldr	r1, [pc, #216]	; (8005cb0 <HCSR04_Init+0x384>)
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3308      	adds	r3, #8
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.Prescaler = gs_HCSR04_info[au8_HCSR04_Instance].TMR_PSC;
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	4932      	ldr	r1, [pc, #200]	; (8005cb4 <HCSR04_Init+0x388>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
	TMR_Handle->Init.Period = gs_HCSR04_info[au8_HCSR04_Instance].TMR_ARR;
 8005c04:	79fa      	ldrb	r2, [r7, #7]
 8005c06:	492b      	ldr	r1, [pc, #172]	; (8005cb4 <HCSR04_Init+0x388>)
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	3308      	adds	r3, #8
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	60da      	str	r2, [r3, #12]
	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	611a      	str	r2, [r3, #16]
	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2280      	movs	r2, #128	; 0x80
 8005c24:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(TMR_Handle);
 8005c26:	6838      	ldr	r0, [r7, #0]
 8005c28:	f7fd fa9e 	bl	8003168 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8005c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c36:	4619      	mov	r1, r3
 8005c38:	6838      	ldr	r0, [r7, #0]
 8005c3a:	f7fd fffb 	bl	8003c34 <HAL_TIM_ConfigClockSource>
	HAL_TIM_IC_Init(TMR_Handle);
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f7fd fc2e 	bl	80034a0 <HAL_TIM_IC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c44:	2300      	movs	r3, #0
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8005c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c50:	4619      	mov	r1, r3
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	f7fe fcc8 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
	sConfigIC.ICFilter = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_IC_ConfigChannel(TMR_Handle, &sConfigIC, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005c68:	79fa      	ldrb	r2, [r7, #7]
 8005c6a:	4911      	ldr	r1, [pc, #68]	; (8005cb0 <HCSR04_Init+0x384>)
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	330c      	adds	r3, #12
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f107 0318 	add.w	r3, r7, #24
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6838      	ldr	r0, [r7, #0]
 8005c82:	f7fd fe79 	bl	8003978 <HAL_TIM_IC_ConfigChannel>

	/*--------[ Start The ICU Channel ]-------*/

	HAL_TIM_Base_Start_IT(TMR_Handle);
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f7fd fabe 	bl	8003208 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(TMR_Handle, HCSR04_CfgParam[au8_HCSR04_Instance].IC_TIM_CH);
 8005c8c:	79fa      	ldrb	r2, [r7, #7]
 8005c8e:	4908      	ldr	r1, [pc, #32]	; (8005cb0 <HCSR04_Init+0x384>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6838      	ldr	r0, [r7, #0]
 8005ca2:	f7fd fc55 	bl	8003550 <HAL_TIM_IC_Start_IT>
}
 8005ca6:	bf00      	nop
 8005ca8:	3750      	adds	r7, #80	; 0x50
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	0800abac 	.word	0x0800abac
 8005cb4:	20000958 	.word	0x20000958

08005cb8 <HCSR04_TMR_OVF_ISR>:


void HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
	for(i=0; i<HCSR04_UNITS; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
 8005cc8:	e023      	b.n	8005d12 <HCSR04_TMR_OVF_ISR+0x5a>
	{
		if(htim->Instance == HCSR04_CfgParam[i].TIM_Instance)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6819      	ldr	r1, [r3, #0]
 8005cce:	7bfa      	ldrb	r2, [r7, #15]
 8005cd0:	4814      	ldr	r0, [pc, #80]	; (8005d24 <HCSR04_TMR_OVF_ISR+0x6c>)
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4403      	add	r3, r0
 8005cdc:	3308      	adds	r3, #8
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d113      	bne.n	8005d0c <HCSR04_TMR_OVF_ISR+0x54>
		{
			gs_HCSR04_info[i].TMR_OVC++;
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	4910      	ldr	r1, [pc, #64]	; (8005d28 <HCSR04_TMR_OVF_ISR+0x70>)
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	b298      	uxth	r0, r3
 8005cfa:	490b      	ldr	r1, [pc, #44]	; (8005d28 <HCSR04_TMR_OVF_ISR+0x70>)
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3302      	adds	r3, #2
 8005d08:	4602      	mov	r2, r0
 8005d0a:	801a      	strh	r2, [r3, #0]
	for(i=0; i<HCSR04_UNITS; i++)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0d8      	beq.n	8005cca <HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	0800abac 	.word	0x0800abac
 8005d28:	20000958 	.word	0x20000958
 8005d2c:	00000000 	.word	0x00000000

08005d30 <HCSR04_TMR_IC_ISR>:


void HCSR04_TMR_IC_ISR(TIM_HandleTypeDef* htim)
{
 8005d30:	b5b0      	push	{r4, r5, r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	73fb      	strb	r3, [r7, #15]
	uint32_t PS = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<HCSR04_UNITS; i++)
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e22a      	b.n	800619c <HCSR04_TMR_IC_ISR+0x46c>
	{
		if((htim->Instance == HCSR04_CfgParam[i].TIM_Instance) && (htim->Channel == gs_HCSR04_info[i].ACTIV_CH))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6819      	ldr	r1, [r3, #0]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	486b      	ldr	r0, [pc, #428]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4403      	add	r3, r0
 8005d58:	3308      	adds	r3, #8
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	f040 821a 	bne.w	8006196 <HCSR04_TMR_IC_ISR+0x466>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7f19      	ldrb	r1, [r3, #28]
 8005d66:	7bfa      	ldrb	r2, [r7, #15]
 8005d68:	4865      	ldr	r0, [pc, #404]	; (8005f00 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4403      	add	r3, r0
 8005d74:	3320      	adds	r3, #32
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	f040 820c 	bne.w	8006196 <HCSR04_TMR_IC_ISR+0x466>
		{
			if (gs_HCSR04_info[i].EDGE_STATE == 0)
 8005d7e:	7bfa      	ldrb	r2, [r7, #15]
 8005d80:	495f      	ldr	r1, [pc, #380]	; (8005f00 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f040 80b8 	bne.w	8005f04 <HCSR04_TMR_IC_ISR+0x1d4>
			{
				// Capture T1 & Reverse The ICU Edge Polarity
				gs_HCSR04_info[i].T1 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005d94:	7bfa      	ldrb	r2, [r7, #15]
 8005d96:	4959      	ldr	r1, [pc, #356]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	330c      	adds	r3, #12
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	7bfc      	ldrb	r4, [r7, #15]
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fe f80a 	bl	8003dc4 <HAL_TIM_ReadCapturedValue>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4953      	ldr	r1, [pc, #332]	; (8005f00 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005db4:	4623      	mov	r3, r4
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4423      	add	r3, r4
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 1;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	494e      	ldr	r1, [pc, #312]	; (8005f00 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005dd4:	7bfa      	ldrb	r2, [r7, #15]
 8005dd6:	4949      	ldr	r1, [pc, #292]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	330c      	adds	r3, #12
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d108      	bne.n	8005dfc <HCSR04_TMR_IC_ISR+0xcc>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6a1a      	ldr	r2, [r3, #32]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 020a 	bic.w	r2, r2, #10
 8005df8:	621a      	str	r2, [r3, #32]
 8005dfa:	e02f      	b.n	8005e5c <HCSR04_TMR_IC_ISR+0x12c>
 8005dfc:	7bfa      	ldrb	r2, [r7, #15]
 8005dfe:	493f      	ldr	r1, [pc, #252]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d108      	bne.n	8005e24 <HCSR04_TMR_IC_ISR+0xf4>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e20:	6213      	str	r3, [r2, #32]
 8005e22:	e01b      	b.n	8005e5c <HCSR04_TMR_IC_ISR+0x12c>
 8005e24:	7bfa      	ldrb	r2, [r7, #15]
 8005e26:	4935      	ldr	r1, [pc, #212]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	330c      	adds	r3, #12
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d108      	bne.n	8005e4c <HCSR04_TMR_IC_ISR+0x11c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e48:	6213      	str	r3, [r2, #32]
 8005e4a:	e007      	b.n	8005e5c <HCSR04_TMR_IC_ISR+0x12c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e5a:	6213      	str	r3, [r2, #32]
 8005e5c:	7bfa      	ldrb	r2, [r7, #15]
 8005e5e:	4927      	ldr	r1, [pc, #156]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d108      	bne.n	8005e84 <HCSR04_TMR_IC_ISR+0x154>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0202 	orr.w	r2, r2, #2
 8005e80:	621a      	str	r2, [r3, #32]
 8005e82:	e02f      	b.n	8005ee4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	491d      	ldr	r1, [pc, #116]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	330c      	adds	r3, #12
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d108      	bne.n	8005eac <HCSR04_TMR_IC_ISR+0x17c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	f043 0320 	orr.w	r3, r3, #32
 8005ea8:	6213      	str	r3, [r2, #32]
 8005eaa:	e01b      	b.n	8005ee4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	4913      	ldr	r1, [pc, #76]	; (8005efc <HCSR04_TMR_IC_ISR+0x1cc>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	330c      	adds	r3, #12
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d108      	bne.n	8005ed4 <HCSR04_TMR_IC_ISR+0x1a4>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ed0:	6213      	str	r3, [r2, #32]
 8005ed2:	e007      	b.n	8005ee4 <HCSR04_TMR_IC_ISR+0x1b4>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ee2:	6213      	str	r3, [r2, #32]
				gs_HCSR04_info[i].TMR_OVC = 0;
 8005ee4:	7bfa      	ldrb	r2, [r7, #15]
 8005ee6:	4906      	ldr	r1, [pc, #24]	; (8005f00 <HCSR04_TMR_IC_ISR+0x1d0>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e14d      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x466>
 8005efa:	bf00      	nop
 8005efc:	0800abac 	.word	0x0800abac
 8005f00:	20000958 	.word	0x20000958
			}
			else if (gs_HCSR04_info[i].EDGE_STATE == 1)
 8005f04:	7bfa      	ldrb	r2, [r7, #15]
 8005f06:	49ac      	ldr	r1, [pc, #688]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 813e 	bne.w	8006196 <HCSR04_TMR_IC_ISR+0x466>
			{
				// Read The Current ARR & Prescaler Values For The Timer
				PS = HCSR04_CfgParam[i].TIM_Instance->PSC;
 8005f1a:	7bfa      	ldrb	r2, [r7, #15]
 8005f1c:	49a7      	ldr	r1, [pc, #668]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	3308      	adds	r3, #8
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	60bb      	str	r3, [r7, #8]
				gs_HCSR04_info[i].TMR_ARR = HCSR04_CfgParam[i].TIM_Instance->ARR;
 8005f30:	7bfa      	ldrb	r2, [r7, #15]
 8005f32:	49a2      	ldr	r1, [pc, #648]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 8005f34:	4613      	mov	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	3308      	adds	r3, #8
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f46:	489c      	ldr	r0, [pc, #624]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4403      	add	r3, r0
 8005f52:	3308      	adds	r3, #8
 8005f54:	6019      	str	r1, [r3, #0]
				// Capture T2 & Calculate The Distance
				gs_HCSR04_info[i].T2 = HAL_TIM_ReadCapturedValue(htim, HCSR04_CfgParam[i].IC_TIM_CH);
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	4998      	ldr	r1, [pc, #608]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	330c      	adds	r3, #12
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	7bfc      	ldrb	r4, [r7, #15]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fd ff29 	bl	8003dc4 <HAL_TIM_ReadCapturedValue>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4990      	ldr	r1, [pc, #576]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005f76:	4623      	mov	r3, r4
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4423      	add	r3, r4
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	3310      	adds	r3, #16
 8005f82:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].T2 += (gs_HCSR04_info[i].TMR_OVC * (gs_HCSR04_info[i].TMR_ARR+1));
 8005f84:	7bfa      	ldrb	r2, [r7, #15]
 8005f86:	498c      	ldr	r1, [pc, #560]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	3310      	adds	r3, #16
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	4887      	ldr	r0, [pc, #540]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4403      	add	r3, r0
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	461c      	mov	r4, r3
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	4882      	ldr	r0, [pc, #520]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4403      	add	r3, r0
 8005fb8:	3308      	adds	r3, #8
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	fb04 f303 	mul.w	r3, r4, r3
 8005fc2:	7bfa      	ldrb	r2, [r7, #15]
 8005fc4:	4419      	add	r1, r3
 8005fc6:	487c      	ldr	r0, [pc, #496]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4403      	add	r3, r0
 8005fd2:	3310      	adds	r3, #16
 8005fd4:	6019      	str	r1, [r3, #0]
				gs_HCSR04_info[i].DIFF = gs_HCSR04_info[i].T2 - gs_HCSR04_info[i].T1;
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	4977      	ldr	r1, [pc, #476]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005fda:	4613      	mov	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	6819      	ldr	r1, [r3, #0]
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	4873      	ldr	r0, [pc, #460]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4403      	add	r3, r0
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	7bfa      	ldrb	r2, [r7, #15]
 8005ffc:	1ac9      	subs	r1, r1, r3
 8005ffe:	486e      	ldr	r0, [pc, #440]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4403      	add	r3, r0
 800600a:	3314      	adds	r3, #20
 800600c:	6019      	str	r1, [r3, #0]
				// Write The Distance Value To The Global Struct & Reverse The ICU Edge
				gs_HCSR04_info[i].DISTANCE = (gs_HCSR04_info[i].DIFF * 0.017)/(HCSR04_CfgParam[i].TIM_CLK_MHz/(PS+1));
 800600e:	7bfa      	ldrb	r2, [r7, #15]
 8006010:	4969      	ldr	r1, [pc, #420]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	3314      	adds	r3, #20
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f7fa f9e9 	bl	80003f8 <__aeabi_ui2d>
 8006026:	a362      	add	r3, pc, #392	; (adr r3, 80061b0 <HCSR04_TMR_IC_ISR+0x480>)
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa fa5e 	bl	80004ec <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4614      	mov	r4, r2
 8006036:	461d      	mov	r5, r3
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	4960      	ldr	r1, [pc, #384]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3310      	adds	r3, #16
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3301      	adds	r3, #1
 800604e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006052:	4618      	mov	r0, r3
 8006054:	f7fa f9d0 	bl	80003f8 <__aeabi_ui2d>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa fb6e 	bl	8000740 <__aeabi_ddiv>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	7bfc      	ldrb	r4, [r7, #15]
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	f7fa fd15 	bl	8000a9c <__aeabi_d2f>
 8006072:	4602      	mov	r2, r0
 8006074:	4950      	ldr	r1, [pc, #320]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8006076:	4623      	mov	r3, r4
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4423      	add	r3, r4
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3318      	adds	r3, #24
 8006082:	601a      	str	r2, [r3, #0]
				gs_HCSR04_info[i].EDGE_STATE = 0;
 8006084:	7bfa      	ldrb	r2, [r7, #15]
 8006086:	494c      	ldr	r1, [pc, #304]	; (80061b8 <HCSR04_TMR_IC_ISR+0x488>)
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR04_CfgParam[i].IC_TIM_CH, TIM_INPUTCHANNELPOLARITY_RISING);
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	4948      	ldr	r1, [pc, #288]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	330c      	adds	r3, #12
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <HCSR04_TMR_IC_ISR+0x38e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1a      	ldr	r2, [r3, #32]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 020a 	bic.w	r2, r2, #10
 80060ba:	621a      	str	r2, [r3, #32]
 80060bc:	e02f      	b.n	800611e <HCSR04_TMR_IC_ISR+0x3ee>
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	493e      	ldr	r1, [pc, #248]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	330c      	adds	r3, #12
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d108      	bne.n	80060e6 <HCSR04_TMR_IC_ISR+0x3b6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060e2:	6213      	str	r3, [r2, #32]
 80060e4:	e01b      	b.n	800611e <HCSR04_TMR_IC_ISR+0x3ee>
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	4934      	ldr	r1, [pc, #208]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	330c      	adds	r3, #12
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d108      	bne.n	800610e <HCSR04_TMR_IC_ISR+0x3de>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800610a:	6213      	str	r3, [r2, #32]
 800610c:	e007      	b.n	800611e <HCSR04_TMR_IC_ISR+0x3ee>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611c:	6213      	str	r3, [r2, #32]
 800611e:	7bfa      	ldrb	r2, [r7, #15]
 8006120:	4926      	ldr	r1, [pc, #152]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	330c      	adds	r3, #12
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HCSR04_TMR_IC_ISR+0x412>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a12      	ldr	r2, [r2, #32]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	e029      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x466>
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	491d      	ldr	r1, [pc, #116]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	330c      	adds	r3, #12
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d106      	bne.n	8006166 <HCSR04_TMR_IC_ISR+0x436>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	6213      	str	r3, [r2, #32]
 8006164:	e017      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x466>
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	4914      	ldr	r1, [pc, #80]	; (80061bc <HCSR04_TMR_IC_ISR+0x48c>)
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	330c      	adds	r3, #12
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b08      	cmp	r3, #8
 800617a:	d106      	bne.n	800618a <HCSR04_TMR_IC_ISR+0x45a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	6213      	str	r3, [r2, #32]
 8006188:	e005      	b.n	8006196 <HCSR04_TMR_IC_ISR+0x466>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	6213      	str	r3, [r2, #32]
	for(i=0; i<HCSR04_UNITS; i++)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3301      	adds	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f43f add1 	beq.w	8005d46 <HCSR04_TMR_IC_ISR+0x16>
			}
		}
	}
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bdb0      	pop	{r4, r5, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	b020c49c 	.word	0xb020c49c
 80061b4:	3f916872 	.word	0x3f916872
 80061b8:	20000958 	.word	0x20000958
 80061bc:	0800abac 	.word	0x0800abac

080061c0 <HCSR04_Read>:

float HCSR04_Read(uint8_t au8_HCSR04_Instance)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	71fb      	strb	r3, [r7, #7]
	/* float Distance_meters = gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;

	float Distance_centimeters = Distance_meters * 100.0; */

	return gs_HCSR04_info[au8_HCSR04_Instance].DISTANCE;
 80061ca:	79fa      	ldrb	r2, [r7, #7]
 80061cc:	4906      	ldr	r1, [pc, #24]	; (80061e8 <HCSR04_Read+0x28>)
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3318      	adds	r3, #24
 80061da:	681b      	ldr	r3, [r3, #0]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000958 	.word	0x20000958

080061ec <HCSR04_Trigger>:

void HCSR04_Trigger(uint8_t au8_HCSR04_Instance)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 1);
 80061f6:	79fa      	ldrb	r2, [r7, #7]
 80061f8:	4923      	ldr	r1, [pc, #140]	; (8006288 <HCSR04_Trigger+0x9c>)
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	79fa      	ldrb	r2, [r7, #7]
 8006208:	491f      	ldr	r1, [pc, #124]	; (8006288 <HCSR04_Trigger+0x9c>)
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	3304      	adds	r3, #4
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	2201      	movs	r2, #1
 800621a:	4619      	mov	r1, r3
 800621c:	f7fc fb7b 	bl	8002916 <HAL_GPIO_WritePin>
	DELAY_US(2);
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <HCSR04_Trigger+0xa0>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <HCSR04_Trigger+0xa4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HCSR04_Trigger+0xa8>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	0c9b      	lsrs	r3, r3, #18
 8006232:	005a      	lsls	r2, r3, #1
 8006234:	4b16      	ldr	r3, [pc, #88]	; (8006290 <HCSR04_Trigger+0xa4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4916      	ldr	r1, [pc, #88]	; (8006294 <HCSR04_Trigger+0xa8>)
 800623a:	fba1 1303 	umull	r1, r3, r1, r3
 800623e:	0c9b      	lsrs	r3, r3, #18
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	4b11      	ldr	r3, [pc, #68]	; (800628c <HCSR04_Trigger+0xa0>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d8f8      	bhi.n	8006246 <HCSR04_Trigger+0x5a>
	HAL_GPIO_WritePin(HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_GPIO, HCSR04_CfgParam[au8_HCSR04_Instance].TRIG_PIN, 0);
 8006254:	79fa      	ldrb	r2, [r7, #7]
 8006256:	490c      	ldr	r1, [pc, #48]	; (8006288 <HCSR04_Trigger+0x9c>)
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	79fa      	ldrb	r2, [r7, #7]
 8006266:	4908      	ldr	r1, [pc, #32]	; (8006288 <HCSR04_Trigger+0x9c>)
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	3304      	adds	r3, #4
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	4619      	mov	r1, r3
 800627a:	f7fc fb4c 	bl	8002916 <HAL_GPIO_WritePin>
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	0800abac 	.word	0x0800abac
 800628c:	e000e010 	.word	0xe000e010
 8006290:	20000004 	.word	0x20000004
 8006294:	431bde83 	.word	0x431bde83

08006298 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8006298:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800629c:	b08c      	sub	sp, #48	; 0x30
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
	inx = 0;
 80062a4:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <decodeGGA+0x17c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80062ae:	e004      	b.n	80062ba <decodeGGA+0x22>
 80062b0:	4b58      	ldr	r3, [pc, #352]	; (8006414 <decodeGGA+0x17c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	4a57      	ldr	r2, [pc, #348]	; (8006414 <decodeGGA+0x17c>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b56      	ldr	r3, [pc, #344]	; (8006414 <decodeGGA+0x17c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b2c      	cmp	r3, #44	; 0x2c
 80062c8:	d1f2      	bne.n	80062b0 <decodeGGA+0x18>
	inx++;
 80062ca:	4b52      	ldr	r3, [pc, #328]	; (8006414 <decodeGGA+0x17c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a50      	ldr	r2, [pc, #320]	; (8006414 <decodeGGA+0x17c>)
 80062d2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 80062d4:	e004      	b.n	80062e0 <decodeGGA+0x48>
 80062d6:	4b4f      	ldr	r3, [pc, #316]	; (8006414 <decodeGGA+0x17c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	4a4d      	ldr	r2, [pc, #308]	; (8006414 <decodeGGA+0x17c>)
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <decodeGGA+0x17c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b2c      	cmp	r3, #44	; 0x2c
 80062ee:	d1f2      	bne.n	80062d6 <decodeGGA+0x3e>
	inx++;
 80062f0:	4b48      	ldr	r3, [pc, #288]	; (8006414 <decodeGGA+0x17c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a47      	ldr	r2, [pc, #284]	; (8006414 <decodeGGA+0x17c>)
 80062f8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 80062fa:	e004      	b.n	8006306 <decodeGGA+0x6e>
 80062fc:	4b45      	ldr	r3, [pc, #276]	; (8006414 <decodeGGA+0x17c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3301      	adds	r3, #1
 8006302:	4a44      	ldr	r2, [pc, #272]	; (8006414 <decodeGGA+0x17c>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b43      	ldr	r3, [pc, #268]	; (8006414 <decodeGGA+0x17c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b2c      	cmp	r3, #44	; 0x2c
 8006314:	d1f2      	bne.n	80062fc <decodeGGA+0x64>
	inx++;
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <decodeGGA+0x17c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <decodeGGA+0x17c>)
 800631e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8006320:	e004      	b.n	800632c <decodeGGA+0x94>
 8006322:	4b3c      	ldr	r3, [pc, #240]	; (8006414 <decodeGGA+0x17c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <decodeGGA+0x17c>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	4b39      	ldr	r3, [pc, #228]	; (8006414 <decodeGGA+0x17c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b2c      	cmp	r3, #44	; 0x2c
 800633a:	d1f2      	bne.n	8006322 <decodeGGA+0x8a>
	inx++;
 800633c:	4b35      	ldr	r3, [pc, #212]	; (8006414 <decodeGGA+0x17c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a34      	ldr	r2, [pc, #208]	; (8006414 <decodeGGA+0x17c>)
 8006344:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8006346:	e004      	b.n	8006352 <decodeGGA+0xba>
 8006348:	4b32      	ldr	r3, [pc, #200]	; (8006414 <decodeGGA+0x17c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a31      	ldr	r2, [pc, #196]	; (8006414 <decodeGGA+0x17c>)
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4b30      	ldr	r3, [pc, #192]	; (8006414 <decodeGGA+0x17c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b2c      	cmp	r3, #44	; 0x2c
 8006360:	d1f2      	bne.n	8006348 <decodeGGA+0xb0>
	inx++;
 8006362:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <decodeGGA+0x17c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <decodeGGA+0x17c>)
 800636a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800636c:	e004      	b.n	8006378 <decodeGGA+0xe0>
 800636e:	4b29      	ldr	r3, [pc, #164]	; (8006414 <decodeGGA+0x17c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <decodeGGA+0x17c>)
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	4b26      	ldr	r3, [pc, #152]	; (8006414 <decodeGGA+0x17c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b2c      	cmp	r3, #44	; 0x2c
 8006386:	d1f2      	bne.n	800636e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8006388:	4b22      	ldr	r3, [pc, #136]	; (8006414 <decodeGGA+0x17c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	4a21      	ldr	r2, [pc, #132]	; (8006414 <decodeGGA+0x17c>)
 8006390:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <decodeGGA+0x17c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4413      	add	r3, r2
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b31      	cmp	r3, #49	; 0x31
 80063a0:	d00f      	beq.n	80063c2 <decodeGGA+0x12a>
 80063a2:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <decodeGGA+0x17c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b32      	cmp	r3, #50	; 0x32
 80063b0:	d007      	beq.n	80063c2 <decodeGGA+0x12a>
 80063b2:	4b18      	ldr	r3, [pc, #96]	; (8006414 <decodeGGA+0x17c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b36      	cmp	r3, #54	; 0x36
 80063c0:	d106      	bne.n	80063d0 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 80063c8:	4b12      	ldr	r3, [pc, #72]	; (8006414 <decodeGGA+0x17c>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80063ce:	e009      	b.n	80063e4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2200      	movs	r2, #0
 80063d4:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 80063d6:	2301      	movs	r3, #1
 80063d8:	e2f2      	b.n	80069c0 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80063da:	4b0e      	ldr	r3, [pc, #56]	; (8006414 <decodeGGA+0x17c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <decodeGGA+0x17c>)
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <decodeGGA+0x17c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b2c      	cmp	r3, #44	; 0x2c
 80063f2:	d1f2      	bne.n	80063da <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <decodeGGA+0x17c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a06      	ldr	r2, [pc, #24]	; (8006414 <decodeGGA+0x17c>)
 80063fc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	220c      	movs	r2, #12
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fb2b 	bl	8007a62 <memset>
	i=0;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8006410:	e016      	b.n	8006440 <decodeGGA+0x1a8>
 8006412:	bf00      	nop
 8006414:	2000097c 	.word	0x2000097c
	{
		buffer[i] = GGAbuffer[inx];
 8006418:	4ba7      	ldr	r3, [pc, #668]	; (80066b8 <decodeGGA+0x420>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	7819      	ldrb	r1, [r3, #0]
 8006424:	f107 020c 	add.w	r2, r7, #12
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	4413      	add	r3, r2
 800642c:	460a      	mov	r2, r1
 800642e:	701a      	strb	r2, [r3, #0]
		i++;
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	3301      	adds	r3, #1
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8006436:	4ba0      	ldr	r3, [pc, #640]	; (80066b8 <decodeGGA+0x420>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a9e      	ldr	r2, [pc, #632]	; (80066b8 <decodeGGA+0x420>)
 800643e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8006440:	4b9d      	ldr	r3, [pc, #628]	; (80066b8 <decodeGGA+0x420>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b2c      	cmp	r3, #44	; 0x2c
 800644e:	d1e3      	bne.n	8006418 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fcf5 	bl	8006e44 <atoi>
 800645a:	4603      	mov	r3, r0
 800645c:	4a97      	ldr	r2, [pc, #604]	; (80066bc <decodeGGA+0x424>)
 800645e:	fb82 1203 	smull	r1, r2, r2, r3
 8006462:	1312      	asrs	r2, r2, #12
 8006464:	17db      	asrs	r3, r3, #31
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	4b95      	ldr	r3, [pc, #596]	; (80066c0 <decodeGGA+0x428>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4995      	ldr	r1, [pc, #596]	; (80066c4 <decodeGGA+0x42c>)
 800646e:	fb81 0103 	smull	r0, r1, r1, r3
 8006472:	1149      	asrs	r1, r1, #5
 8006474:	17db      	asrs	r3, r3, #31
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	4a93      	ldr	r2, [pc, #588]	; (80066c8 <decodeGGA+0x430>)
 800647c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fcde 	bl	8006e44 <atoi>
 8006488:	4603      	mov	r3, r0
 800648a:	4a8e      	ldr	r2, [pc, #568]	; (80066c4 <decodeGGA+0x42c>)
 800648c:	fb82 1203 	smull	r1, r2, r2, r3
 8006490:	1152      	asrs	r2, r2, #5
 8006492:	17db      	asrs	r3, r3, #31
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	4a8b      	ldr	r2, [pc, #556]	; (80066c4 <decodeGGA+0x42c>)
 8006498:	fb82 1203 	smull	r1, r2, r2, r3
 800649c:	1151      	asrs	r1, r2, #5
 800649e:	17da      	asrs	r2, r3, #31
 80064a0:	1a8a      	subs	r2, r1, r2
 80064a2:	2164      	movs	r1, #100	; 0x64
 80064a4:	fb01 f202 	mul.w	r2, r1, r2
 80064a8:	1a9a      	subs	r2, r3, r2
 80064aa:	4b85      	ldr	r3, [pc, #532]	; (80066c0 <decodeGGA+0x428>)
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	4b85      	ldr	r3, [pc, #532]	; (80066c4 <decodeGGA+0x42c>)
 80064b0:	fb83 0301 	smull	r0, r3, r3, r1
 80064b4:	1158      	asrs	r0, r3, #5
 80064b6:	17cb      	asrs	r3, r1, #31
 80064b8:	1ac3      	subs	r3, r0, r3
 80064ba:	2064      	movs	r0, #100	; 0x64
 80064bc:	fb00 f303 	mul.w	r3, r0, r3
 80064c0:	1acb      	subs	r3, r1, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	4a81      	ldr	r2, [pc, #516]	; (80066cc <decodeGGA+0x434>)
 80064c6:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 80064c8:	4b80      	ldr	r3, [pc, #512]	; (80066cc <decodeGGA+0x434>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b3b      	cmp	r3, #59	; 0x3b
 80064ce:	dd09      	ble.n	80064e4 <decodeGGA+0x24c>
	{
		min = min-60;
 80064d0:	4b7e      	ldr	r3, [pc, #504]	; (80066cc <decodeGGA+0x434>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3b3c      	subs	r3, #60	; 0x3c
 80064d6:	4a7d      	ldr	r2, [pc, #500]	; (80066cc <decodeGGA+0x434>)
 80064d8:	6013      	str	r3, [r2, #0]
		hr++;
 80064da:	4b7b      	ldr	r3, [pc, #492]	; (80066c8 <decodeGGA+0x430>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3301      	adds	r3, #1
 80064e0:	4a79      	ldr	r2, [pc, #484]	; (80066c8 <decodeGGA+0x430>)
 80064e2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80064e4:	4b78      	ldr	r3, [pc, #480]	; (80066c8 <decodeGGA+0x430>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da09      	bge.n	8006500 <decodeGGA+0x268>
	{
		hr=24+hr;
 80064ec:	4b76      	ldr	r3, [pc, #472]	; (80066c8 <decodeGGA+0x430>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3318      	adds	r3, #24
 80064f2:	4a75      	ldr	r2, [pc, #468]	; (80066c8 <decodeGGA+0x430>)
 80064f4:	6013      	str	r3, [r2, #0]
		daychange--;
 80064f6:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <decodeGGA+0x438>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	4a74      	ldr	r2, [pc, #464]	; (80066d0 <decodeGGA+0x438>)
 80064fe:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8006500:	4b71      	ldr	r3, [pc, #452]	; (80066c8 <decodeGGA+0x430>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b17      	cmp	r3, #23
 8006506:	dd09      	ble.n	800651c <decodeGGA+0x284>
	{
		hr=hr-24;
 8006508:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <decodeGGA+0x430>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3b18      	subs	r3, #24
 800650e:	4a6e      	ldr	r2, [pc, #440]	; (80066c8 <decodeGGA+0x430>)
 8006510:	6013      	str	r3, [r2, #0]
		daychange++;
 8006512:	4b6f      	ldr	r3, [pc, #444]	; (80066d0 <decodeGGA+0x438>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3301      	adds	r3, #1
 8006518:	4a6d      	ldr	r2, [pc, #436]	; (80066d0 <decodeGGA+0x438>)
 800651a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 800651c:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <decodeGGA+0x430>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8006524:	4b69      	ldr	r3, [pc, #420]	; (80066cc <decodeGGA+0x434>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 800652c:	f107 030c 	add.w	r3, r7, #12
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fc87 	bl	8006e44 <atoi>
 8006536:	4602      	mov	r2, r0
 8006538:	4b62      	ldr	r3, [pc, #392]	; (80066c4 <decodeGGA+0x42c>)
 800653a:	fb83 1302 	smull	r1, r3, r3, r2
 800653e:	1159      	asrs	r1, r3, #5
 8006540:	17d3      	asrs	r3, r2, #31
 8006542:	1acb      	subs	r3, r1, r3
 8006544:	2164      	movs	r1, #100	; 0x64
 8006546:	fb01 f303 	mul.w	r3, r1, r3
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8006550:	4b59      	ldr	r3, [pc, #356]	; (80066b8 <decodeGGA+0x420>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a58      	ldr	r2, [pc, #352]	; (80066b8 <decodeGGA+0x420>)
 8006558:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	220c      	movs	r2, #12
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fa7d 	bl	8007a62 <memset>
	i=0;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800656c:	e013      	b.n	8006596 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800656e:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <decodeGGA+0x420>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4413      	add	r3, r2
 8006578:	7819      	ldrb	r1, [r3, #0]
 800657a:	f107 020c 	add.w	r2, r7, #12
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	4413      	add	r3, r2
 8006582:	460a      	mov	r2, r1
 8006584:	701a      	strb	r2, [r3, #0]
		i++;
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	3301      	adds	r3, #1
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800658c:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <decodeGGA+0x420>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a49      	ldr	r2, [pc, #292]	; (80066b8 <decodeGGA+0x420>)
 8006594:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8006596:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <decodeGGA+0x420>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b2c      	cmp	r3, #44	; 0x2c
 80065a4:	d1e3      	bne.n	800656e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7f9 fdda 	bl	8000164 <strlen>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d801      	bhi.n	80065ba <decodeGGA+0x322>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e202      	b.n	80069c0 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80065ba:	f107 030c 	add.w	r3, r7, #12
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fc40 	bl	8006e44 <atoi>
 80065c4:	4603      	mov	r3, r0
 80065c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 80065cc:	e002      	b.n	80065d4 <decodeGGA+0x33c>
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	3301      	adds	r3, #1
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d4:	f107 020c 	add.w	r2, r7, #12
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b2e      	cmp	r3, #46	; 0x2e
 80065e0:	d1f5      	bne.n	80065ce <decodeGGA+0x336>
	j++;
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	3301      	adds	r3, #1
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7f9 fdb9 	bl	8000164 <strlen>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	f107 020c 	add.w	r2, r7, #12
 8006600:	4413      	add	r3, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fc1e 	bl	8006e44 <atoi>
 8006608:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800660a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800660e:	4618      	mov	r0, r3
 8006610:	f7f9 ff02 	bl	8000418 <__aeabi_i2d>
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	4b2e      	ldr	r3, [pc, #184]	; (80066d4 <decodeGGA+0x43c>)
 800661a:	f7fa f891 	bl	8000740 <__aeabi_ddiv>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4690      	mov	r8, r2
 8006624:	4699      	mov	r9, r3
 8006626:	69f8      	ldr	r0, [r7, #28]
 8006628:	f7f9 fef6 	bl	8000418 <__aeabi_i2d>
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	3302      	adds	r3, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 feef 	bl	8000418 <__aeabi_i2d>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	f04f 0000 	mov.w	r0, #0
 8006642:	4925      	ldr	r1, [pc, #148]	; (80066d8 <decodeGGA+0x440>)
 8006644:	f003 faf6 	bl	8009c34 <pow>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7fa f876 	bl	8000740 <__aeabi_ddiv>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	f7f9 fd90 	bl	8000180 <__adddf3>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	f7fa fa18 	bl	8000a9c <__aeabi_d2f>
 800666c:	4603      	mov	r3, r0
 800666e:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	601a      	str	r2, [r3, #0]
	inx++;  
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <decodeGGA+0x420>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	4a0e      	ldr	r2, [pc, #56]	; (80066b8 <decodeGGA+0x420>)
 800667e:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <decodeGGA+0x420>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <decodeGGA+0x420>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <decodeGGA+0x420>)
 8006698:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <decodeGGA+0x420>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <decodeGGA+0x420>)
 80066a2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	220c      	movs	r2, #12
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f9d8 	bl	8007a62 <memset>
	i=0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80066b6:	e025      	b.n	8006704 <decodeGGA+0x46c>
 80066b8:	2000097c 	.word	0x2000097c
 80066bc:	68db8bad 	.word	0x68db8bad
 80066c0:	20000010 	.word	0x20000010
 80066c4:	51eb851f 	.word	0x51eb851f
 80066c8:	20000980 	.word	0x20000980
 80066cc:	20000984 	.word	0x20000984
 80066d0:	20000994 	.word	0x20000994
 80066d4:	40590000 	.word	0x40590000
 80066d8:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 80066dc:	4b88      	ldr	r3, [pc, #544]	; (8006900 <decodeGGA+0x668>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	7819      	ldrb	r1, [r3, #0]
 80066e8:	f107 020c 	add.w	r2, r7, #12
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	4413      	add	r3, r2
 80066f0:	460a      	mov	r2, r1
 80066f2:	701a      	strb	r2, [r3, #0]
		i++;
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	3301      	adds	r3, #1
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80066fa:	4b81      	ldr	r3, [pc, #516]	; (8006900 <decodeGGA+0x668>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	4a7f      	ldr	r2, [pc, #508]	; (8006900 <decodeGGA+0x668>)
 8006702:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8006704:	4b7e      	ldr	r3, [pc, #504]	; (8006900 <decodeGGA+0x668>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b2c      	cmp	r3, #44	; 0x2c
 8006712:	d1e3      	bne.n	80066dc <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8006714:	f107 030c 	add.w	r3, r7, #12
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fb93 	bl	8006e44 <atoi>
 800671e:	4603      	mov	r3, r0
 8006720:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8006726:	e002      	b.n	800672e <decodeGGA+0x496>
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	3301      	adds	r3, #1
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
 800672e:	f107 020c 	add.w	r2, r7, #12
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	4413      	add	r3, r2
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b2e      	cmp	r3, #46	; 0x2e
 800673a:	d1f5      	bne.n	8006728 <decodeGGA+0x490>
	j++;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	3301      	adds	r3, #1
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	4618      	mov	r0, r3
 8006748:	f7f9 fd0c 	bl	8000164 <strlen>
 800674c:	4602      	mov	r2, r0
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f107 020c 	add.w	r2, r7, #12
 800675a:	4413      	add	r3, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fb71 	bl	8006e44 <atoi>
 8006762:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8006764:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006768:	4618      	mov	r0, r3
 800676a:	f7f9 fe55 	bl	8000418 <__aeabi_i2d>
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	4b64      	ldr	r3, [pc, #400]	; (8006904 <decodeGGA+0x66c>)
 8006774:	f7f9 ffe4 	bl	8000740 <__aeabi_ddiv>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4690      	mov	r8, r2
 800677e:	4699      	mov	r9, r3
 8006780:	69f8      	ldr	r0, [r7, #28]
 8006782:	f7f9 fe49 	bl	8000418 <__aeabi_i2d>
 8006786:	4604      	mov	r4, r0
 8006788:	460d      	mov	r5, r1
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	3302      	adds	r3, #2
 800678e:	4618      	mov	r0, r3
 8006790:	f7f9 fe42 	bl	8000418 <__aeabi_i2d>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	f04f 0000 	mov.w	r0, #0
 800679c:	495a      	ldr	r1, [pc, #360]	; (8006908 <decodeGGA+0x670>)
 800679e:	f003 fa49 	bl	8009c34 <pow>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7f9 ffc9 	bl	8000740 <__aeabi_ddiv>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4640      	mov	r0, r8
 80067b4:	4649      	mov	r1, r9
 80067b6:	f7f9 fce3 	bl	8000180 <__adddf3>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	f7fa f96b 	bl	8000a9c <__aeabi_d2f>
 80067c6:	4603      	mov	r3, r0
 80067c8:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	609a      	str	r2, [r3, #8]
	inx++;
 80067d0:	4b4b      	ldr	r3, [pc, #300]	; (8006900 <decodeGGA+0x668>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a4a      	ldr	r2, [pc, #296]	; (8006900 <decodeGGA+0x668>)
 80067d8:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80067da:	4b49      	ldr	r3, [pc, #292]	; (8006900 <decodeGGA+0x668>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80067ea:	4b45      	ldr	r3, [pc, #276]	; (8006900 <decodeGGA+0x668>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3301      	adds	r3, #1
 80067f0:	4a43      	ldr	r2, [pc, #268]	; (8006900 <decodeGGA+0x668>)
 80067f2:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80067f4:	4b42      	ldr	r3, [pc, #264]	; (8006900 <decodeGGA+0x668>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	4a41      	ldr	r2, [pc, #260]	; (8006900 <decodeGGA+0x668>)
 80067fc:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80067fe:	4b40      	ldr	r3, [pc, #256]	; (8006900 <decodeGGA+0x668>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a3e      	ldr	r2, [pc, #248]	; (8006900 <decodeGGA+0x668>)
 8006806:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8006808:	4b3d      	ldr	r3, [pc, #244]	; (8006900 <decodeGGA+0x668>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	4a3c      	ldr	r2, [pc, #240]	; (8006900 <decodeGGA+0x668>)
 8006810:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	220c      	movs	r2, #12
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f001 f921 	bl	8007a62 <memset>
	i=0;
 8006820:	2300      	movs	r3, #0
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8006824:	e013      	b.n	800684e <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8006826:	4b36      	ldr	r3, [pc, #216]	; (8006900 <decodeGGA+0x668>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	7819      	ldrb	r1, [r3, #0]
 8006832:	f107 020c 	add.w	r2, r7, #12
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	4413      	add	r3, r2
 800683a:	460a      	mov	r2, r1
 800683c:	701a      	strb	r2, [r3, #0]
		i++;
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	3301      	adds	r3, #1
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8006844:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <decodeGGA+0x668>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a2d      	ldr	r2, [pc, #180]	; (8006900 <decodeGGA+0x668>)
 800684c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800684e:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <decodeGGA+0x668>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4413      	add	r3, r2
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b2c      	cmp	r3, #44	; 0x2c
 800685c:	d1e3      	bne.n	8006826 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4618      	mov	r0, r3
 8006864:	f000 faee 	bl	8006e44 <atoi>
 8006868:	4602      	mov	r2, r0
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <decodeGGA+0x668>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a22      	ldr	r2, [pc, #136]	; (8006900 <decodeGGA+0x668>)
 8006876:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8006878:	e004      	b.n	8006884 <decodeGGA+0x5ec>
 800687a:	4b21      	ldr	r3, [pc, #132]	; (8006900 <decodeGGA+0x668>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <decodeGGA+0x668>)
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <decodeGGA+0x668>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b2c      	cmp	r3, #44	; 0x2c
 8006892:	d1f2      	bne.n	800687a <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8006894:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <decodeGGA+0x668>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a19      	ldr	r2, [pc, #100]	; (8006900 <decodeGGA+0x668>)
 800689c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	220c      	movs	r2, #12
 80068a4:	2100      	movs	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f8db 	bl	8007a62 <memset>
	i=0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 80068b0:	e013      	b.n	80068da <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80068b2:	4b13      	ldr	r3, [pc, #76]	; (8006900 <decodeGGA+0x668>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	f107 020c 	add.w	r2, r7, #12
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	4413      	add	r3, r2
 80068c6:	460a      	mov	r2, r1
 80068c8:	701a      	strb	r2, [r3, #0]
		i++;
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	3301      	adds	r3, #1
 80068ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <decodeGGA+0x668>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a0a      	ldr	r2, [pc, #40]	; (8006900 <decodeGGA+0x668>)
 80068d8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <decodeGGA+0x668>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4413      	add	r3, r2
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b2c      	cmp	r3, #44	; 0x2c
 80068e8:	d1e3      	bne.n	80068b2 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 faa8 	bl	8006e44 <atoi>
 80068f4:	4603      	mov	r3, r0
 80068f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80068fc:	e009      	b.n	8006912 <decodeGGA+0x67a>
 80068fe:	bf00      	nop
 8006900:	2000097c 	.word	0x2000097c
 8006904:	40590000 	.word	0x40590000
 8006908:	40240000 	.word	0x40240000
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	3301      	adds	r3, #1
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
 8006912:	f107 020c 	add.w	r2, r7, #12
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	4413      	add	r3, r2
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b2e      	cmp	r3, #46	; 0x2e
 800691e:	d1f5      	bne.n	800690c <decodeGGA+0x674>
	j++;
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	3301      	adds	r3, #1
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 8006926:	f107 030c 	add.w	r3, r7, #12
 800692a:	4618      	mov	r0, r3
 800692c:	f7f9 fc1a 	bl	8000164 <strlen>
 8006930:	4602      	mov	r2, r0
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	f107 020c 	add.w	r2, r7, #12
 800693e:	4413      	add	r3, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fa7f 	bl	8006e44 <atoi>
 8006946:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8006948:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800694c:	4618      	mov	r0, r3
 800694e:	f7f9 fd63 	bl	8000418 <__aeabi_i2d>
 8006952:	4604      	mov	r4, r0
 8006954:	460d      	mov	r5, r1
 8006956:	69f8      	ldr	r0, [r7, #28]
 8006958:	f7f9 fd5e 	bl	8000418 <__aeabi_i2d>
 800695c:	4680      	mov	r8, r0
 800695e:	4689      	mov	r9, r1
 8006960:	6a38      	ldr	r0, [r7, #32]
 8006962:	f7f9 fd59 	bl	8000418 <__aeabi_i2d>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	f04f 0000 	mov.w	r0, #0
 800696e:	4917      	ldr	r1, [pc, #92]	; (80069cc <decodeGGA+0x734>)
 8006970:	f003 f960 	bl	8009c34 <pow>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4640      	mov	r0, r8
 800697a:	4649      	mov	r1, r9
 800697c:	f7f9 fee0 	bl	8000740 <__aeabi_ddiv>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4620      	mov	r0, r4
 8006986:	4629      	mov	r1, r5
 8006988:	f7f9 fbfa 	bl	8000180 <__adddf3>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	f7fa f882 	bl	8000a9c <__aeabi_d2f>
 8006998:	4603      	mov	r3, r0
 800699a:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	621a      	str	r2, [r3, #32]

	inx++;
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <decodeGGA+0x738>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <decodeGGA+0x738>)
 80069aa:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80069ac:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <decodeGGA+0x738>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 80069be:	2300      	movs	r3, #0

}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3730      	adds	r7, #48	; 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80069ca:	bf00      	nop
 80069cc:	40240000 	.word	0x40240000
 80069d0:	2000097c 	.word	0x2000097c

080069d4 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80069d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d8:	b090      	sub	sp, #64	; 0x40
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
	inx = 0;
 80069e0:	4b92      	ldr	r3, [pc, #584]	; (8006c2c <decodeRMC+0x258>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80069ea:	e004      	b.n	80069f6 <decodeRMC+0x22>
 80069ec:	4b8f      	ldr	r3, [pc, #572]	; (8006c2c <decodeRMC+0x258>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	4a8e      	ldr	r2, [pc, #568]	; (8006c2c <decodeRMC+0x258>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b8d      	ldr	r3, [pc, #564]	; (8006c2c <decodeRMC+0x258>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b2c      	cmp	r3, #44	; 0x2c
 8006a04:	d1f2      	bne.n	80069ec <decodeRMC+0x18>
	inx++;
 8006a06:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <decodeRMC+0x258>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4a87      	ldr	r2, [pc, #540]	; (8006c2c <decodeRMC+0x258>)
 8006a0e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8006a10:	e004      	b.n	8006a1c <decodeRMC+0x48>
 8006a12:	4b86      	ldr	r3, [pc, #536]	; (8006c2c <decodeRMC+0x258>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3301      	adds	r3, #1
 8006a18:	4a84      	ldr	r2, [pc, #528]	; (8006c2c <decodeRMC+0x258>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	4b83      	ldr	r3, [pc, #524]	; (8006c2c <decodeRMC+0x258>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b2c      	cmp	r3, #44	; 0x2c
 8006a2a:	d1f2      	bne.n	8006a12 <decodeRMC+0x3e>
	inx++;
 8006a2c:	4b7f      	ldr	r3, [pc, #508]	; (8006c2c <decodeRMC+0x258>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	4a7e      	ldr	r2, [pc, #504]	; (8006c2c <decodeRMC+0x258>)
 8006a34:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8006a36:	4b7d      	ldr	r3, [pc, #500]	; (8006c2c <decodeRMC+0x258>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b41      	cmp	r3, #65	; 0x41
 8006a44:	d10d      	bne.n	8006a62 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8006a4c:	4b77      	ldr	r3, [pc, #476]	; (8006c2c <decodeRMC+0x258>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3301      	adds	r3, #1
 8006a52:	4a76      	ldr	r2, [pc, #472]	; (8006c2c <decodeRMC+0x258>)
 8006a54:	6013      	str	r3, [r2, #0]
	inx++;
 8006a56:	4b75      	ldr	r3, [pc, #468]	; (8006c2c <decodeRMC+0x258>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4a73      	ldr	r2, [pc, #460]	; (8006c2c <decodeRMC+0x258>)
 8006a5e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8006a60:	e009      	b.n	8006a76 <decodeRMC+0xa2>
		rmc->isValid =0;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	615a      	str	r2, [r3, #20]
		return 1;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e1d5      	b.n	8006e18 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8006a6c:	4b6f      	ldr	r3, [pc, #444]	; (8006c2c <decodeRMC+0x258>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a6e      	ldr	r2, [pc, #440]	; (8006c2c <decodeRMC+0x258>)
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b6d      	ldr	r3, [pc, #436]	; (8006c2c <decodeRMC+0x258>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b2c      	cmp	r3, #44	; 0x2c
 8006a84:	d1f2      	bne.n	8006a6c <decodeRMC+0x98>
	inx++;
 8006a86:	4b69      	ldr	r3, [pc, #420]	; (8006c2c <decodeRMC+0x258>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	4a67      	ldr	r2, [pc, #412]	; (8006c2c <decodeRMC+0x258>)
 8006a8e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8006a90:	e004      	b.n	8006a9c <decodeRMC+0xc8>
 8006a92:	4b66      	ldr	r3, [pc, #408]	; (8006c2c <decodeRMC+0x258>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a64      	ldr	r2, [pc, #400]	; (8006c2c <decodeRMC+0x258>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	4b63      	ldr	r3, [pc, #396]	; (8006c2c <decodeRMC+0x258>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b2c      	cmp	r3, #44	; 0x2c
 8006aaa:	d1f2      	bne.n	8006a92 <decodeRMC+0xbe>
	inx++;
 8006aac:	4b5f      	ldr	r3, [pc, #380]	; (8006c2c <decodeRMC+0x258>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	4a5e      	ldr	r2, [pc, #376]	; (8006c2c <decodeRMC+0x258>)
 8006ab4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8006ab6:	e004      	b.n	8006ac2 <decodeRMC+0xee>
 8006ab8:	4b5c      	ldr	r3, [pc, #368]	; (8006c2c <decodeRMC+0x258>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	4a5b      	ldr	r2, [pc, #364]	; (8006c2c <decodeRMC+0x258>)
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	4b5a      	ldr	r3, [pc, #360]	; (8006c2c <decodeRMC+0x258>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b2c      	cmp	r3, #44	; 0x2c
 8006ad0:	d1f2      	bne.n	8006ab8 <decodeRMC+0xe4>
	inx++;
 8006ad2:	4b56      	ldr	r3, [pc, #344]	; (8006c2c <decodeRMC+0x258>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	4a54      	ldr	r2, [pc, #336]	; (8006c2c <decodeRMC+0x258>)
 8006ada:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8006adc:	e004      	b.n	8006ae8 <decodeRMC+0x114>
 8006ade:	4b53      	ldr	r3, [pc, #332]	; (8006c2c <decodeRMC+0x258>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a51      	ldr	r2, [pc, #324]	; (8006c2c <decodeRMC+0x258>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b50      	ldr	r3, [pc, #320]	; (8006c2c <decodeRMC+0x258>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b2c      	cmp	r3, #44	; 0x2c
 8006af6:	d1f2      	bne.n	8006ade <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8006af8:	4b4c      	ldr	r3, [pc, #304]	; (8006c2c <decodeRMC+0x258>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3301      	adds	r3, #1
 8006afe:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <decodeRMC+0x258>)
 8006b00:	6013      	str	r3, [r2, #0]
	i=0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	220c      	movs	r2, #12
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 ffa7 	bl	8007a62 <memset>
	while (RMCbuffer[inx] != ',')
 8006b14:	e013      	b.n	8006b3e <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8006b16:	4b45      	ldr	r3, [pc, #276]	; (8006c2c <decodeRMC+0x258>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	7819      	ldrb	r1, [r3, #0]
 8006b22:	f107 0208 	add.w	r2, r7, #8
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	4413      	add	r3, r2
 8006b2a:	460a      	mov	r2, r1
 8006b2c:	701a      	strb	r2, [r3, #0]
		i++;
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b30:	3301      	adds	r3, #1
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006b34:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <decodeRMC+0x258>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <decodeRMC+0x258>)
 8006b3c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006b3e:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <decodeRMC+0x258>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8006b4c:	d1e3      	bne.n	8006b16 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8006b4e:	f107 0308 	add.w	r3, r7, #8
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d055      	beq.n	8006c04 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f971 	bl	8006e44 <atoi>
 8006b62:	4603      	mov	r3, r0
 8006b64:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8006b6a:	e002      	b.n	8006b72 <decodeRMC+0x19e>
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	3301      	adds	r3, #1
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b72:	f107 0208 	add.w	r2, r7, #8
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	4413      	add	r3, r2
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b7e:	d1f5      	bne.n	8006b6c <decodeRMC+0x198>
		j++;
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	3301      	adds	r3, #1
 8006b84:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7f9 faea 	bl	8000164 <strlen>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	f107 0208 	add.w	r2, r7, #8
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f94f 	bl	8006e44 <atoi>
 8006ba6:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8006ba8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7f9 fc33 	bl	8000418 <__aeabi_i2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb8:	f7f9 fc2e 	bl	8000418 <__aeabi_i2d>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bc2:	f7f9 fc29 	bl	8000418 <__aeabi_i2d>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	f04f 0000 	mov.w	r0, #0
 8006bce:	4918      	ldr	r1, [pc, #96]	; (8006c30 <decodeRMC+0x25c>)
 8006bd0:	f003 f830 	bl	8009c34 <pow>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 fdb0 	bl	8000740 <__aeabi_ddiv>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 faca 	bl	8000180 <__adddf3>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f7f9 ff52 	bl	8000a9c <__aeabi_d2f>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e003      	b.n	8006c0c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8006c0c:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <decodeRMC+0x258>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	4a06      	ldr	r2, [pc, #24]	; (8006c2c <decodeRMC+0x258>)
 8006c14:	6013      	str	r3, [r2, #0]
	i=0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	220c      	movs	r2, #12
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 ff1d 	bl	8007a62 <memset>
	while (RMCbuffer[inx] != ',')
 8006c28:	e018      	b.n	8006c5c <decodeRMC+0x288>
 8006c2a:	bf00      	nop
 8006c2c:	2000097c 	.word	0x2000097c
 8006c30:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8006c34:	4b7b      	ldr	r3, [pc, #492]	; (8006e24 <decodeRMC+0x450>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	7819      	ldrb	r1, [r3, #0]
 8006c40:	f107 0208 	add.w	r2, r7, #8
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	4413      	add	r3, r2
 8006c48:	460a      	mov	r2, r1
 8006c4a:	701a      	strb	r2, [r3, #0]
		i++;
 8006c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4e:	3301      	adds	r3, #1
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006c52:	4b74      	ldr	r3, [pc, #464]	; (8006e24 <decodeRMC+0x450>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	4a72      	ldr	r2, [pc, #456]	; (8006e24 <decodeRMC+0x450>)
 8006c5a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006c5c:	4b71      	ldr	r3, [pc, #452]	; (8006e24 <decodeRMC+0x450>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b2c      	cmp	r3, #44	; 0x2c
 8006c6a:	d1e3      	bne.n	8006c34 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8006c6c:	f107 0308 	add.w	r3, r7, #8
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d055      	beq.n	8006d22 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f8e2 	bl	8006e44 <atoi>
 8006c80:	4603      	mov	r3, r0
 8006c82:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8006c88:	e002      	b.n	8006c90 <decodeRMC+0x2bc>
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c90:	f107 0208 	add.w	r2, r7, #8
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	4413      	add	r3, r2
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c9c:	d1f5      	bne.n	8006c8a <decodeRMC+0x2b6>
		j++;
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7f9 fa5b 	bl	8000164 <strlen>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	4413      	add	r3, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f8c0 	bl	8006e44 <atoi>
 8006cc4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8006cc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7f9 fba4 	bl	8000418 <__aeabi_i2d>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	69b8      	ldr	r0, [r7, #24]
 8006cd6:	f7f9 fb9f 	bl	8000418 <__aeabi_i2d>
 8006cda:	4680      	mov	r8, r0
 8006cdc:	4689      	mov	r9, r1
 8006cde:	69f8      	ldr	r0, [r7, #28]
 8006ce0:	f7f9 fb9a 	bl	8000418 <__aeabi_i2d>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	f04f 0000 	mov.w	r0, #0
 8006cec:	494e      	ldr	r1, [pc, #312]	; (8006e28 <decodeRMC+0x454>)
 8006cee:	f002 ffa1 	bl	8009c34 <pow>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	f7f9 fd21 	bl	8000740 <__aeabi_ddiv>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fa3b 	bl	8000180 <__adddf3>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	f7f9 fec3 	bl	8000a9c <__aeabi_d2f>
 8006d16:	4603      	mov	r3, r0
 8006d18:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	611a      	str	r2, [r3, #16]
 8006d20:	e003      	b.n	8006d2a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8006d2a:	4b3e      	ldr	r3, [pc, #248]	; (8006e24 <decodeRMC+0x450>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <decodeRMC+0x450>)
 8006d32:	6013      	str	r3, [r2, #0]
	i=0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8006d38:	f107 0308 	add.w	r3, r7, #8
 8006d3c:	220c      	movs	r2, #12
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fe8e 	bl	8007a62 <memset>
	while (RMCbuffer[inx] != ',')
 8006d46:	e013      	b.n	8006d70 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8006d48:	4b36      	ldr	r3, [pc, #216]	; (8006e24 <decodeRMC+0x450>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4413      	add	r3, r2
 8006d52:	7819      	ldrb	r1, [r3, #0]
 8006d54:	f107 0208 	add.w	r2, r7, #8
 8006d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5a:	4413      	add	r3, r2
 8006d5c:	460a      	mov	r2, r1
 8006d5e:	701a      	strb	r2, [r3, #0]
		i++;
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	3301      	adds	r3, #1
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <decodeRMC+0x450>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <decodeRMC+0x450>)
 8006d6e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8006d70:	4b2c      	ldr	r3, [pc, #176]	; (8006e24 <decodeRMC+0x450>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b2c      	cmp	r3, #44	; 0x2c
 8006d7e:	d1e3      	bne.n	8006d48 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8006d80:	f107 0308 	add.w	r3, r7, #8
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f85d 	bl	8006e44 <atoi>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <decodeRMC+0x458>)
 8006d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8006d92:	1312      	asrs	r2, r2, #12
 8006d94:	17db      	asrs	r3, r3, #31
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <decodeRMC+0x45c>)
 8006d9a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f84f 	bl	8006e44 <atoi>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a22      	ldr	r2, [pc, #136]	; (8006e34 <decodeRMC+0x460>)
 8006daa:	fb82 1203 	smull	r1, r2, r2, r3
 8006dae:	1152      	asrs	r2, r2, #5
 8006db0:	17db      	asrs	r3, r3, #31
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <decodeRMC+0x460>)
 8006db6:	fb83 1302 	smull	r1, r3, r3, r2
 8006dba:	1159      	asrs	r1, r3, #5
 8006dbc:	17d3      	asrs	r3, r2, #31
 8006dbe:	1acb      	subs	r3, r1, r3
 8006dc0:	2164      	movs	r1, #100	; 0x64
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	4a1b      	ldr	r2, [pc, #108]	; (8006e38 <decodeRMC+0x464>)
 8006dca:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8006dcc:	f107 0308 	add.w	r3, r7, #8
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f837 	bl	8006e44 <atoi>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <decodeRMC+0x460>)
 8006dda:	fb83 1302 	smull	r1, r3, r3, r2
 8006dde:	1159      	asrs	r1, r3, #5
 8006de0:	17d3      	asrs	r3, r2, #31
 8006de2:	1acb      	subs	r3, r1, r3
 8006de4:	2164      	movs	r1, #100	; 0x64
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <decodeRMC+0x468>)
 8006dee:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <decodeRMC+0x45c>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <decodeRMC+0x46c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4413      	add	r3, r2
 8006dfa:	4a0d      	ldr	r2, [pc, #52]	; (8006e30 <decodeRMC+0x45c>)
 8006dfc:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <decodeRMC+0x45c>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <decodeRMC+0x464>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <decodeRMC+0x468>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	609a      	str	r2, [r3, #8]

	return 0;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3740      	adds	r7, #64	; 0x40
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e22:	bf00      	nop
 8006e24:	2000097c 	.word	0x2000097c
 8006e28:	40240000 	.word	0x40240000
 8006e2c:	68db8bad 	.word	0x68db8bad
 8006e30:	20000988 	.word	0x20000988
 8006e34:	51eb851f 	.word	0x51eb851f
 8006e38:	2000098c 	.word	0x2000098c
 8006e3c:	20000990 	.word	0x20000990
 8006e40:	20000994 	.word	0x20000994

08006e44 <atoi>:
 8006e44:	220a      	movs	r2, #10
 8006e46:	2100      	movs	r1, #0
 8006e48:	f000 b87e 	b.w	8006f48 <strtol>

08006e4c <_strtol_l.constprop.0>:
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e52:	4686      	mov	lr, r0
 8006e54:	4690      	mov	r8, r2
 8006e56:	d001      	beq.n	8006e5c <_strtol_l.constprop.0+0x10>
 8006e58:	2b24      	cmp	r3, #36	; 0x24
 8006e5a:	d906      	bls.n	8006e6a <_strtol_l.constprop.0+0x1e>
 8006e5c:	f000 fe54 	bl	8007b08 <__errno>
 8006e60:	2316      	movs	r3, #22
 8006e62:	6003      	str	r3, [r0, #0]
 8006e64:	2000      	movs	r0, #0
 8006e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4835      	ldr	r0, [pc, #212]	; (8006f44 <_strtol_l.constprop.0+0xf8>)
 8006e6e:	462a      	mov	r2, r5
 8006e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e74:	5d06      	ldrb	r6, [r0, r4]
 8006e76:	f016 0608 	ands.w	r6, r6, #8
 8006e7a:	d1f8      	bne.n	8006e6e <_strtol_l.constprop.0+0x22>
 8006e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8006e7e:	d12e      	bne.n	8006ede <_strtol_l.constprop.0+0x92>
 8006e80:	2601      	movs	r6, #1
 8006e82:	782c      	ldrb	r4, [r5, #0]
 8006e84:	1c95      	adds	r5, r2, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d057      	beq.n	8006f3a <_strtol_l.constprop.0+0xee>
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d109      	bne.n	8006ea2 <_strtol_l.constprop.0+0x56>
 8006e8e:	2c30      	cmp	r4, #48	; 0x30
 8006e90:	d107      	bne.n	8006ea2 <_strtol_l.constprop.0+0x56>
 8006e92:	782a      	ldrb	r2, [r5, #0]
 8006e94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006e98:	2a58      	cmp	r2, #88	; 0x58
 8006e9a:	d149      	bne.n	8006f30 <_strtol_l.constprop.0+0xe4>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	786c      	ldrb	r4, [r5, #1]
 8006ea0:	3502      	adds	r5, #2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006ea8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006eac:	fbbc f9f3 	udiv	r9, ip, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	fb03 ca19 	mls	sl, r3, r9, ip
 8006eb6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006eba:	2f09      	cmp	r7, #9
 8006ebc:	d814      	bhi.n	8006ee8 <_strtol_l.constprop.0+0x9c>
 8006ebe:	463c      	mov	r4, r7
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	dd20      	ble.n	8006f06 <_strtol_l.constprop.0+0xba>
 8006ec4:	1c57      	adds	r7, r2, #1
 8006ec6:	d007      	beq.n	8006ed8 <_strtol_l.constprop.0+0x8c>
 8006ec8:	4581      	cmp	r9, r0
 8006eca:	d319      	bcc.n	8006f00 <_strtol_l.constprop.0+0xb4>
 8006ecc:	d101      	bne.n	8006ed2 <_strtol_l.constprop.0+0x86>
 8006ece:	45a2      	cmp	sl, r4
 8006ed0:	db16      	blt.n	8006f00 <_strtol_l.constprop.0+0xb4>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8006ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006edc:	e7eb      	b.n	8006eb6 <_strtol_l.constprop.0+0x6a>
 8006ede:	2c2b      	cmp	r4, #43	; 0x2b
 8006ee0:	bf04      	itt	eq
 8006ee2:	782c      	ldrbeq	r4, [r5, #0]
 8006ee4:	1c95      	addeq	r5, r2, #2
 8006ee6:	e7ce      	b.n	8006e86 <_strtol_l.constprop.0+0x3a>
 8006ee8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006eec:	2f19      	cmp	r7, #25
 8006eee:	d801      	bhi.n	8006ef4 <_strtol_l.constprop.0+0xa8>
 8006ef0:	3c37      	subs	r4, #55	; 0x37
 8006ef2:	e7e5      	b.n	8006ec0 <_strtol_l.constprop.0+0x74>
 8006ef4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006ef8:	2f19      	cmp	r7, #25
 8006efa:	d804      	bhi.n	8006f06 <_strtol_l.constprop.0+0xba>
 8006efc:	3c57      	subs	r4, #87	; 0x57
 8006efe:	e7df      	b.n	8006ec0 <_strtol_l.constprop.0+0x74>
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	e7e8      	b.n	8006ed8 <_strtol_l.constprop.0+0x8c>
 8006f06:	1c53      	adds	r3, r2, #1
 8006f08:	d108      	bne.n	8006f1c <_strtol_l.constprop.0+0xd0>
 8006f0a:	2322      	movs	r3, #34	; 0x22
 8006f0c:	4660      	mov	r0, ip
 8006f0e:	f8ce 3000 	str.w	r3, [lr]
 8006f12:	f1b8 0f00 	cmp.w	r8, #0
 8006f16:	d0a6      	beq.n	8006e66 <_strtol_l.constprop.0+0x1a>
 8006f18:	1e69      	subs	r1, r5, #1
 8006f1a:	e006      	b.n	8006f2a <_strtol_l.constprop.0+0xde>
 8006f1c:	b106      	cbz	r6, 8006f20 <_strtol_l.constprop.0+0xd4>
 8006f1e:	4240      	negs	r0, r0
 8006f20:	f1b8 0f00 	cmp.w	r8, #0
 8006f24:	d09f      	beq.n	8006e66 <_strtol_l.constprop.0+0x1a>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	d1f6      	bne.n	8006f18 <_strtol_l.constprop.0+0xcc>
 8006f2a:	f8c8 1000 	str.w	r1, [r8]
 8006f2e:	e79a      	b.n	8006e66 <_strtol_l.constprop.0+0x1a>
 8006f30:	2430      	movs	r4, #48	; 0x30
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1b5      	bne.n	8006ea2 <_strtol_l.constprop.0+0x56>
 8006f36:	2308      	movs	r3, #8
 8006f38:	e7b3      	b.n	8006ea2 <_strtol_l.constprop.0+0x56>
 8006f3a:	2c30      	cmp	r4, #48	; 0x30
 8006f3c:	d0a9      	beq.n	8006e92 <_strtol_l.constprop.0+0x46>
 8006f3e:	230a      	movs	r3, #10
 8006f40:	e7af      	b.n	8006ea2 <_strtol_l.constprop.0+0x56>
 8006f42:	bf00      	nop
 8006f44:	0800abc1 	.word	0x0800abc1

08006f48 <strtol>:
 8006f48:	4613      	mov	r3, r2
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4802      	ldr	r0, [pc, #8]	; (8006f58 <strtol+0x10>)
 8006f50:	6800      	ldr	r0, [r0, #0]
 8006f52:	f7ff bf7b 	b.w	8006e4c <_strtol_l.constprop.0>
 8006f56:	bf00      	nop
 8006f58:	2000006c 	.word	0x2000006c

08006f5c <__cvt>:
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f62:	461f      	mov	r7, r3
 8006f64:	bfbb      	ittet	lt
 8006f66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f6a:	461f      	movlt	r7, r3
 8006f6c:	2300      	movge	r3, #0
 8006f6e:	232d      	movlt	r3, #45	; 0x2d
 8006f70:	b088      	sub	sp, #32
 8006f72:	4614      	mov	r4, r2
 8006f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f78:	7013      	strb	r3, [r2, #0]
 8006f7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f80:	f023 0820 	bic.w	r8, r3, #32
 8006f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f88:	d005      	beq.n	8006f96 <__cvt+0x3a>
 8006f8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f8e:	d100      	bne.n	8006f92 <__cvt+0x36>
 8006f90:	3501      	adds	r5, #1
 8006f92:	2302      	movs	r3, #2
 8006f94:	e000      	b.n	8006f98 <__cvt+0x3c>
 8006f96:	2303      	movs	r3, #3
 8006f98:	aa07      	add	r2, sp, #28
 8006f9a:	9204      	str	r2, [sp, #16]
 8006f9c:	aa06      	add	r2, sp, #24
 8006f9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006fa2:	e9cd 3500 	strd	r3, r5, [sp]
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	463b      	mov	r3, r7
 8006faa:	f000 fe71 	bl	8007c90 <_dtoa_r>
 8006fae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	d102      	bne.n	8006fbc <__cvt+0x60>
 8006fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fb8:	07db      	lsls	r3, r3, #31
 8006fba:	d522      	bpl.n	8007002 <__cvt+0xa6>
 8006fbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fc0:	eb06 0905 	add.w	r9, r6, r5
 8006fc4:	d110      	bne.n	8006fe8 <__cvt+0x8c>
 8006fc6:	7833      	ldrb	r3, [r6, #0]
 8006fc8:	2b30      	cmp	r3, #48	; 0x30
 8006fca:	d10a      	bne.n	8006fe2 <__cvt+0x86>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4639      	mov	r1, r7
 8006fd4:	f7f9 fcf2 	bl	80009bc <__aeabi_dcmpeq>
 8006fd8:	b918      	cbnz	r0, 8006fe2 <__cvt+0x86>
 8006fda:	f1c5 0501 	rsb	r5, r5, #1
 8006fde:	f8ca 5000 	str.w	r5, [sl]
 8006fe2:	f8da 3000 	ldr.w	r3, [sl]
 8006fe6:	4499      	add	r9, r3
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4620      	mov	r0, r4
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 fce4 	bl	80009bc <__aeabi_dcmpeq>
 8006ff4:	b108      	cbz	r0, 8006ffa <__cvt+0x9e>
 8006ff6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ffa:	2230      	movs	r2, #48	; 0x30
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	454b      	cmp	r3, r9
 8007000:	d307      	bcc.n	8007012 <__cvt+0xb6>
 8007002:	4630      	mov	r0, r6
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007008:	1b9b      	subs	r3, r3, r6
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	b008      	add	sp, #32
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	1c59      	adds	r1, r3, #1
 8007014:	9107      	str	r1, [sp, #28]
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e7f0      	b.n	8006ffc <__cvt+0xa0>

0800701a <__exponent>:
 800701a:	4603      	mov	r3, r0
 800701c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800701e:	2900      	cmp	r1, #0
 8007020:	f803 2b02 	strb.w	r2, [r3], #2
 8007024:	bfb6      	itet	lt
 8007026:	222d      	movlt	r2, #45	; 0x2d
 8007028:	222b      	movge	r2, #43	; 0x2b
 800702a:	4249      	neglt	r1, r1
 800702c:	2909      	cmp	r1, #9
 800702e:	7042      	strb	r2, [r0, #1]
 8007030:	dd2a      	ble.n	8007088 <__exponent+0x6e>
 8007032:	f10d 0207 	add.w	r2, sp, #7
 8007036:	4617      	mov	r7, r2
 8007038:	260a      	movs	r6, #10
 800703a:	fb91 f5f6 	sdiv	r5, r1, r6
 800703e:	4694      	mov	ip, r2
 8007040:	fb06 1415 	mls	r4, r6, r5, r1
 8007044:	3430      	adds	r4, #48	; 0x30
 8007046:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800704a:	460c      	mov	r4, r1
 800704c:	2c63      	cmp	r4, #99	; 0x63
 800704e:	4629      	mov	r1, r5
 8007050:	f102 32ff 	add.w	r2, r2, #4294967295
 8007054:	dcf1      	bgt.n	800703a <__exponent+0x20>
 8007056:	3130      	adds	r1, #48	; 0x30
 8007058:	f1ac 0402 	sub.w	r4, ip, #2
 800705c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007060:	4622      	mov	r2, r4
 8007062:	1c41      	adds	r1, r0, #1
 8007064:	42ba      	cmp	r2, r7
 8007066:	d30a      	bcc.n	800707e <__exponent+0x64>
 8007068:	f10d 0209 	add.w	r2, sp, #9
 800706c:	eba2 020c 	sub.w	r2, r2, ip
 8007070:	42bc      	cmp	r4, r7
 8007072:	bf88      	it	hi
 8007074:	2200      	movhi	r2, #0
 8007076:	4413      	add	r3, r2
 8007078:	1a18      	subs	r0, r3, r0
 800707a:	b003      	add	sp, #12
 800707c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007082:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007086:	e7ed      	b.n	8007064 <__exponent+0x4a>
 8007088:	2330      	movs	r3, #48	; 0x30
 800708a:	3130      	adds	r1, #48	; 0x30
 800708c:	7083      	strb	r3, [r0, #2]
 800708e:	70c1      	strb	r1, [r0, #3]
 8007090:	1d03      	adds	r3, r0, #4
 8007092:	e7f1      	b.n	8007078 <__exponent+0x5e>

08007094 <_printf_float>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b091      	sub	sp, #68	; 0x44
 800709a:	460c      	mov	r4, r1
 800709c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80070a0:	4616      	mov	r6, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	4605      	mov	r5, r0
 80070a6:	f000 fce5 	bl	8007a74 <_localeconv_r>
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	f7f9 f858 	bl	8000164 <strlen>
 80070b4:	2300      	movs	r3, #0
 80070b6:	930e      	str	r3, [sp, #56]	; 0x38
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	900a      	str	r0, [sp, #40]	; 0x28
 80070be:	3307      	adds	r3, #7
 80070c0:	f023 0307 	bic.w	r3, r3, #7
 80070c4:	f103 0208 	add.w	r2, r3, #8
 80070c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80070cc:	f8d4 b000 	ldr.w	fp, [r4]
 80070d0:	f8c8 2000 	str.w	r2, [r8]
 80070d4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80070d8:	4652      	mov	r2, sl
 80070da:	4643      	mov	r3, r8
 80070dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070e0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80070e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	4650      	mov	r0, sl
 80070ec:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <_printf_float+0x2cc>)
 80070ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070f0:	f7f9 fc96 	bl	8000a20 <__aeabi_dcmpun>
 80070f4:	bb70      	cbnz	r0, 8007154 <_printf_float+0xc0>
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	4650      	mov	r0, sl
 80070fc:	4b98      	ldr	r3, [pc, #608]	; (8007360 <_printf_float+0x2cc>)
 80070fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007100:	f7f9 fc70 	bl	80009e4 <__aeabi_dcmple>
 8007104:	bb30      	cbnz	r0, 8007154 <_printf_float+0xc0>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4650      	mov	r0, sl
 800710c:	4641      	mov	r1, r8
 800710e:	f7f9 fc5f 	bl	80009d0 <__aeabi_dcmplt>
 8007112:	b110      	cbz	r0, 800711a <_printf_float+0x86>
 8007114:	232d      	movs	r3, #45	; 0x2d
 8007116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711a:	4a92      	ldr	r2, [pc, #584]	; (8007364 <_printf_float+0x2d0>)
 800711c:	4b92      	ldr	r3, [pc, #584]	; (8007368 <_printf_float+0x2d4>)
 800711e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007122:	bf94      	ite	ls
 8007124:	4690      	movls	r8, r2
 8007126:	4698      	movhi	r8, r3
 8007128:	2303      	movs	r3, #3
 800712a:	f04f 0a00 	mov.w	sl, #0
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	f02b 0304 	bic.w	r3, fp, #4
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	4633      	mov	r3, r6
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	9700      	str	r7, [sp, #0]
 800713e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007140:	f000 f9d6 	bl	80074f0 <_printf_common>
 8007144:	3001      	adds	r0, #1
 8007146:	f040 8090 	bne.w	800726a <_printf_float+0x1d6>
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	b011      	add	sp, #68	; 0x44
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	4652      	mov	r2, sl
 8007156:	4643      	mov	r3, r8
 8007158:	4650      	mov	r0, sl
 800715a:	4641      	mov	r1, r8
 800715c:	f7f9 fc60 	bl	8000a20 <__aeabi_dcmpun>
 8007160:	b148      	cbz	r0, 8007176 <_printf_float+0xe2>
 8007162:	f1b8 0f00 	cmp.w	r8, #0
 8007166:	bfb8      	it	lt
 8007168:	232d      	movlt	r3, #45	; 0x2d
 800716a:	4a80      	ldr	r2, [pc, #512]	; (800736c <_printf_float+0x2d8>)
 800716c:	bfb8      	it	lt
 800716e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007172:	4b7f      	ldr	r3, [pc, #508]	; (8007370 <_printf_float+0x2dc>)
 8007174:	e7d3      	b.n	800711e <_printf_float+0x8a>
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	d142      	bne.n	8007206 <_printf_float+0x172>
 8007180:	2306      	movs	r3, #6
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	9206      	str	r2, [sp, #24]
 8007188:	aa0e      	add	r2, sp, #56	; 0x38
 800718a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800718e:	aa0d      	add	r2, sp, #52	; 0x34
 8007190:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007194:	9203      	str	r2, [sp, #12]
 8007196:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800719a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	6863      	ldr	r3, [r4, #4]
 80071a2:	4652      	mov	r2, sl
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4628      	mov	r0, r5
 80071a8:	4643      	mov	r3, r8
 80071aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80071ac:	f7ff fed6 	bl	8006f5c <__cvt>
 80071b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071b2:	4680      	mov	r8, r0
 80071b4:	2947      	cmp	r1, #71	; 0x47
 80071b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071b8:	d108      	bne.n	80071cc <_printf_float+0x138>
 80071ba:	1cc8      	adds	r0, r1, #3
 80071bc:	db02      	blt.n	80071c4 <_printf_float+0x130>
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	4299      	cmp	r1, r3
 80071c2:	dd40      	ble.n	8007246 <_printf_float+0x1b2>
 80071c4:	f1a9 0902 	sub.w	r9, r9, #2
 80071c8:	fa5f f989 	uxtb.w	r9, r9
 80071cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80071d0:	d81f      	bhi.n	8007212 <_printf_float+0x17e>
 80071d2:	464a      	mov	r2, r9
 80071d4:	3901      	subs	r1, #1
 80071d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071da:	910d      	str	r1, [sp, #52]	; 0x34
 80071dc:	f7ff ff1d 	bl	800701a <__exponent>
 80071e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071e2:	4682      	mov	sl, r0
 80071e4:	1813      	adds	r3, r2, r0
 80071e6:	2a01      	cmp	r2, #1
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	dc02      	bgt.n	80071f2 <_printf_float+0x15e>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d2      	lsls	r2, r2, #31
 80071f0:	d501      	bpl.n	80071f6 <_printf_float+0x162>
 80071f2:	3301      	adds	r3, #1
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d09b      	beq.n	8007136 <_printf_float+0xa2>
 80071fe:	232d      	movs	r3, #45	; 0x2d
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	e797      	b.n	8007136 <_printf_float+0xa2>
 8007206:	2947      	cmp	r1, #71	; 0x47
 8007208:	d1bc      	bne.n	8007184 <_printf_float+0xf0>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1ba      	bne.n	8007184 <_printf_float+0xf0>
 800720e:	2301      	movs	r3, #1
 8007210:	e7b7      	b.n	8007182 <_printf_float+0xee>
 8007212:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007216:	d118      	bne.n	800724a <_printf_float+0x1b6>
 8007218:	2900      	cmp	r1, #0
 800721a:	6863      	ldr	r3, [r4, #4]
 800721c:	dd0b      	ble.n	8007236 <_printf_float+0x1a2>
 800721e:	6121      	str	r1, [r4, #16]
 8007220:	b913      	cbnz	r3, 8007228 <_printf_float+0x194>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	07d0      	lsls	r0, r2, #31
 8007226:	d502      	bpl.n	800722e <_printf_float+0x19a>
 8007228:	3301      	adds	r3, #1
 800722a:	440b      	add	r3, r1
 800722c:	6123      	str	r3, [r4, #16]
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	65a1      	str	r1, [r4, #88]	; 0x58
 8007234:	e7df      	b.n	80071f6 <_printf_float+0x162>
 8007236:	b913      	cbnz	r3, 800723e <_printf_float+0x1aa>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	07d2      	lsls	r2, r2, #31
 800723c:	d501      	bpl.n	8007242 <_printf_float+0x1ae>
 800723e:	3302      	adds	r3, #2
 8007240:	e7f4      	b.n	800722c <_printf_float+0x198>
 8007242:	2301      	movs	r3, #1
 8007244:	e7f2      	b.n	800722c <_printf_float+0x198>
 8007246:	f04f 0967 	mov.w	r9, #103	; 0x67
 800724a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724c:	4299      	cmp	r1, r3
 800724e:	db05      	blt.n	800725c <_printf_float+0x1c8>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	6121      	str	r1, [r4, #16]
 8007254:	07d8      	lsls	r0, r3, #31
 8007256:	d5ea      	bpl.n	800722e <_printf_float+0x19a>
 8007258:	1c4b      	adds	r3, r1, #1
 800725a:	e7e7      	b.n	800722c <_printf_float+0x198>
 800725c:	2900      	cmp	r1, #0
 800725e:	bfcc      	ite	gt
 8007260:	2201      	movgt	r2, #1
 8007262:	f1c1 0202 	rsble	r2, r1, #2
 8007266:	4413      	add	r3, r2
 8007268:	e7e0      	b.n	800722c <_printf_float+0x198>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	055a      	lsls	r2, r3, #21
 800726e:	d407      	bmi.n	8007280 <_printf_float+0x1ec>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	4642      	mov	r2, r8
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	d12b      	bne.n	80072d6 <_printf_float+0x242>
 800727e:	e764      	b.n	800714a <_printf_float+0xb6>
 8007280:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007284:	f240 80dd 	bls.w	8007442 <_printf_float+0x3ae>
 8007288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	f7f9 fb94 	bl	80009bc <__aeabi_dcmpeq>
 8007294:	2800      	cmp	r0, #0
 8007296:	d033      	beq.n	8007300 <_printf_float+0x26c>
 8007298:	2301      	movs	r3, #1
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	4a35      	ldr	r2, [pc, #212]	; (8007374 <_printf_float+0x2e0>)
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af51 	beq.w	800714a <_printf_float+0xb6>
 80072a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072ac:	429a      	cmp	r2, r3
 80072ae:	db02      	blt.n	80072b6 <_printf_float+0x222>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07d8      	lsls	r0, r3, #31
 80072b4:	d50f      	bpl.n	80072d6 <_printf_float+0x242>
 80072b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f af42 	beq.w	800714a <_printf_float+0xb6>
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	f104 091a 	add.w	r9, r4, #26
 80072ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4543      	cmp	r3, r8
 80072d4:	dc09      	bgt.n	80072ea <_printf_float+0x256>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	079b      	lsls	r3, r3, #30
 80072da:	f100 8104 	bmi.w	80074e6 <_printf_float+0x452>
 80072de:	68e0      	ldr	r0, [r4, #12]
 80072e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072e2:	4298      	cmp	r0, r3
 80072e4:	bfb8      	it	lt
 80072e6:	4618      	movlt	r0, r3
 80072e8:	e731      	b.n	800714e <_printf_float+0xba>
 80072ea:	2301      	movs	r3, #1
 80072ec:	464a      	mov	r2, r9
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f af28 	beq.w	800714a <_printf_float+0xb6>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	e7e6      	b.n	80072ce <_printf_float+0x23a>
 8007300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007302:	2b00      	cmp	r3, #0
 8007304:	dc38      	bgt.n	8007378 <_printf_float+0x2e4>
 8007306:	2301      	movs	r3, #1
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <_printf_float+0x2e0>)
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	f43f af1a 	beq.w	800714a <_printf_float+0xb6>
 8007316:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800731a:	4313      	orrs	r3, r2
 800731c:	d102      	bne.n	8007324 <_printf_float+0x290>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	07d9      	lsls	r1, r3, #31
 8007322:	d5d8      	bpl.n	80072d6 <_printf_float+0x242>
 8007324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f af0b 	beq.w	800714a <_printf_float+0xb6>
 8007334:	f04f 0900 	mov.w	r9, #0
 8007338:	f104 0a1a 	add.w	sl, r4, #26
 800733c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733e:	425b      	negs	r3, r3
 8007340:	454b      	cmp	r3, r9
 8007342:	dc01      	bgt.n	8007348 <_printf_float+0x2b4>
 8007344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007346:	e794      	b.n	8007272 <_printf_float+0x1de>
 8007348:	2301      	movs	r3, #1
 800734a:	4652      	mov	r2, sl
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f aef9 	beq.w	800714a <_printf_float+0xb6>
 8007358:	f109 0901 	add.w	r9, r9, #1
 800735c:	e7ee      	b.n	800733c <_printf_float+0x2a8>
 800735e:	bf00      	nop
 8007360:	7fefffff 	.word	0x7fefffff
 8007364:	0800acc1 	.word	0x0800acc1
 8007368:	0800acc5 	.word	0x0800acc5
 800736c:	0800acc9 	.word	0x0800acc9
 8007370:	0800accd 	.word	0x0800accd
 8007374:	0800acd1 	.word	0x0800acd1
 8007378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800737a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800737c:	429a      	cmp	r2, r3
 800737e:	bfa8      	it	ge
 8007380:	461a      	movge	r2, r3
 8007382:	2a00      	cmp	r2, #0
 8007384:	4691      	mov	r9, r2
 8007386:	dc37      	bgt.n	80073f8 <_printf_float+0x364>
 8007388:	f04f 0b00 	mov.w	fp, #0
 800738c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007390:	f104 021a 	add.w	r2, r4, #26
 8007394:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007398:	ebaa 0309 	sub.w	r3, sl, r9
 800739c:	455b      	cmp	r3, fp
 800739e:	dc33      	bgt.n	8007408 <_printf_float+0x374>
 80073a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073a4:	429a      	cmp	r2, r3
 80073a6:	db3b      	blt.n	8007420 <_printf_float+0x38c>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	07da      	lsls	r2, r3, #31
 80073ac:	d438      	bmi.n	8007420 <_printf_float+0x38c>
 80073ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80073b2:	eba2 0903 	sub.w	r9, r2, r3
 80073b6:	eba2 020a 	sub.w	r2, r2, sl
 80073ba:	4591      	cmp	r9, r2
 80073bc:	bfa8      	it	ge
 80073be:	4691      	movge	r9, r2
 80073c0:	f1b9 0f00 	cmp.w	r9, #0
 80073c4:	dc34      	bgt.n	8007430 <_printf_float+0x39c>
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ce:	f104 0a1a 	add.w	sl, r4, #26
 80073d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	eba3 0309 	sub.w	r3, r3, r9
 80073dc:	4543      	cmp	r3, r8
 80073de:	f77f af7a 	ble.w	80072d6 <_printf_float+0x242>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f aeac 	beq.w	800714a <_printf_float+0xb6>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	e7ec      	b.n	80073d2 <_printf_float+0x33e>
 80073f8:	4613      	mov	r3, r2
 80073fa:	4631      	mov	r1, r6
 80073fc:	4642      	mov	r2, r8
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	d1c0      	bne.n	8007388 <_printf_float+0x2f4>
 8007406:	e6a0      	b.n	800714a <_printf_float+0xb6>
 8007408:	2301      	movs	r3, #1
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	f43f ae99 	beq.w	800714a <_printf_float+0xb6>
 8007418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800741a:	f10b 0b01 	add.w	fp, fp, #1
 800741e:	e7b9      	b.n	8007394 <_printf_float+0x300>
 8007420:	4631      	mov	r1, r6
 8007422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	d1bf      	bne.n	80073ae <_printf_float+0x31a>
 800742e:	e68c      	b.n	800714a <_printf_float+0xb6>
 8007430:	464b      	mov	r3, r9
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	eb08 020a 	add.w	r2, r8, sl
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	d1c2      	bne.n	80073c6 <_printf_float+0x332>
 8007440:	e683      	b.n	800714a <_printf_float+0xb6>
 8007442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007444:	2a01      	cmp	r2, #1
 8007446:	dc01      	bgt.n	800744c <_printf_float+0x3b8>
 8007448:	07db      	lsls	r3, r3, #31
 800744a:	d539      	bpl.n	80074c0 <_printf_float+0x42c>
 800744c:	2301      	movs	r3, #1
 800744e:	4642      	mov	r2, r8
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f ae77 	beq.w	800714a <_printf_float+0xb6>
 800745c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f ae6f 	beq.w	800714a <_printf_float+0xb6>
 800746c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007478:	f7f9 faa0 	bl	80009bc <__aeabi_dcmpeq>
 800747c:	b9d8      	cbnz	r0, 80074b6 <_printf_float+0x422>
 800747e:	f109 33ff 	add.w	r3, r9, #4294967295
 8007482:	f108 0201 	add.w	r2, r8, #1
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	d10e      	bne.n	80074ae <_printf_float+0x41a>
 8007490:	e65b      	b.n	800714a <_printf_float+0xb6>
 8007492:	2301      	movs	r3, #1
 8007494:	464a      	mov	r2, r9
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae54 	beq.w	800714a <_printf_float+0xb6>
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a8:	3b01      	subs	r3, #1
 80074aa:	4543      	cmp	r3, r8
 80074ac:	dcf1      	bgt.n	8007492 <_printf_float+0x3fe>
 80074ae:	4653      	mov	r3, sl
 80074b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074b4:	e6de      	b.n	8007274 <_printf_float+0x1e0>
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	f104 091a 	add.w	r9, r4, #26
 80074be:	e7f2      	b.n	80074a6 <_printf_float+0x412>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4642      	mov	r2, r8
 80074c4:	e7df      	b.n	8007486 <_printf_float+0x3f2>
 80074c6:	2301      	movs	r3, #1
 80074c8:	464a      	mov	r2, r9
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	f43f ae3a 	beq.w	800714a <_printf_float+0xb6>
 80074d6:	f108 0801 	add.w	r8, r8, #1
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074de:	1a5b      	subs	r3, r3, r1
 80074e0:	4543      	cmp	r3, r8
 80074e2:	dcf0      	bgt.n	80074c6 <_printf_float+0x432>
 80074e4:	e6fb      	b.n	80072de <_printf_float+0x24a>
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	f104 0919 	add.w	r9, r4, #25
 80074ee:	e7f4      	b.n	80074da <_printf_float+0x446>

080074f0 <_printf_common>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4616      	mov	r6, r2
 80074f6:	4699      	mov	r9, r3
 80074f8:	688a      	ldr	r2, [r1, #8]
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	4607      	mov	r7, r0
 80074fe:	4293      	cmp	r3, r2
 8007500:	bfb8      	it	lt
 8007502:	4613      	movlt	r3, r2
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750a:	460c      	mov	r4, r1
 800750c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007510:	b10a      	cbz	r2, 8007516 <_printf_common+0x26>
 8007512:	3301      	adds	r3, #1
 8007514:	6033      	str	r3, [r6, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	0699      	lsls	r1, r3, #26
 800751a:	bf42      	ittt	mi
 800751c:	6833      	ldrmi	r3, [r6, #0]
 800751e:	3302      	addmi	r3, #2
 8007520:	6033      	strmi	r3, [r6, #0]
 8007522:	6825      	ldr	r5, [r4, #0]
 8007524:	f015 0506 	ands.w	r5, r5, #6
 8007528:	d106      	bne.n	8007538 <_printf_common+0x48>
 800752a:	f104 0a19 	add.w	sl, r4, #25
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	6832      	ldr	r2, [r6, #0]
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	42ab      	cmp	r3, r5
 8007536:	dc2b      	bgt.n	8007590 <_printf_common+0xa0>
 8007538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800753c:	1e13      	subs	r3, r2, #0
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	bf18      	it	ne
 8007542:	2301      	movne	r3, #1
 8007544:	0692      	lsls	r2, r2, #26
 8007546:	d430      	bmi.n	80075aa <_printf_common+0xba>
 8007548:	4649      	mov	r1, r9
 800754a:	4638      	mov	r0, r7
 800754c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d023      	beq.n	800759e <_printf_common+0xae>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	6922      	ldr	r2, [r4, #16]
 800755a:	f003 0306 	and.w	r3, r3, #6
 800755e:	2b04      	cmp	r3, #4
 8007560:	bf14      	ite	ne
 8007562:	2500      	movne	r5, #0
 8007564:	6833      	ldreq	r3, [r6, #0]
 8007566:	f04f 0600 	mov.w	r6, #0
 800756a:	bf08      	it	eq
 800756c:	68e5      	ldreq	r5, [r4, #12]
 800756e:	f104 041a 	add.w	r4, r4, #26
 8007572:	bf08      	it	eq
 8007574:	1aed      	subeq	r5, r5, r3
 8007576:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800757a:	bf08      	it	eq
 800757c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007580:	4293      	cmp	r3, r2
 8007582:	bfc4      	itt	gt
 8007584:	1a9b      	subgt	r3, r3, r2
 8007586:	18ed      	addgt	r5, r5, r3
 8007588:	42b5      	cmp	r5, r6
 800758a:	d11a      	bne.n	80075c2 <_printf_common+0xd2>
 800758c:	2000      	movs	r0, #0
 800758e:	e008      	b.n	80075a2 <_printf_common+0xb2>
 8007590:	2301      	movs	r3, #1
 8007592:	4652      	mov	r2, sl
 8007594:	4649      	mov	r1, r9
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d103      	bne.n	80075a6 <_printf_common+0xb6>
 800759e:	f04f 30ff 	mov.w	r0, #4294967295
 80075a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a6:	3501      	adds	r5, #1
 80075a8:	e7c1      	b.n	800752e <_printf_common+0x3e>
 80075aa:	2030      	movs	r0, #48	; 0x30
 80075ac:	18e1      	adds	r1, r4, r3
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b8:	4422      	add	r2, r4
 80075ba:	3302      	adds	r3, #2
 80075bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075c0:	e7c2      	b.n	8007548 <_printf_common+0x58>
 80075c2:	2301      	movs	r3, #1
 80075c4:	4622      	mov	r2, r4
 80075c6:	4649      	mov	r1, r9
 80075c8:	4638      	mov	r0, r7
 80075ca:	47c0      	blx	r8
 80075cc:	3001      	adds	r0, #1
 80075ce:	d0e6      	beq.n	800759e <_printf_common+0xae>
 80075d0:	3601      	adds	r6, #1
 80075d2:	e7d9      	b.n	8007588 <_printf_common+0x98>

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	7e0f      	ldrb	r7, [r1, #24]
 80075da:	4691      	mov	r9, r2
 80075dc:	2f78      	cmp	r7, #120	; 0x78
 80075de:	4680      	mov	r8, r0
 80075e0:	460c      	mov	r4, r1
 80075e2:	469a      	mov	sl, r3
 80075e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	; 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d5 	beq.w	80077a0 <_printf_i+0x1cc>
 80075f6:	2f58      	cmp	r7, #88	; 0x58
 80075f8:	f000 80c1 	beq.w	800777e <_printf_i+0x1aa>
 80075fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a101      	add	r1, pc, #4	; (adr r1, 8007614 <_printf_i+0x40>)
 8007610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	08007787 	.word	0x08007787
 8007644:	080076ad 	.word	0x080076ad
 8007648:	08007741 	.word	0x08007741
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077a9 	.word	0x080077a9
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076ad 	.word	0x080076ad
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007749 	.word	0x08007749
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	602a      	str	r2, [r5, #0]
 8007674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e0a0      	b.n	80077c2 <_printf_i+0x1ee>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	0607      	lsls	r7, r0, #24
 8007686:	f103 0104 	add.w	r1, r3, #4
 800768a:	6029      	str	r1, [r5, #0]
 800768c:	d501      	bpl.n	8007692 <_printf_i+0xbe>
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	e003      	b.n	800769a <_printf_i+0xc6>
 8007692:	0646      	lsls	r6, r0, #25
 8007694:	d5fb      	bpl.n	800768e <_printf_i+0xba>
 8007696:	f9b3 6000 	ldrsh.w	r6, [r3]
 800769a:	2e00      	cmp	r6, #0
 800769c:	da03      	bge.n	80076a6 <_printf_i+0xd2>
 800769e:	232d      	movs	r3, #45	; 0x2d
 80076a0:	4276      	negs	r6, r6
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a6:	230a      	movs	r3, #10
 80076a8:	4859      	ldr	r0, [pc, #356]	; (8007810 <_printf_i+0x23c>)
 80076aa:	e012      	b.n	80076d2 <_printf_i+0xfe>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6029      	str	r1, [r5, #0]
 80076b4:	0605      	lsls	r5, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xe8>
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	e002      	b.n	80076c2 <_printf_i+0xee>
 80076bc:	0641      	lsls	r1, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xe4>
 80076c0:	881e      	ldrh	r6, [r3, #0]
 80076c2:	2f6f      	cmp	r7, #111	; 0x6f
 80076c4:	bf0c      	ite	eq
 80076c6:	2308      	moveq	r3, #8
 80076c8:	230a      	movne	r3, #10
 80076ca:	4851      	ldr	r0, [pc, #324]	; (8007810 <_printf_i+0x23c>)
 80076cc:	2100      	movs	r1, #0
 80076ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d2:	6865      	ldr	r5, [r4, #4]
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	bfa8      	it	ge
 80076d8:	6821      	ldrge	r1, [r4, #0]
 80076da:	60a5      	str	r5, [r4, #8]
 80076dc:	bfa4      	itt	ge
 80076de:	f021 0104 	bicge.w	r1, r1, #4
 80076e2:	6021      	strge	r1, [r4, #0]
 80076e4:	b90e      	cbnz	r6, 80076ea <_printf_i+0x116>
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	d04b      	beq.n	8007782 <_printf_i+0x1ae>
 80076ea:	4615      	mov	r5, r2
 80076ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80076f0:	fb03 6711 	mls	r7, r3, r1, r6
 80076f4:	5dc7      	ldrb	r7, [r0, r7]
 80076f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076fa:	4637      	mov	r7, r6
 80076fc:	42bb      	cmp	r3, r7
 80076fe:	460e      	mov	r6, r1
 8007700:	d9f4      	bls.n	80076ec <_printf_i+0x118>
 8007702:	2b08      	cmp	r3, #8
 8007704:	d10b      	bne.n	800771e <_printf_i+0x14a>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	07de      	lsls	r6, r3, #31
 800770a:	d508      	bpl.n	800771e <_printf_i+0x14a>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	6861      	ldr	r1, [r4, #4]
 8007710:	4299      	cmp	r1, r3
 8007712:	bfde      	ittt	le
 8007714:	2330      	movle	r3, #48	; 0x30
 8007716:	f805 3c01 	strble.w	r3, [r5, #-1]
 800771a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800771e:	1b52      	subs	r2, r2, r5
 8007720:	6122      	str	r2, [r4, #16]
 8007722:	464b      	mov	r3, r9
 8007724:	4621      	mov	r1, r4
 8007726:	4640      	mov	r0, r8
 8007728:	f8cd a000 	str.w	sl, [sp]
 800772c:	aa03      	add	r2, sp, #12
 800772e:	f7ff fedf 	bl	80074f0 <_printf_common>
 8007732:	3001      	adds	r0, #1
 8007734:	d14a      	bne.n	80077cc <_printf_i+0x1f8>
 8007736:	f04f 30ff 	mov.w	r0, #4294967295
 800773a:	b004      	add	sp, #16
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f043 0320 	orr.w	r3, r3, #32
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	2778      	movs	r7, #120	; 0x78
 800774a:	4832      	ldr	r0, [pc, #200]	; (8007814 <_printf_i+0x240>)
 800774c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	6829      	ldr	r1, [r5, #0]
 8007754:	061f      	lsls	r7, r3, #24
 8007756:	f851 6b04 	ldr.w	r6, [r1], #4
 800775a:	d402      	bmi.n	8007762 <_printf_i+0x18e>
 800775c:	065f      	lsls	r7, r3, #25
 800775e:	bf48      	it	mi
 8007760:	b2b6      	uxthmi	r6, r6
 8007762:	07df      	lsls	r7, r3, #31
 8007764:	bf48      	it	mi
 8007766:	f043 0320 	orrmi.w	r3, r3, #32
 800776a:	6029      	str	r1, [r5, #0]
 800776c:	bf48      	it	mi
 800776e:	6023      	strmi	r3, [r4, #0]
 8007770:	b91e      	cbnz	r6, 800777a <_printf_i+0x1a6>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f023 0320 	bic.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2310      	movs	r3, #16
 800777c:	e7a6      	b.n	80076cc <_printf_i+0xf8>
 800777e:	4824      	ldr	r0, [pc, #144]	; (8007810 <_printf_i+0x23c>)
 8007780:	e7e4      	b.n	800774c <_printf_i+0x178>
 8007782:	4615      	mov	r5, r2
 8007784:	e7bd      	b.n	8007702 <_printf_i+0x12e>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	6826      	ldr	r6, [r4, #0]
 800778a:	1d18      	adds	r0, r3, #4
 800778c:	6961      	ldr	r1, [r4, #20]
 800778e:	6028      	str	r0, [r5, #0]
 8007790:	0635      	lsls	r5, r6, #24
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	d501      	bpl.n	800779a <_printf_i+0x1c6>
 8007796:	6019      	str	r1, [r3, #0]
 8007798:	e002      	b.n	80077a0 <_printf_i+0x1cc>
 800779a:	0670      	lsls	r0, r6, #25
 800779c:	d5fb      	bpl.n	8007796 <_printf_i+0x1c2>
 800779e:	8019      	strh	r1, [r3, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	4615      	mov	r5, r2
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	e7bc      	b.n	8007722 <_printf_i+0x14e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	2100      	movs	r1, #0
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	602a      	str	r2, [r5, #0]
 80077b0:	681d      	ldr	r5, [r3, #0]
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 f9d4 	bl	8007b62 <memchr>
 80077ba:	b108      	cbz	r0, 80077c0 <_printf_i+0x1ec>
 80077bc:	1b40      	subs	r0, r0, r5
 80077be:	6060      	str	r0, [r4, #4]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2300      	movs	r3, #0
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ca:	e7aa      	b.n	8007722 <_printf_i+0x14e>
 80077cc:	462a      	mov	r2, r5
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	47d0      	blx	sl
 80077d6:	3001      	adds	r0, #1
 80077d8:	d0ad      	beq.n	8007736 <_printf_i+0x162>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	079b      	lsls	r3, r3, #30
 80077de:	d413      	bmi.n	8007808 <_printf_i+0x234>
 80077e0:	68e0      	ldr	r0, [r4, #12]
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	4298      	cmp	r0, r3
 80077e6:	bfb8      	it	lt
 80077e8:	4618      	movlt	r0, r3
 80077ea:	e7a6      	b.n	800773a <_printf_i+0x166>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4632      	mov	r2, r6
 80077f0:	4649      	mov	r1, r9
 80077f2:	4640      	mov	r0, r8
 80077f4:	47d0      	blx	sl
 80077f6:	3001      	adds	r0, #1
 80077f8:	d09d      	beq.n	8007736 <_printf_i+0x162>
 80077fa:	3501      	adds	r5, #1
 80077fc:	68e3      	ldr	r3, [r4, #12]
 80077fe:	9903      	ldr	r1, [sp, #12]
 8007800:	1a5b      	subs	r3, r3, r1
 8007802:	42ab      	cmp	r3, r5
 8007804:	dcf2      	bgt.n	80077ec <_printf_i+0x218>
 8007806:	e7eb      	b.n	80077e0 <_printf_i+0x20c>
 8007808:	2500      	movs	r5, #0
 800780a:	f104 0619 	add.w	r6, r4, #25
 800780e:	e7f5      	b.n	80077fc <_printf_i+0x228>
 8007810:	0800acd3 	.word	0x0800acd3
 8007814:	0800ace4 	.word	0x0800ace4

08007818 <std>:
 8007818:	2300      	movs	r3, #0
 800781a:	b510      	push	{r4, lr}
 800781c:	4604      	mov	r4, r0
 800781e:	e9c0 3300 	strd	r3, r3, [r0]
 8007822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007826:	6083      	str	r3, [r0, #8]
 8007828:	8181      	strh	r1, [r0, #12]
 800782a:	6643      	str	r3, [r0, #100]	; 0x64
 800782c:	81c2      	strh	r2, [r0, #14]
 800782e:	6183      	str	r3, [r0, #24]
 8007830:	4619      	mov	r1, r3
 8007832:	2208      	movs	r2, #8
 8007834:	305c      	adds	r0, #92	; 0x5c
 8007836:	f000 f914 	bl	8007a62 <memset>
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <std+0x58>)
 800783c:	6224      	str	r4, [r4, #32]
 800783e:	6263      	str	r3, [r4, #36]	; 0x24
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <std+0x5c>)
 8007842:	62a3      	str	r3, [r4, #40]	; 0x28
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <std+0x60>)
 8007846:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <std+0x64>)
 800784a:	6323      	str	r3, [r4, #48]	; 0x30
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <std+0x68>)
 800784e:	429c      	cmp	r4, r3
 8007850:	d006      	beq.n	8007860 <std+0x48>
 8007852:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007856:	4294      	cmp	r4, r2
 8007858:	d002      	beq.n	8007860 <std+0x48>
 800785a:	33d0      	adds	r3, #208	; 0xd0
 800785c:	429c      	cmp	r4, r3
 800785e:	d105      	bne.n	800786c <std+0x54>
 8007860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f000 b978 	b.w	8007b5c <__retarget_lock_init_recursive>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	080079dd 	.word	0x080079dd
 8007874:	080079ff 	.word	0x080079ff
 8007878:	08007a37 	.word	0x08007a37
 800787c:	08007a5b 	.word	0x08007a5b
 8007880:	20000998 	.word	0x20000998

08007884 <stdio_exit_handler>:
 8007884:	4a02      	ldr	r2, [pc, #8]	; (8007890 <stdio_exit_handler+0xc>)
 8007886:	4903      	ldr	r1, [pc, #12]	; (8007894 <stdio_exit_handler+0x10>)
 8007888:	4803      	ldr	r0, [pc, #12]	; (8007898 <stdio_exit_handler+0x14>)
 800788a:	f000 b869 	b.w	8007960 <_fwalk_sglue>
 800788e:	bf00      	nop
 8007890:	20000014 	.word	0x20000014
 8007894:	080094f5 	.word	0x080094f5
 8007898:	20000020 	.word	0x20000020

0800789c <cleanup_stdio>:
 800789c:	6841      	ldr	r1, [r0, #4]
 800789e:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <cleanup_stdio+0x34>)
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4299      	cmp	r1, r3
 80078a4:	4604      	mov	r4, r0
 80078a6:	d001      	beq.n	80078ac <cleanup_stdio+0x10>
 80078a8:	f001 fe24 	bl	80094f4 <_fflush_r>
 80078ac:	68a1      	ldr	r1, [r4, #8]
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <cleanup_stdio+0x38>)
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <cleanup_stdio+0x1e>
 80078b4:	4620      	mov	r0, r4
 80078b6:	f001 fe1d 	bl	80094f4 <_fflush_r>
 80078ba:	68e1      	ldr	r1, [r4, #12]
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <cleanup_stdio+0x3c>)
 80078be:	4299      	cmp	r1, r3
 80078c0:	d004      	beq.n	80078cc <cleanup_stdio+0x30>
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f001 be14 	b.w	80094f4 <_fflush_r>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	20000998 	.word	0x20000998
 80078d4:	20000a00 	.word	0x20000a00
 80078d8:	20000a68 	.word	0x20000a68

080078dc <global_stdio_init.part.0>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <global_stdio_init.part.0+0x30>)
 80078e0:	4c0b      	ldr	r4, [pc, #44]	; (8007910 <global_stdio_init.part.0+0x34>)
 80078e2:	4a0c      	ldr	r2, [pc, #48]	; (8007914 <global_stdio_init.part.0+0x38>)
 80078e4:	4620      	mov	r0, r4
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	2104      	movs	r1, #4
 80078ea:	2200      	movs	r2, #0
 80078ec:	f7ff ff94 	bl	8007818 <std>
 80078f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078f4:	2201      	movs	r2, #1
 80078f6:	2109      	movs	r1, #9
 80078f8:	f7ff ff8e 	bl	8007818 <std>
 80078fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007900:	2202      	movs	r2, #2
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007906:	2112      	movs	r1, #18
 8007908:	f7ff bf86 	b.w	8007818 <std>
 800790c:	20000ad0 	.word	0x20000ad0
 8007910:	20000998 	.word	0x20000998
 8007914:	08007885 	.word	0x08007885

08007918 <__sfp_lock_acquire>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__sfp_lock_acquire+0x8>)
 800791a:	f000 b920 	b.w	8007b5e <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	20000ad9 	.word	0x20000ad9

08007924 <__sfp_lock_release>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__sfp_lock_release+0x8>)
 8007926:	f000 b91b 	b.w	8007b60 <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	20000ad9 	.word	0x20000ad9

08007930 <__sinit>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	f7ff fff0 	bl	8007918 <__sfp_lock_acquire>
 8007938:	6a23      	ldr	r3, [r4, #32]
 800793a:	b11b      	cbz	r3, 8007944 <__sinit+0x14>
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f7ff bff0 	b.w	8007924 <__sfp_lock_release>
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <__sinit+0x28>)
 8007946:	6223      	str	r3, [r4, #32]
 8007948:	4b04      	ldr	r3, [pc, #16]	; (800795c <__sinit+0x2c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f5      	bne.n	800793c <__sinit+0xc>
 8007950:	f7ff ffc4 	bl	80078dc <global_stdio_init.part.0>
 8007954:	e7f2      	b.n	800793c <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	0800789d 	.word	0x0800789d
 800795c:	20000ad0 	.word	0x20000ad0

08007960 <_fwalk_sglue>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4607      	mov	r7, r0
 8007966:	4688      	mov	r8, r1
 8007968:	4614      	mov	r4, r2
 800796a:	2600      	movs	r6, #0
 800796c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007970:	f1b9 0901 	subs.w	r9, r9, #1
 8007974:	d505      	bpl.n	8007982 <_fwalk_sglue+0x22>
 8007976:	6824      	ldr	r4, [r4, #0]
 8007978:	2c00      	cmp	r4, #0
 800797a:	d1f7      	bne.n	800796c <_fwalk_sglue+0xc>
 800797c:	4630      	mov	r0, r6
 800797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d907      	bls.n	8007998 <_fwalk_sglue+0x38>
 8007988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800798c:	3301      	adds	r3, #1
 800798e:	d003      	beq.n	8007998 <_fwalk_sglue+0x38>
 8007990:	4629      	mov	r1, r5
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	4306      	orrs	r6, r0
 8007998:	3568      	adds	r5, #104	; 0x68
 800799a:	e7e9      	b.n	8007970 <_fwalk_sglue+0x10>

0800799c <siprintf>:
 800799c:	b40e      	push	{r1, r2, r3}
 800799e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079a2:	b500      	push	{lr}
 80079a4:	b09c      	sub	sp, #112	; 0x70
 80079a6:	ab1d      	add	r3, sp, #116	; 0x74
 80079a8:	9002      	str	r0, [sp, #8]
 80079aa:	9006      	str	r0, [sp, #24]
 80079ac:	9107      	str	r1, [sp, #28]
 80079ae:	9104      	str	r1, [sp, #16]
 80079b0:	4808      	ldr	r0, [pc, #32]	; (80079d4 <siprintf+0x38>)
 80079b2:	4909      	ldr	r1, [pc, #36]	; (80079d8 <siprintf+0x3c>)
 80079b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	a902      	add	r1, sp, #8
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	f001 fc18 	bl	80091f4 <_svfiprintf_r>
 80079c4:	2200      	movs	r2, #0
 80079c6:	9b02      	ldr	r3, [sp, #8]
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	b01c      	add	sp, #112	; 0x70
 80079cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d0:	b003      	add	sp, #12
 80079d2:	4770      	bx	lr
 80079d4:	2000006c 	.word	0x2000006c
 80079d8:	ffff0208 	.word	0xffff0208

080079dc <__sread>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	460c      	mov	r4, r1
 80079e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e4:	f000 f86c 	bl	8007ac0 <_read_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	bfab      	itete	ge
 80079ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079ee:	89a3      	ldrhlt	r3, [r4, #12]
 80079f0:	181b      	addge	r3, r3, r0
 80079f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079f6:	bfac      	ite	ge
 80079f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079fa:	81a3      	strhlt	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__swrite>:
 80079fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a02:	461f      	mov	r7, r3
 8007a04:	898b      	ldrh	r3, [r1, #12]
 8007a06:	4605      	mov	r5, r0
 8007a08:	05db      	lsls	r3, r3, #23
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	d505      	bpl.n	8007a1c <__swrite+0x1e>
 8007a10:	2302      	movs	r3, #2
 8007a12:	2200      	movs	r2, #0
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	f000 f840 	bl	8007a9c <_lseek_r>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	4632      	mov	r2, r6
 8007a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a24:	81a3      	strh	r3, [r4, #12]
 8007a26:	4628      	mov	r0, r5
 8007a28:	463b      	mov	r3, r7
 8007a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	f000 b857 	b.w	8007ae4 <_write_r>

08007a36 <__sseek>:
 8007a36:	b510      	push	{r4, lr}
 8007a38:	460c      	mov	r4, r1
 8007a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3e:	f000 f82d 	bl	8007a9c <_lseek_r>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	bf15      	itete	ne
 8007a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a52:	81a3      	strheq	r3, [r4, #12]
 8007a54:	bf18      	it	ne
 8007a56:	81a3      	strhne	r3, [r4, #12]
 8007a58:	bd10      	pop	{r4, pc}

08007a5a <__sclose>:
 8007a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5e:	f000 b80d 	b.w	8007a7c <_close_r>

08007a62 <memset>:
 8007a62:	4603      	mov	r3, r0
 8007a64:	4402      	add	r2, r0
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d100      	bne.n	8007a6c <memset+0xa>
 8007a6a:	4770      	bx	lr
 8007a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a70:	e7f9      	b.n	8007a66 <memset+0x4>
	...

08007a74 <_localeconv_r>:
 8007a74:	4800      	ldr	r0, [pc, #0]	; (8007a78 <_localeconv_r+0x4>)
 8007a76:	4770      	bx	lr
 8007a78:	20000160 	.word	0x20000160

08007a7c <_close_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4d05      	ldr	r5, [pc, #20]	; (8007a98 <_close_r+0x1c>)
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7f9 ff52 	bl	8001930 <_close>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_close_r+0x1a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_close_r+0x1a>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20000ad4 	.word	0x20000ad4

08007a9c <_lseek_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4d05      	ldr	r5, [pc, #20]	; (8007abc <_lseek_r+0x20>)
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7f9 ff64 	bl	8001978 <_lseek>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_lseek_r+0x1e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_lseek_r+0x1e>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20000ad4 	.word	0x20000ad4

08007ac0 <_read_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4d05      	ldr	r5, [pc, #20]	; (8007ae0 <_read_r+0x20>)
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7f9 fef5 	bl	80018be <_read>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_read_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_read_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20000ad4 	.word	0x20000ad4

08007ae4 <_write_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	2200      	movs	r2, #0
 8007aee:	4d05      	ldr	r5, [pc, #20]	; (8007b04 <_write_r+0x20>)
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7f9 ff00 	bl	80018f8 <_write>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_write_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_write_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20000ad4 	.word	0x20000ad4

08007b08 <__errno>:
 8007b08:	4b01      	ldr	r3, [pc, #4]	; (8007b10 <__errno+0x8>)
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	2000006c 	.word	0x2000006c

08007b14 <__libc_init_array>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	2600      	movs	r6, #0
 8007b18:	4d0c      	ldr	r5, [pc, #48]	; (8007b4c <__libc_init_array+0x38>)
 8007b1a:	4c0d      	ldr	r4, [pc, #52]	; (8007b50 <__libc_init_array+0x3c>)
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	42a6      	cmp	r6, r4
 8007b22:	d109      	bne.n	8007b38 <__libc_init_array+0x24>
 8007b24:	f002 ff8e 	bl	800aa44 <_init>
 8007b28:	2600      	movs	r6, #0
 8007b2a:	4d0a      	ldr	r5, [pc, #40]	; (8007b54 <__libc_init_array+0x40>)
 8007b2c:	4c0a      	ldr	r4, [pc, #40]	; (8007b58 <__libc_init_array+0x44>)
 8007b2e:	1b64      	subs	r4, r4, r5
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	42a6      	cmp	r6, r4
 8007b34:	d105      	bne.n	8007b42 <__libc_init_array+0x2e>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3c:	4798      	blx	r3
 8007b3e:	3601      	adds	r6, #1
 8007b40:	e7ee      	b.n	8007b20 <__libc_init_array+0xc>
 8007b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b46:	4798      	blx	r3
 8007b48:	3601      	adds	r6, #1
 8007b4a:	e7f2      	b.n	8007b32 <__libc_init_array+0x1e>
 8007b4c:	0800af68 	.word	0x0800af68
 8007b50:	0800af68 	.word	0x0800af68
 8007b54:	0800af68 	.word	0x0800af68
 8007b58:	0800af6c 	.word	0x0800af6c

08007b5c <__retarget_lock_init_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <__retarget_lock_acquire_recursive>:
 8007b5e:	4770      	bx	lr

08007b60 <__retarget_lock_release_recursive>:
 8007b60:	4770      	bx	lr

08007b62 <memchr>:
 8007b62:	4603      	mov	r3, r0
 8007b64:	b510      	push	{r4, lr}
 8007b66:	b2c9      	uxtb	r1, r1
 8007b68:	4402      	add	r2, r0
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	d101      	bne.n	8007b74 <memchr+0x12>
 8007b70:	2000      	movs	r0, #0
 8007b72:	e003      	b.n	8007b7c <memchr+0x1a>
 8007b74:	7804      	ldrb	r4, [r0, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	428c      	cmp	r4, r1
 8007b7a:	d1f6      	bne.n	8007b6a <memchr+0x8>
 8007b7c:	bd10      	pop	{r4, pc}

08007b7e <quorem>:
 8007b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b82:	6903      	ldr	r3, [r0, #16]
 8007b84:	690c      	ldr	r4, [r1, #16]
 8007b86:	4607      	mov	r7, r0
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	db7f      	blt.n	8007c8c <quorem+0x10e>
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	f100 0514 	add.w	r5, r0, #20
 8007b92:	f101 0814 	add.w	r8, r1, #20
 8007b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb4:	d331      	bcc.n	8007c1a <quorem+0x9c>
 8007bb6:	f04f 0e00 	mov.w	lr, #0
 8007bba:	4640      	mov	r0, r8
 8007bbc:	46ac      	mov	ip, r5
 8007bbe:	46f2      	mov	sl, lr
 8007bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bc4:	b293      	uxth	r3, r2
 8007bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8007bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bce:	0c1a      	lsrs	r2, r3, #16
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	fb06 220e 	mla	r2, r6, lr, r2
 8007bd6:	ebaa 0303 	sub.w	r3, sl, r3
 8007bda:	f8dc a000 	ldr.w	sl, [ip]
 8007bde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007be2:	fa1f fa8a 	uxth.w	sl, sl
 8007be6:	4453      	add	r3, sl
 8007be8:	f8dc a000 	ldr.w	sl, [ip]
 8007bec:	b292      	uxth	r2, r2
 8007bee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bfc:	4581      	cmp	r9, r0
 8007bfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c02:	f84c 3b04 	str.w	r3, [ip], #4
 8007c06:	d2db      	bcs.n	8007bc0 <quorem+0x42>
 8007c08:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c0c:	b92b      	cbnz	r3, 8007c1a <quorem+0x9c>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	429d      	cmp	r5, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	d32d      	bcc.n	8007c74 <quorem+0xf6>
 8007c18:	613c      	str	r4, [r7, #16]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f001 f992 	bl	8008f44 <__mcmp>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	db23      	blt.n	8007c6c <quorem+0xee>
 8007c24:	4629      	mov	r1, r5
 8007c26:	2000      	movs	r0, #0
 8007c28:	3601      	adds	r6, #1
 8007c2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c2e:	f8d1 c000 	ldr.w	ip, [r1]
 8007c32:	b293      	uxth	r3, r2
 8007c34:	1ac3      	subs	r3, r0, r3
 8007c36:	0c12      	lsrs	r2, r2, #16
 8007c38:	fa1f f08c 	uxth.w	r0, ip
 8007c3c:	4403      	add	r3, r0
 8007c3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c4c:	45c1      	cmp	r9, r8
 8007c4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c52:	f841 3b04 	str.w	r3, [r1], #4
 8007c56:	d2e8      	bcs.n	8007c2a <quorem+0xac>
 8007c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c60:	b922      	cbnz	r2, 8007c6c <quorem+0xee>
 8007c62:	3b04      	subs	r3, #4
 8007c64:	429d      	cmp	r5, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	d30a      	bcc.n	8007c80 <quorem+0x102>
 8007c6a:	613c      	str	r4, [r7, #16]
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	b003      	add	sp, #12
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d1cd      	bne.n	8007c18 <quorem+0x9a>
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	e7c8      	b.n	8007c12 <quorem+0x94>
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d1f0      	bne.n	8007c6a <quorem+0xec>
 8007c88:	3c01      	subs	r4, #1
 8007c8a:	e7eb      	b.n	8007c64 <quorem+0xe6>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e7ee      	b.n	8007c6e <quorem+0xf0>

08007c90 <_dtoa_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	4616      	mov	r6, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	69c4      	ldr	r4, [r0, #28]
 8007c9a:	b099      	sub	sp, #100	; 0x64
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ca2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007ca6:	b974      	cbnz	r4, 8007cc6 <_dtoa_r+0x36>
 8007ca8:	2010      	movs	r0, #16
 8007caa:	f000 fe1d 	bl	80088e8 <malloc>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	61e8      	str	r0, [r5, #28]
 8007cb2:	b920      	cbnz	r0, 8007cbe <_dtoa_r+0x2e>
 8007cb4:	21ef      	movs	r1, #239	; 0xef
 8007cb6:	4bac      	ldr	r3, [pc, #688]	; (8007f68 <_dtoa_r+0x2d8>)
 8007cb8:	48ac      	ldr	r0, [pc, #688]	; (8007f6c <_dtoa_r+0x2dc>)
 8007cba:	f001 fc7b 	bl	80095b4 <__assert_func>
 8007cbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cc2:	6004      	str	r4, [r0, #0]
 8007cc4:	60c4      	str	r4, [r0, #12]
 8007cc6:	69eb      	ldr	r3, [r5, #28]
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	b151      	cbz	r1, 8007ce2 <_dtoa_r+0x52>
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4093      	lsls	r3, r2
 8007cd2:	604a      	str	r2, [r1, #4]
 8007cd4:	608b      	str	r3, [r1, #8]
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 fefa 	bl	8008ad0 <_Bfree>
 8007cdc:	2200      	movs	r2, #0
 8007cde:	69eb      	ldr	r3, [r5, #28]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	1e3b      	subs	r3, r7, #0
 8007ce4:	bfaf      	iteee	ge
 8007ce6:	2300      	movge	r3, #0
 8007ce8:	2201      	movlt	r2, #1
 8007cea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cee:	9305      	strlt	r3, [sp, #20]
 8007cf0:	bfa8      	it	ge
 8007cf2:	f8c8 3000 	strge.w	r3, [r8]
 8007cf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007cfa:	4b9d      	ldr	r3, [pc, #628]	; (8007f70 <_dtoa_r+0x2e0>)
 8007cfc:	bfb8      	it	lt
 8007cfe:	f8c8 2000 	strlt.w	r2, [r8]
 8007d02:	ea33 0309 	bics.w	r3, r3, r9
 8007d06:	d119      	bne.n	8007d3c <_dtoa_r+0xac>
 8007d08:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d14:	4333      	orrs	r3, r6
 8007d16:	f000 8589 	beq.w	800882c <_dtoa_r+0xb9c>
 8007d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d1c:	b953      	cbnz	r3, 8007d34 <_dtoa_r+0xa4>
 8007d1e:	4b95      	ldr	r3, [pc, #596]	; (8007f74 <_dtoa_r+0x2e4>)
 8007d20:	e023      	b.n	8007d6a <_dtoa_r+0xda>
 8007d22:	4b95      	ldr	r3, [pc, #596]	; (8007f78 <_dtoa_r+0x2e8>)
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	3308      	adds	r3, #8
 8007d28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	9803      	ldr	r0, [sp, #12]
 8007d2e:	b019      	add	sp, #100	; 0x64
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	4b8f      	ldr	r3, [pc, #572]	; (8007f74 <_dtoa_r+0x2e4>)
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	3303      	adds	r3, #3
 8007d3a:	e7f5      	b.n	8007d28 <_dtoa_r+0x98>
 8007d3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f7f8 fe36 	bl	80009bc <__aeabi_dcmpeq>
 8007d50:	4680      	mov	r8, r0
 8007d52:	b160      	cbz	r0, 8007d6e <_dtoa_r+0xde>
 8007d54:	2301      	movs	r3, #1
 8007d56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 8562 	beq.w	8008826 <_dtoa_r+0xb96>
 8007d62:	4b86      	ldr	r3, [pc, #536]	; (8007f7c <_dtoa_r+0x2ec>)
 8007d64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	9303      	str	r3, [sp, #12]
 8007d6c:	e7de      	b.n	8007d2c <_dtoa_r+0x9c>
 8007d6e:	ab16      	add	r3, sp, #88	; 0x58
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	ab17      	add	r3, sp, #92	; 0x5c
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	4628      	mov	r0, r5
 8007d78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d7c:	f001 f98a 	bl	8009094 <__d2b>
 8007d80:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d84:	4682      	mov	sl, r0
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d07e      	beq.n	8007e88 <_dtoa_r+0x1f8>
 8007d8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007d9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007da0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007da4:	4619      	mov	r1, r3
 8007da6:	2200      	movs	r2, #0
 8007da8:	4b75      	ldr	r3, [pc, #468]	; (8007f80 <_dtoa_r+0x2f0>)
 8007daa:	f7f8 f9e7 	bl	800017c <__aeabi_dsub>
 8007dae:	a368      	add	r3, pc, #416	; (adr r3, 8007f50 <_dtoa_r+0x2c0>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fb9a 	bl	80004ec <__aeabi_dmul>
 8007db8:	a367      	add	r3, pc, #412	; (adr r3, 8007f58 <_dtoa_r+0x2c8>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 f9df 	bl	8000180 <__adddf3>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	f7f8 fb26 	bl	8000418 <__aeabi_i2d>
 8007dcc:	a364      	add	r3, pc, #400	; (adr r3, 8007f60 <_dtoa_r+0x2d0>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fb8b 	bl	80004ec <__aeabi_dmul>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7f8 f9cf 	bl	8000180 <__adddf3>
 8007de2:	4606      	mov	r6, r0
 8007de4:	460f      	mov	r7, r1
 8007de6:	f7f8 fe31 	bl	8000a4c <__aeabi_d2iz>
 8007dea:	2200      	movs	r2, #0
 8007dec:	4683      	mov	fp, r0
 8007dee:	2300      	movs	r3, #0
 8007df0:	4630      	mov	r0, r6
 8007df2:	4639      	mov	r1, r7
 8007df4:	f7f8 fdec 	bl	80009d0 <__aeabi_dcmplt>
 8007df8:	b148      	cbz	r0, 8007e0e <_dtoa_r+0x17e>
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f7f8 fb0c 	bl	8000418 <__aeabi_i2d>
 8007e00:	4632      	mov	r2, r6
 8007e02:	463b      	mov	r3, r7
 8007e04:	f7f8 fdda 	bl	80009bc <__aeabi_dcmpeq>
 8007e08:	b908      	cbnz	r0, 8007e0e <_dtoa_r+0x17e>
 8007e0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e0e:	f1bb 0f16 	cmp.w	fp, #22
 8007e12:	d857      	bhi.n	8007ec4 <_dtoa_r+0x234>
 8007e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e18:	4b5a      	ldr	r3, [pc, #360]	; (8007f84 <_dtoa_r+0x2f4>)
 8007e1a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 fdd5 	bl	80009d0 <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d04e      	beq.n	8007ec8 <_dtoa_r+0x238>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e34:	1b1b      	subs	r3, r3, r4
 8007e36:	1e5a      	subs	r2, r3, #1
 8007e38:	bf46      	itte	mi
 8007e3a:	f1c3 0901 	rsbmi	r9, r3, #1
 8007e3e:	2300      	movmi	r3, #0
 8007e40:	f04f 0900 	movpl.w	r9, #0
 8007e44:	9209      	str	r2, [sp, #36]	; 0x24
 8007e46:	bf48      	it	mi
 8007e48:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007e4a:	f1bb 0f00 	cmp.w	fp, #0
 8007e4e:	db3d      	blt.n	8007ecc <_dtoa_r+0x23c>
 8007e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e52:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007e56:	445b      	add	r3, fp
 8007e58:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d867      	bhi.n	8007f34 <_dtoa_r+0x2a4>
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	bfc4      	itt	gt
 8007e68:	3b04      	subgt	r3, #4
 8007e6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e6e:	bfc8      	it	gt
 8007e70:	2400      	movgt	r4, #0
 8007e72:	f1a3 0302 	sub.w	r3, r3, #2
 8007e76:	bfd8      	it	le
 8007e78:	2401      	movle	r4, #1
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	f200 8086 	bhi.w	8007f8c <_dtoa_r+0x2fc>
 8007e80:	e8df f003 	tbb	[pc, r3]
 8007e84:	5637392c 	.word	0x5637392c
 8007e88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e8c:	441c      	add	r4, r3
 8007e8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	bfc1      	itttt	gt
 8007e96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e9a:	fa09 f903 	lslgt.w	r9, r9, r3
 8007e9e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007ea2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ea6:	bfd6      	itet	le
 8007ea8:	f1c3 0320 	rsble	r3, r3, #32
 8007eac:	ea49 0003 	orrgt.w	r0, r9, r3
 8007eb0:	fa06 f003 	lslle.w	r0, r6, r3
 8007eb4:	f7f8 faa0 	bl	80003f8 <__aeabi_ui2d>
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ebe:	3c01      	subs	r4, #1
 8007ec0:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ec2:	e76f      	b.n	8007da4 <_dtoa_r+0x114>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e7b3      	b.n	8007e30 <_dtoa_r+0x1a0>
 8007ec8:	900f      	str	r0, [sp, #60]	; 0x3c
 8007eca:	e7b2      	b.n	8007e32 <_dtoa_r+0x1a2>
 8007ecc:	f1cb 0300 	rsb	r3, fp, #0
 8007ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	eba9 090b 	sub.w	r9, r9, fp
 8007ed8:	930e      	str	r3, [sp, #56]	; 0x38
 8007eda:	e7c0      	b.n	8007e5e <_dtoa_r+0x1ce>
 8007edc:	2300      	movs	r3, #0
 8007ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dc55      	bgt.n	8007f92 <_dtoa_r+0x302>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	461a      	mov	r2, r3
 8007eea:	9306      	str	r3, [sp, #24]
 8007eec:	9308      	str	r3, [sp, #32]
 8007eee:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ef0:	e00b      	b.n	8007f0a <_dtoa_r+0x27a>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e7f3      	b.n	8007ede <_dtoa_r+0x24e>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007efc:	445b      	add	r3, fp
 8007efe:	9306      	str	r3, [sp, #24]
 8007f00:	3301      	adds	r3, #1
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	9308      	str	r3, [sp, #32]
 8007f06:	bfb8      	it	lt
 8007f08:	2301      	movlt	r3, #1
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	69e8      	ldr	r0, [r5, #28]
 8007f10:	f102 0614 	add.w	r6, r2, #20
 8007f14:	429e      	cmp	r6, r3
 8007f16:	d940      	bls.n	8007f9a <_dtoa_r+0x30a>
 8007f18:	6041      	str	r1, [r0, #4]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 fd98 	bl	8008a50 <_Balloc>
 8007f20:	9003      	str	r0, [sp, #12]
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d13c      	bne.n	8007fa0 <_dtoa_r+0x310>
 8007f26:	4602      	mov	r2, r0
 8007f28:	f240 11af 	movw	r1, #431	; 0x1af
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <_dtoa_r+0x2f8>)
 8007f2e:	e6c3      	b.n	8007cb8 <_dtoa_r+0x28>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e7e1      	b.n	8007ef8 <_dtoa_r+0x268>
 8007f34:	2401      	movs	r4, #1
 8007f36:	2300      	movs	r3, #0
 8007f38:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f3a:	9322      	str	r3, [sp, #136]	; 0x88
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f40:	2200      	movs	r2, #0
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	9308      	str	r3, [sp, #32]
 8007f46:	2312      	movs	r3, #18
 8007f48:	e7d1      	b.n	8007eee <_dtoa_r+0x25e>
 8007f4a:	bf00      	nop
 8007f4c:	f3af 8000 	nop.w
 8007f50:	636f4361 	.word	0x636f4361
 8007f54:	3fd287a7 	.word	0x3fd287a7
 8007f58:	8b60c8b3 	.word	0x8b60c8b3
 8007f5c:	3fc68a28 	.word	0x3fc68a28
 8007f60:	509f79fb 	.word	0x509f79fb
 8007f64:	3fd34413 	.word	0x3fd34413
 8007f68:	0800ad02 	.word	0x0800ad02
 8007f6c:	0800ad19 	.word	0x0800ad19
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	0800acfe 	.word	0x0800acfe
 8007f78:	0800acf5 	.word	0x0800acf5
 8007f7c:	0800acd2 	.word	0x0800acd2
 8007f80:	3ff80000 	.word	0x3ff80000
 8007f84:	0800ae08 	.word	0x0800ae08
 8007f88:	0800ad71 	.word	0x0800ad71
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f90:	e7d4      	b.n	8007f3c <_dtoa_r+0x2ac>
 8007f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f94:	9306      	str	r3, [sp, #24]
 8007f96:	9308      	str	r3, [sp, #32]
 8007f98:	e7b7      	b.n	8007f0a <_dtoa_r+0x27a>
 8007f9a:	3101      	adds	r1, #1
 8007f9c:	0052      	lsls	r2, r2, #1
 8007f9e:	e7b7      	b.n	8007f10 <_dtoa_r+0x280>
 8007fa0:	69eb      	ldr	r3, [r5, #28]
 8007fa2:	9a03      	ldr	r2, [sp, #12]
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	2b0e      	cmp	r3, #14
 8007faa:	f200 80a8 	bhi.w	80080fe <_dtoa_r+0x46e>
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	f000 80a5 	beq.w	80080fe <_dtoa_r+0x46e>
 8007fb4:	f1bb 0f00 	cmp.w	fp, #0
 8007fb8:	dd34      	ble.n	8008024 <_dtoa_r+0x394>
 8007fba:	4b9a      	ldr	r3, [pc, #616]	; (8008224 <_dtoa_r+0x594>)
 8007fbc:	f00b 020f 	and.w	r2, fp, #15
 8007fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fcc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fd0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007fd4:	d016      	beq.n	8008004 <_dtoa_r+0x374>
 8007fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fda:	4b93      	ldr	r3, [pc, #588]	; (8008228 <_dtoa_r+0x598>)
 8007fdc:	2703      	movs	r7, #3
 8007fde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fe2:	f7f8 fbad 	bl	8000740 <__aeabi_ddiv>
 8007fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fea:	f004 040f 	and.w	r4, r4, #15
 8007fee:	4e8e      	ldr	r6, [pc, #568]	; (8008228 <_dtoa_r+0x598>)
 8007ff0:	b954      	cbnz	r4, 8008008 <_dtoa_r+0x378>
 8007ff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ffa:	f7f8 fba1 	bl	8000740 <__aeabi_ddiv>
 8007ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008002:	e029      	b.n	8008058 <_dtoa_r+0x3c8>
 8008004:	2702      	movs	r7, #2
 8008006:	e7f2      	b.n	8007fee <_dtoa_r+0x35e>
 8008008:	07e1      	lsls	r1, r4, #31
 800800a:	d508      	bpl.n	800801e <_dtoa_r+0x38e>
 800800c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008010:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008014:	f7f8 fa6a 	bl	80004ec <__aeabi_dmul>
 8008018:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800801c:	3701      	adds	r7, #1
 800801e:	1064      	asrs	r4, r4, #1
 8008020:	3608      	adds	r6, #8
 8008022:	e7e5      	b.n	8007ff0 <_dtoa_r+0x360>
 8008024:	f000 80a5 	beq.w	8008172 <_dtoa_r+0x4e2>
 8008028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800802c:	f1cb 0400 	rsb	r4, fp, #0
 8008030:	4b7c      	ldr	r3, [pc, #496]	; (8008224 <_dtoa_r+0x594>)
 8008032:	f004 020f 	and.w	r2, r4, #15
 8008036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fa55 	bl	80004ec <__aeabi_dmul>
 8008042:	2702      	movs	r7, #2
 8008044:	2300      	movs	r3, #0
 8008046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800804a:	4e77      	ldr	r6, [pc, #476]	; (8008228 <_dtoa_r+0x598>)
 800804c:	1124      	asrs	r4, r4, #4
 800804e:	2c00      	cmp	r4, #0
 8008050:	f040 8084 	bne.w	800815c <_dtoa_r+0x4cc>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1d2      	bne.n	8007ffe <_dtoa_r+0x36e>
 8008058:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800805c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8087 	beq.w	8008176 <_dtoa_r+0x4e6>
 8008068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800806c:	2200      	movs	r2, #0
 800806e:	4b6f      	ldr	r3, [pc, #444]	; (800822c <_dtoa_r+0x59c>)
 8008070:	f7f8 fcae 	bl	80009d0 <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d07e      	beq.n	8008176 <_dtoa_r+0x4e6>
 8008078:	9b08      	ldr	r3, [sp, #32]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d07b      	beq.n	8008176 <_dtoa_r+0x4e6>
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dd38      	ble.n	80080f6 <_dtoa_r+0x466>
 8008084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008088:	2200      	movs	r2, #0
 800808a:	4b69      	ldr	r3, [pc, #420]	; (8008230 <_dtoa_r+0x5a0>)
 800808c:	f7f8 fa2e 	bl	80004ec <__aeabi_dmul>
 8008090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008094:	9c06      	ldr	r4, [sp, #24]
 8008096:	f10b 38ff 	add.w	r8, fp, #4294967295
 800809a:	3701      	adds	r7, #1
 800809c:	4638      	mov	r0, r7
 800809e:	f7f8 f9bb 	bl	8000418 <__aeabi_i2d>
 80080a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a6:	f7f8 fa21 	bl	80004ec <__aeabi_dmul>
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b61      	ldr	r3, [pc, #388]	; (8008234 <_dtoa_r+0x5a4>)
 80080ae:	f7f8 f867 	bl	8000180 <__adddf3>
 80080b2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80080b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080ba:	9611      	str	r6, [sp, #68]	; 0x44
 80080bc:	2c00      	cmp	r4, #0
 80080be:	d15d      	bne.n	800817c <_dtoa_r+0x4ec>
 80080c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080c4:	2200      	movs	r2, #0
 80080c6:	4b5c      	ldr	r3, [pc, #368]	; (8008238 <_dtoa_r+0x5a8>)
 80080c8:	f7f8 f858 	bl	800017c <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080d4:	4633      	mov	r3, r6
 80080d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080d8:	f7f8 fc98 	bl	8000a0c <__aeabi_dcmpgt>
 80080dc:	2800      	cmp	r0, #0
 80080de:	f040 8295 	bne.w	800860c <_dtoa_r+0x97c>
 80080e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80080ec:	f7f8 fc70 	bl	80009d0 <__aeabi_dcmplt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f040 8289 	bne.w	8008608 <_dtoa_r+0x978>
 80080f6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80080fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008100:	2b00      	cmp	r3, #0
 8008102:	f2c0 8151 	blt.w	80083a8 <_dtoa_r+0x718>
 8008106:	f1bb 0f0e 	cmp.w	fp, #14
 800810a:	f300 814d 	bgt.w	80083a8 <_dtoa_r+0x718>
 800810e:	4b45      	ldr	r3, [pc, #276]	; (8008224 <_dtoa_r+0x594>)
 8008110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008114:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008118:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800811c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800811e:	2b00      	cmp	r3, #0
 8008120:	f280 80da 	bge.w	80082d8 <_dtoa_r+0x648>
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	2b00      	cmp	r3, #0
 8008128:	f300 80d6 	bgt.w	80082d8 <_dtoa_r+0x648>
 800812c:	f040 826b 	bne.w	8008606 <_dtoa_r+0x976>
 8008130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008134:	2200      	movs	r2, #0
 8008136:	4b40      	ldr	r3, [pc, #256]	; (8008238 <_dtoa_r+0x5a8>)
 8008138:	f7f8 f9d8 	bl	80004ec <__aeabi_dmul>
 800813c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008140:	f7f8 fc5a 	bl	80009f8 <__aeabi_dcmpge>
 8008144:	9c08      	ldr	r4, [sp, #32]
 8008146:	4626      	mov	r6, r4
 8008148:	2800      	cmp	r0, #0
 800814a:	f040 8241 	bne.w	80085d0 <_dtoa_r+0x940>
 800814e:	2331      	movs	r3, #49	; 0x31
 8008150:	9f03      	ldr	r7, [sp, #12]
 8008152:	f10b 0b01 	add.w	fp, fp, #1
 8008156:	f807 3b01 	strb.w	r3, [r7], #1
 800815a:	e23d      	b.n	80085d8 <_dtoa_r+0x948>
 800815c:	07e2      	lsls	r2, r4, #31
 800815e:	d505      	bpl.n	800816c <_dtoa_r+0x4dc>
 8008160:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008164:	f7f8 f9c2 	bl	80004ec <__aeabi_dmul>
 8008168:	2301      	movs	r3, #1
 800816a:	3701      	adds	r7, #1
 800816c:	1064      	asrs	r4, r4, #1
 800816e:	3608      	adds	r6, #8
 8008170:	e76d      	b.n	800804e <_dtoa_r+0x3be>
 8008172:	2702      	movs	r7, #2
 8008174:	e770      	b.n	8008058 <_dtoa_r+0x3c8>
 8008176:	46d8      	mov	r8, fp
 8008178:	9c08      	ldr	r4, [sp, #32]
 800817a:	e78f      	b.n	800809c <_dtoa_r+0x40c>
 800817c:	9903      	ldr	r1, [sp, #12]
 800817e:	4b29      	ldr	r3, [pc, #164]	; (8008224 <_dtoa_r+0x594>)
 8008180:	4421      	add	r1, r4
 8008182:	9112      	str	r1, [sp, #72]	; 0x48
 8008184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008186:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800818a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800818e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008192:	2900      	cmp	r1, #0
 8008194:	d054      	beq.n	8008240 <_dtoa_r+0x5b0>
 8008196:	2000      	movs	r0, #0
 8008198:	4928      	ldr	r1, [pc, #160]	; (800823c <_dtoa_r+0x5ac>)
 800819a:	f7f8 fad1 	bl	8000740 <__aeabi_ddiv>
 800819e:	463b      	mov	r3, r7
 80081a0:	4632      	mov	r2, r6
 80081a2:	f7f7 ffeb 	bl	800017c <__aeabi_dsub>
 80081a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081aa:	9f03      	ldr	r7, [sp, #12]
 80081ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b0:	f7f8 fc4c 	bl	8000a4c <__aeabi_d2iz>
 80081b4:	4604      	mov	r4, r0
 80081b6:	f7f8 f92f 	bl	8000418 <__aeabi_i2d>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c2:	f7f7 ffdb 	bl	800017c <__aeabi_dsub>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	3430      	adds	r4, #48	; 0x30
 80081cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081d4:	f807 4b01 	strb.w	r4, [r7], #1
 80081d8:	f7f8 fbfa 	bl	80009d0 <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d173      	bne.n	80082c8 <_dtoa_r+0x638>
 80081e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e4:	2000      	movs	r0, #0
 80081e6:	4911      	ldr	r1, [pc, #68]	; (800822c <_dtoa_r+0x59c>)
 80081e8:	f7f7 ffc8 	bl	800017c <__aeabi_dsub>
 80081ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081f0:	f7f8 fbee 	bl	80009d0 <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f040 80b6 	bne.w	8008366 <_dtoa_r+0x6d6>
 80081fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081fc:	429f      	cmp	r7, r3
 80081fe:	f43f af7a 	beq.w	80080f6 <_dtoa_r+0x466>
 8008202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008206:	2200      	movs	r2, #0
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <_dtoa_r+0x5a0>)
 800820a:	f7f8 f96f 	bl	80004ec <__aeabi_dmul>
 800820e:	2200      	movs	r2, #0
 8008210:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <_dtoa_r+0x5a0>)
 800821a:	f7f8 f967 	bl	80004ec <__aeabi_dmul>
 800821e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008222:	e7c3      	b.n	80081ac <_dtoa_r+0x51c>
 8008224:	0800ae08 	.word	0x0800ae08
 8008228:	0800ade0 	.word	0x0800ade0
 800822c:	3ff00000 	.word	0x3ff00000
 8008230:	40240000 	.word	0x40240000
 8008234:	401c0000 	.word	0x401c0000
 8008238:	40140000 	.word	0x40140000
 800823c:	3fe00000 	.word	0x3fe00000
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 f952 	bl	80004ec <__aeabi_dmul>
 8008248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800824a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800824e:	9c03      	ldr	r4, [sp, #12]
 8008250:	9314      	str	r3, [sp, #80]	; 0x50
 8008252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008256:	f7f8 fbf9 	bl	8000a4c <__aeabi_d2iz>
 800825a:	9015      	str	r0, [sp, #84]	; 0x54
 800825c:	f7f8 f8dc 	bl	8000418 <__aeabi_i2d>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008268:	f7f7 ff88 	bl	800017c <__aeabi_dsub>
 800826c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800826e:	4606      	mov	r6, r0
 8008270:	3330      	adds	r3, #48	; 0x30
 8008272:	f804 3b01 	strb.w	r3, [r4], #1
 8008276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008278:	460f      	mov	r7, r1
 800827a:	429c      	cmp	r4, r3
 800827c:	f04f 0200 	mov.w	r2, #0
 8008280:	d124      	bne.n	80082cc <_dtoa_r+0x63c>
 8008282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008286:	4baf      	ldr	r3, [pc, #700]	; (8008544 <_dtoa_r+0x8b4>)
 8008288:	f7f7 ff7a 	bl	8000180 <__adddf3>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fbba 	bl	8000a0c <__aeabi_dcmpgt>
 8008298:	2800      	cmp	r0, #0
 800829a:	d163      	bne.n	8008364 <_dtoa_r+0x6d4>
 800829c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082a0:	2000      	movs	r0, #0
 80082a2:	49a8      	ldr	r1, [pc, #672]	; (8008544 <_dtoa_r+0x8b4>)
 80082a4:	f7f7 ff6a 	bl	800017c <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 fb8e 	bl	80009d0 <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f43f af1e 	beq.w	80080f6 <_dtoa_r+0x466>
 80082ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80082bc:	1e7b      	subs	r3, r7, #1
 80082be:	9314      	str	r3, [sp, #80]	; 0x50
 80082c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80082c4:	2b30      	cmp	r3, #48	; 0x30
 80082c6:	d0f8      	beq.n	80082ba <_dtoa_r+0x62a>
 80082c8:	46c3      	mov	fp, r8
 80082ca:	e03b      	b.n	8008344 <_dtoa_r+0x6b4>
 80082cc:	4b9e      	ldr	r3, [pc, #632]	; (8008548 <_dtoa_r+0x8b8>)
 80082ce:	f7f8 f90d 	bl	80004ec <__aeabi_dmul>
 80082d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d6:	e7bc      	b.n	8008252 <_dtoa_r+0x5c2>
 80082d8:	9f03      	ldr	r7, [sp, #12]
 80082da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80082de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f8 fa2b 	bl	8000740 <__aeabi_ddiv>
 80082ea:	f7f8 fbaf 	bl	8000a4c <__aeabi_d2iz>
 80082ee:	4604      	mov	r4, r0
 80082f0:	f7f8 f892 	bl	8000418 <__aeabi_i2d>
 80082f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082f8:	f7f8 f8f8 	bl	80004ec <__aeabi_dmul>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f7 ff3a 	bl	800017c <__aeabi_dsub>
 8008308:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800830c:	f807 6b01 	strb.w	r6, [r7], #1
 8008310:	9e03      	ldr	r6, [sp, #12]
 8008312:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008316:	1bbe      	subs	r6, r7, r6
 8008318:	45b4      	cmp	ip, r6
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	d136      	bne.n	800838e <_dtoa_r+0x6fe>
 8008320:	f7f7 ff2e 	bl	8000180 <__adddf3>
 8008324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008328:	4680      	mov	r8, r0
 800832a:	4689      	mov	r9, r1
 800832c:	f7f8 fb6e 	bl	8000a0c <__aeabi_dcmpgt>
 8008330:	bb58      	cbnz	r0, 800838a <_dtoa_r+0x6fa>
 8008332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	f7f8 fb3f 	bl	80009bc <__aeabi_dcmpeq>
 800833e:	b108      	cbz	r0, 8008344 <_dtoa_r+0x6b4>
 8008340:	07e3      	lsls	r3, r4, #31
 8008342:	d422      	bmi.n	800838a <_dtoa_r+0x6fa>
 8008344:	4651      	mov	r1, sl
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fbc2 	bl	8008ad0 <_Bfree>
 800834c:	2300      	movs	r3, #0
 800834e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008350:	703b      	strb	r3, [r7, #0]
 8008352:	f10b 0301 	add.w	r3, fp, #1
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800835a:	2b00      	cmp	r3, #0
 800835c:	f43f ace6 	beq.w	8007d2c <_dtoa_r+0x9c>
 8008360:	601f      	str	r7, [r3, #0]
 8008362:	e4e3      	b.n	8007d2c <_dtoa_r+0x9c>
 8008364:	4627      	mov	r7, r4
 8008366:	463b      	mov	r3, r7
 8008368:	461f      	mov	r7, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a39      	cmp	r2, #57	; 0x39
 8008370:	d107      	bne.n	8008382 <_dtoa_r+0x6f2>
 8008372:	9a03      	ldr	r2, [sp, #12]
 8008374:	429a      	cmp	r2, r3
 8008376:	d1f7      	bne.n	8008368 <_dtoa_r+0x6d8>
 8008378:	2230      	movs	r2, #48	; 0x30
 800837a:	9903      	ldr	r1, [sp, #12]
 800837c:	f108 0801 	add.w	r8, r8, #1
 8008380:	700a      	strb	r2, [r1, #0]
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	3201      	adds	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e79e      	b.n	80082c8 <_dtoa_r+0x638>
 800838a:	46d8      	mov	r8, fp
 800838c:	e7eb      	b.n	8008366 <_dtoa_r+0x6d6>
 800838e:	2200      	movs	r2, #0
 8008390:	4b6d      	ldr	r3, [pc, #436]	; (8008548 <_dtoa_r+0x8b8>)
 8008392:	f7f8 f8ab 	bl	80004ec <__aeabi_dmul>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	4680      	mov	r8, r0
 800839c:	4689      	mov	r9, r1
 800839e:	f7f8 fb0d 	bl	80009bc <__aeabi_dcmpeq>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d09b      	beq.n	80082de <_dtoa_r+0x64e>
 80083a6:	e7cd      	b.n	8008344 <_dtoa_r+0x6b4>
 80083a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 80c4 	beq.w	8008538 <_dtoa_r+0x8a8>
 80083b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083b2:	2a01      	cmp	r2, #1
 80083b4:	f300 80a8 	bgt.w	8008508 <_dtoa_r+0x878>
 80083b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80a0 	beq.w	8008500 <_dtoa_r+0x870>
 80083c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083c4:	464f      	mov	r7, r9
 80083c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ca:	2101      	movs	r1, #1
 80083cc:	441a      	add	r2, r3
 80083ce:	4628      	mov	r0, r5
 80083d0:	4499      	add	r9, r3
 80083d2:	9209      	str	r2, [sp, #36]	; 0x24
 80083d4:	f000 fc32 	bl	8008c3c <__i2b>
 80083d8:	4606      	mov	r6, r0
 80083da:	b15f      	cbz	r7, 80083f4 <_dtoa_r+0x764>
 80083dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd08      	ble.n	80083f4 <_dtoa_r+0x764>
 80083e2:	42bb      	cmp	r3, r7
 80083e4:	bfa8      	it	ge
 80083e6:	463b      	movge	r3, r7
 80083e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ea:	eba9 0903 	sub.w	r9, r9, r3
 80083ee:	1aff      	subs	r7, r7, r3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9309      	str	r3, [sp, #36]	; 0x24
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	b1f3      	cbz	r3, 8008436 <_dtoa_r+0x7a6>
 80083f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80a0 	beq.w	8008540 <_dtoa_r+0x8b0>
 8008400:	2c00      	cmp	r4, #0
 8008402:	dd10      	ble.n	8008426 <_dtoa_r+0x796>
 8008404:	4631      	mov	r1, r6
 8008406:	4622      	mov	r2, r4
 8008408:	4628      	mov	r0, r5
 800840a:	f000 fcd5 	bl	8008db8 <__pow5mult>
 800840e:	4652      	mov	r2, sl
 8008410:	4601      	mov	r1, r0
 8008412:	4606      	mov	r6, r0
 8008414:	4628      	mov	r0, r5
 8008416:	f000 fc27 	bl	8008c68 <__multiply>
 800841a:	4680      	mov	r8, r0
 800841c:	4651      	mov	r1, sl
 800841e:	4628      	mov	r0, r5
 8008420:	f000 fb56 	bl	8008ad0 <_Bfree>
 8008424:	46c2      	mov	sl, r8
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	1b1a      	subs	r2, r3, r4
 800842a:	d004      	beq.n	8008436 <_dtoa_r+0x7a6>
 800842c:	4651      	mov	r1, sl
 800842e:	4628      	mov	r0, r5
 8008430:	f000 fcc2 	bl	8008db8 <__pow5mult>
 8008434:	4682      	mov	sl, r0
 8008436:	2101      	movs	r1, #1
 8008438:	4628      	mov	r0, r5
 800843a:	f000 fbff 	bl	8008c3c <__i2b>
 800843e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008440:	4604      	mov	r4, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	f340 8082 	ble.w	800854c <_dtoa_r+0x8bc>
 8008448:	461a      	mov	r2, r3
 800844a:	4601      	mov	r1, r0
 800844c:	4628      	mov	r0, r5
 800844e:	f000 fcb3 	bl	8008db8 <__pow5mult>
 8008452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008454:	4604      	mov	r4, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	dd7b      	ble.n	8008552 <_dtoa_r+0x8c2>
 800845a:	f04f 0800 	mov.w	r8, #0
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008464:	6918      	ldr	r0, [r3, #16]
 8008466:	f000 fb9b 	bl	8008ba0 <__hi0bits>
 800846a:	f1c0 0020 	rsb	r0, r0, #32
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	4418      	add	r0, r3
 8008472:	f010 001f 	ands.w	r0, r0, #31
 8008476:	f000 8092 	beq.w	800859e <_dtoa_r+0x90e>
 800847a:	f1c0 0320 	rsb	r3, r0, #32
 800847e:	2b04      	cmp	r3, #4
 8008480:	f340 8085 	ble.w	800858e <_dtoa_r+0x8fe>
 8008484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008486:	f1c0 001c 	rsb	r0, r0, #28
 800848a:	4403      	add	r3, r0
 800848c:	4481      	add	r9, r0
 800848e:	4407      	add	r7, r0
 8008490:	9309      	str	r3, [sp, #36]	; 0x24
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	dd05      	ble.n	80084a4 <_dtoa_r+0x814>
 8008498:	4651      	mov	r1, sl
 800849a:	464a      	mov	r2, r9
 800849c:	4628      	mov	r0, r5
 800849e:	f000 fce5 	bl	8008e6c <__lshift>
 80084a2:	4682      	mov	sl, r0
 80084a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	dd05      	ble.n	80084b6 <_dtoa_r+0x826>
 80084aa:	4621      	mov	r1, r4
 80084ac:	461a      	mov	r2, r3
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fcdc 	bl	8008e6c <__lshift>
 80084b4:	4604      	mov	r4, r0
 80084b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d072      	beq.n	80085a2 <_dtoa_r+0x912>
 80084bc:	4621      	mov	r1, r4
 80084be:	4650      	mov	r0, sl
 80084c0:	f000 fd40 	bl	8008f44 <__mcmp>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	da6c      	bge.n	80085a2 <_dtoa_r+0x912>
 80084c8:	2300      	movs	r3, #0
 80084ca:	4651      	mov	r1, sl
 80084cc:	220a      	movs	r2, #10
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 fb20 	bl	8008b14 <__multadd>
 80084d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d6:	4682      	mov	sl, r0
 80084d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 81ac 	beq.w	800883a <_dtoa_r+0xbaa>
 80084e2:	2300      	movs	r3, #0
 80084e4:	4631      	mov	r1, r6
 80084e6:	220a      	movs	r2, #10
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 fb13 	bl	8008b14 <__multadd>
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	4606      	mov	r6, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f300 8093 	bgt.w	800861e <_dtoa_r+0x98e>
 80084f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	dc59      	bgt.n	80085b2 <_dtoa_r+0x922>
 80084fe:	e08e      	b.n	800861e <_dtoa_r+0x98e>
 8008500:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008502:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008506:	e75d      	b.n	80083c4 <_dtoa_r+0x734>
 8008508:	9b08      	ldr	r3, [sp, #32]
 800850a:	1e5c      	subs	r4, r3, #1
 800850c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800850e:	42a3      	cmp	r3, r4
 8008510:	bfbf      	itttt	lt
 8008512:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008514:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008516:	1ae3      	sublt	r3, r4, r3
 8008518:	18d2      	addlt	r2, r2, r3
 800851a:	bfa8      	it	ge
 800851c:	1b1c      	subge	r4, r3, r4
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	bfbe      	ittt	lt
 8008522:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008524:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008526:	2400      	movlt	r4, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfb5      	itete	lt
 800852c:	eba9 0703 	sublt.w	r7, r9, r3
 8008530:	464f      	movge	r7, r9
 8008532:	2300      	movlt	r3, #0
 8008534:	9b08      	ldrge	r3, [sp, #32]
 8008536:	e747      	b.n	80083c8 <_dtoa_r+0x738>
 8008538:	464f      	mov	r7, r9
 800853a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800853c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800853e:	e74c      	b.n	80083da <_dtoa_r+0x74a>
 8008540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008542:	e773      	b.n	800842c <_dtoa_r+0x79c>
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	40240000 	.word	0x40240000
 800854c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800854e:	2b01      	cmp	r3, #1
 8008550:	dc18      	bgt.n	8008584 <_dtoa_r+0x8f4>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	b9b3      	cbnz	r3, 8008584 <_dtoa_r+0x8f4>
 8008556:	9b05      	ldr	r3, [sp, #20]
 8008558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800855c:	b993      	cbnz	r3, 8008584 <_dtoa_r+0x8f4>
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008564:	0d1b      	lsrs	r3, r3, #20
 8008566:	051b      	lsls	r3, r3, #20
 8008568:	b17b      	cbz	r3, 800858a <_dtoa_r+0x8fa>
 800856a:	f04f 0801 	mov.w	r8, #1
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	f109 0901 	add.w	r9, r9, #1
 8008574:	3301      	adds	r3, #1
 8008576:	9309      	str	r3, [sp, #36]	; 0x24
 8008578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857a:	2b00      	cmp	r3, #0
 800857c:	f47f af6f 	bne.w	800845e <_dtoa_r+0x7ce>
 8008580:	2001      	movs	r0, #1
 8008582:	e774      	b.n	800846e <_dtoa_r+0x7de>
 8008584:	f04f 0800 	mov.w	r8, #0
 8008588:	e7f6      	b.n	8008578 <_dtoa_r+0x8e8>
 800858a:	4698      	mov	r8, r3
 800858c:	e7f4      	b.n	8008578 <_dtoa_r+0x8e8>
 800858e:	d080      	beq.n	8008492 <_dtoa_r+0x802>
 8008590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008592:	331c      	adds	r3, #28
 8008594:	441a      	add	r2, r3
 8008596:	4499      	add	r9, r3
 8008598:	441f      	add	r7, r3
 800859a:	9209      	str	r2, [sp, #36]	; 0x24
 800859c:	e779      	b.n	8008492 <_dtoa_r+0x802>
 800859e:	4603      	mov	r3, r0
 80085a0:	e7f6      	b.n	8008590 <_dtoa_r+0x900>
 80085a2:	9b08      	ldr	r3, [sp, #32]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc34      	bgt.n	8008612 <_dtoa_r+0x982>
 80085a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	dd31      	ble.n	8008612 <_dtoa_r+0x982>
 80085ae:	9b08      	ldr	r3, [sp, #32]
 80085b0:	9306      	str	r3, [sp, #24]
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	b963      	cbnz	r3, 80085d0 <_dtoa_r+0x940>
 80085b6:	4621      	mov	r1, r4
 80085b8:	2205      	movs	r2, #5
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 faaa 	bl	8008b14 <__multadd>
 80085c0:	4601      	mov	r1, r0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4650      	mov	r0, sl
 80085c6:	f000 fcbd 	bl	8008f44 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f73f adbf 	bgt.w	800814e <_dtoa_r+0x4be>
 80085d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085d2:	9f03      	ldr	r7, [sp, #12]
 80085d4:	ea6f 0b03 	mvn.w	fp, r3
 80085d8:	f04f 0800 	mov.w	r8, #0
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f000 fa76 	bl	8008ad0 <_Bfree>
 80085e4:	2e00      	cmp	r6, #0
 80085e6:	f43f aead 	beq.w	8008344 <_dtoa_r+0x6b4>
 80085ea:	f1b8 0f00 	cmp.w	r8, #0
 80085ee:	d005      	beq.n	80085fc <_dtoa_r+0x96c>
 80085f0:	45b0      	cmp	r8, r6
 80085f2:	d003      	beq.n	80085fc <_dtoa_r+0x96c>
 80085f4:	4641      	mov	r1, r8
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fa6a 	bl	8008ad0 <_Bfree>
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 fa66 	bl	8008ad0 <_Bfree>
 8008604:	e69e      	b.n	8008344 <_dtoa_r+0x6b4>
 8008606:	2400      	movs	r4, #0
 8008608:	4626      	mov	r6, r4
 800860a:	e7e1      	b.n	80085d0 <_dtoa_r+0x940>
 800860c:	46c3      	mov	fp, r8
 800860e:	4626      	mov	r6, r4
 8008610:	e59d      	b.n	800814e <_dtoa_r+0x4be>
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80c8 	beq.w	80087aa <_dtoa_r+0xb1a>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	9306      	str	r3, [sp, #24]
 800861e:	2f00      	cmp	r7, #0
 8008620:	dd05      	ble.n	800862e <_dtoa_r+0x99e>
 8008622:	4631      	mov	r1, r6
 8008624:	463a      	mov	r2, r7
 8008626:	4628      	mov	r0, r5
 8008628:	f000 fc20 	bl	8008e6c <__lshift>
 800862c:	4606      	mov	r6, r0
 800862e:	f1b8 0f00 	cmp.w	r8, #0
 8008632:	d05b      	beq.n	80086ec <_dtoa_r+0xa5c>
 8008634:	4628      	mov	r0, r5
 8008636:	6871      	ldr	r1, [r6, #4]
 8008638:	f000 fa0a 	bl	8008a50 <_Balloc>
 800863c:	4607      	mov	r7, r0
 800863e:	b928      	cbnz	r0, 800864c <_dtoa_r+0x9bc>
 8008640:	4602      	mov	r2, r0
 8008642:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008646:	4b81      	ldr	r3, [pc, #516]	; (800884c <_dtoa_r+0xbbc>)
 8008648:	f7ff bb36 	b.w	8007cb8 <_dtoa_r+0x28>
 800864c:	6932      	ldr	r2, [r6, #16]
 800864e:	f106 010c 	add.w	r1, r6, #12
 8008652:	3202      	adds	r2, #2
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	300c      	adds	r0, #12
 8008658:	f000 ff9e 	bl	8009598 <memcpy>
 800865c:	2201      	movs	r2, #1
 800865e:	4639      	mov	r1, r7
 8008660:	4628      	mov	r0, r5
 8008662:	f000 fc03 	bl	8008e6c <__lshift>
 8008666:	46b0      	mov	r8, r6
 8008668:	4606      	mov	r6, r0
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	9a03      	ldr	r2, [sp, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	9308      	str	r3, [sp, #32]
 8008672:	9b06      	ldr	r3, [sp, #24]
 8008674:	4413      	add	r3, r2
 8008676:	930b      	str	r3, [sp, #44]	; 0x2c
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	930a      	str	r3, [sp, #40]	; 0x28
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	4621      	mov	r1, r4
 8008684:	3b01      	subs	r3, #1
 8008686:	4650      	mov	r0, sl
 8008688:	9304      	str	r3, [sp, #16]
 800868a:	f7ff fa78 	bl	8007b7e <quorem>
 800868e:	4641      	mov	r1, r8
 8008690:	9006      	str	r0, [sp, #24]
 8008692:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008696:	4650      	mov	r0, sl
 8008698:	f000 fc54 	bl	8008f44 <__mcmp>
 800869c:	4632      	mov	r2, r6
 800869e:	9009      	str	r0, [sp, #36]	; 0x24
 80086a0:	4621      	mov	r1, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 fc6a 	bl	8008f7c <__mdiff>
 80086a8:	68c2      	ldr	r2, [r0, #12]
 80086aa:	4607      	mov	r7, r0
 80086ac:	bb02      	cbnz	r2, 80086f0 <_dtoa_r+0xa60>
 80086ae:	4601      	mov	r1, r0
 80086b0:	4650      	mov	r0, sl
 80086b2:	f000 fc47 	bl	8008f44 <__mcmp>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4639      	mov	r1, r7
 80086ba:	4628      	mov	r0, r5
 80086bc:	920c      	str	r2, [sp, #48]	; 0x30
 80086be:	f000 fa07 	bl	8008ad0 <_Bfree>
 80086c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086c6:	9f08      	ldr	r7, [sp, #32]
 80086c8:	ea43 0102 	orr.w	r1, r3, r2
 80086cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ce:	4319      	orrs	r1, r3
 80086d0:	d110      	bne.n	80086f4 <_dtoa_r+0xa64>
 80086d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086d6:	d029      	beq.n	800872c <_dtoa_r+0xa9c>
 80086d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd02      	ble.n	80086e4 <_dtoa_r+0xa54>
 80086de:	9b06      	ldr	r3, [sp, #24]
 80086e0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	f883 9000 	strb.w	r9, [r3]
 80086ea:	e777      	b.n	80085dc <_dtoa_r+0x94c>
 80086ec:	4630      	mov	r0, r6
 80086ee:	e7ba      	b.n	8008666 <_dtoa_r+0x9d6>
 80086f0:	2201      	movs	r2, #1
 80086f2:	e7e1      	b.n	80086b8 <_dtoa_r+0xa28>
 80086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	db04      	blt.n	8008704 <_dtoa_r+0xa74>
 80086fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80086fc:	430b      	orrs	r3, r1
 80086fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008700:	430b      	orrs	r3, r1
 8008702:	d120      	bne.n	8008746 <_dtoa_r+0xab6>
 8008704:	2a00      	cmp	r2, #0
 8008706:	dded      	ble.n	80086e4 <_dtoa_r+0xa54>
 8008708:	4651      	mov	r1, sl
 800870a:	2201      	movs	r2, #1
 800870c:	4628      	mov	r0, r5
 800870e:	f000 fbad 	bl	8008e6c <__lshift>
 8008712:	4621      	mov	r1, r4
 8008714:	4682      	mov	sl, r0
 8008716:	f000 fc15 	bl	8008f44 <__mcmp>
 800871a:	2800      	cmp	r0, #0
 800871c:	dc03      	bgt.n	8008726 <_dtoa_r+0xa96>
 800871e:	d1e1      	bne.n	80086e4 <_dtoa_r+0xa54>
 8008720:	f019 0f01 	tst.w	r9, #1
 8008724:	d0de      	beq.n	80086e4 <_dtoa_r+0xa54>
 8008726:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800872a:	d1d8      	bne.n	80086de <_dtoa_r+0xa4e>
 800872c:	2339      	movs	r3, #57	; 0x39
 800872e:	9a04      	ldr	r2, [sp, #16]
 8008730:	7013      	strb	r3, [r2, #0]
 8008732:	463b      	mov	r3, r7
 8008734:	461f      	mov	r7, r3
 8008736:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800873a:	3b01      	subs	r3, #1
 800873c:	2a39      	cmp	r2, #57	; 0x39
 800873e:	d06b      	beq.n	8008818 <_dtoa_r+0xb88>
 8008740:	3201      	adds	r2, #1
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e74a      	b.n	80085dc <_dtoa_r+0x94c>
 8008746:	2a00      	cmp	r2, #0
 8008748:	dd07      	ble.n	800875a <_dtoa_r+0xaca>
 800874a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800874e:	d0ed      	beq.n	800872c <_dtoa_r+0xa9c>
 8008750:	9a04      	ldr	r2, [sp, #16]
 8008752:	f109 0301 	add.w	r3, r9, #1
 8008756:	7013      	strb	r3, [r2, #0]
 8008758:	e740      	b.n	80085dc <_dtoa_r+0x94c>
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800875e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008762:	4293      	cmp	r3, r2
 8008764:	d042      	beq.n	80087ec <_dtoa_r+0xb5c>
 8008766:	4651      	mov	r1, sl
 8008768:	2300      	movs	r3, #0
 800876a:	220a      	movs	r2, #10
 800876c:	4628      	mov	r0, r5
 800876e:	f000 f9d1 	bl	8008b14 <__multadd>
 8008772:	45b0      	cmp	r8, r6
 8008774:	4682      	mov	sl, r0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	f04f 020a 	mov.w	r2, #10
 800877e:	4641      	mov	r1, r8
 8008780:	4628      	mov	r0, r5
 8008782:	d107      	bne.n	8008794 <_dtoa_r+0xb04>
 8008784:	f000 f9c6 	bl	8008b14 <__multadd>
 8008788:	4680      	mov	r8, r0
 800878a:	4606      	mov	r6, r0
 800878c:	9b08      	ldr	r3, [sp, #32]
 800878e:	3301      	adds	r3, #1
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	e775      	b.n	8008680 <_dtoa_r+0x9f0>
 8008794:	f000 f9be 	bl	8008b14 <__multadd>
 8008798:	4631      	mov	r1, r6
 800879a:	4680      	mov	r8, r0
 800879c:	2300      	movs	r3, #0
 800879e:	220a      	movs	r2, #10
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 f9b7 	bl	8008b14 <__multadd>
 80087a6:	4606      	mov	r6, r0
 80087a8:	e7f0      	b.n	800878c <_dtoa_r+0xafc>
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	9306      	str	r3, [sp, #24]
 80087ae:	9f03      	ldr	r7, [sp, #12]
 80087b0:	4621      	mov	r1, r4
 80087b2:	4650      	mov	r0, sl
 80087b4:	f7ff f9e3 	bl	8007b7e <quorem>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087be:	f807 9b01 	strb.w	r9, [r7], #1
 80087c2:	1afa      	subs	r2, r7, r3
 80087c4:	9b06      	ldr	r3, [sp, #24]
 80087c6:	4293      	cmp	r3, r2
 80087c8:	dd07      	ble.n	80087da <_dtoa_r+0xb4a>
 80087ca:	4651      	mov	r1, sl
 80087cc:	2300      	movs	r3, #0
 80087ce:	220a      	movs	r2, #10
 80087d0:	4628      	mov	r0, r5
 80087d2:	f000 f99f 	bl	8008b14 <__multadd>
 80087d6:	4682      	mov	sl, r0
 80087d8:	e7ea      	b.n	80087b0 <_dtoa_r+0xb20>
 80087da:	9b06      	ldr	r3, [sp, #24]
 80087dc:	f04f 0800 	mov.w	r8, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfcc      	ite	gt
 80087e4:	461f      	movgt	r7, r3
 80087e6:	2701      	movle	r7, #1
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	441f      	add	r7, r3
 80087ec:	4651      	mov	r1, sl
 80087ee:	2201      	movs	r2, #1
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 fb3b 	bl	8008e6c <__lshift>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4682      	mov	sl, r0
 80087fa:	f000 fba3 	bl	8008f44 <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	dc97      	bgt.n	8008732 <_dtoa_r+0xaa2>
 8008802:	d102      	bne.n	800880a <_dtoa_r+0xb7a>
 8008804:	f019 0f01 	tst.w	r9, #1
 8008808:	d193      	bne.n	8008732 <_dtoa_r+0xaa2>
 800880a:	463b      	mov	r3, r7
 800880c:	461f      	mov	r7, r3
 800880e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008812:	2a30      	cmp	r2, #48	; 0x30
 8008814:	d0fa      	beq.n	800880c <_dtoa_r+0xb7c>
 8008816:	e6e1      	b.n	80085dc <_dtoa_r+0x94c>
 8008818:	9a03      	ldr	r2, [sp, #12]
 800881a:	429a      	cmp	r2, r3
 800881c:	d18a      	bne.n	8008734 <_dtoa_r+0xaa4>
 800881e:	2331      	movs	r3, #49	; 0x31
 8008820:	f10b 0b01 	add.w	fp, fp, #1
 8008824:	e797      	b.n	8008756 <_dtoa_r+0xac6>
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <_dtoa_r+0xbc0>)
 8008828:	f7ff ba9f 	b.w	8007d6a <_dtoa_r+0xda>
 800882c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f aa77 	bne.w	8007d22 <_dtoa_r+0x92>
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <_dtoa_r+0xbc4>)
 8008836:	f7ff ba98 	b.w	8007d6a <_dtoa_r+0xda>
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	dcb6      	bgt.n	80087ae <_dtoa_r+0xb1e>
 8008840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008842:	2b02      	cmp	r3, #2
 8008844:	f73f aeb5 	bgt.w	80085b2 <_dtoa_r+0x922>
 8008848:	e7b1      	b.n	80087ae <_dtoa_r+0xb1e>
 800884a:	bf00      	nop
 800884c:	0800ad71 	.word	0x0800ad71
 8008850:	0800acd1 	.word	0x0800acd1
 8008854:	0800acf5 	.word	0x0800acf5

08008858 <_free_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4605      	mov	r5, r0
 800885c:	2900      	cmp	r1, #0
 800885e:	d040      	beq.n	80088e2 <_free_r+0x8a>
 8008860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008864:	1f0c      	subs	r4, r1, #4
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfb8      	it	lt
 800886a:	18e4      	addlt	r4, r4, r3
 800886c:	f000 f8e4 	bl	8008a38 <__malloc_lock>
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <_free_r+0x8c>)
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	b933      	cbnz	r3, 8008884 <_free_r+0x2c>
 8008876:	6063      	str	r3, [r4, #4]
 8008878:	6014      	str	r4, [r2, #0]
 800887a:	4628      	mov	r0, r5
 800887c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008880:	f000 b8e0 	b.w	8008a44 <__malloc_unlock>
 8008884:	42a3      	cmp	r3, r4
 8008886:	d908      	bls.n	800889a <_free_r+0x42>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	1821      	adds	r1, r4, r0
 800888c:	428b      	cmp	r3, r1
 800888e:	bf01      	itttt	eq
 8008890:	6819      	ldreq	r1, [r3, #0]
 8008892:	685b      	ldreq	r3, [r3, #4]
 8008894:	1809      	addeq	r1, r1, r0
 8008896:	6021      	streq	r1, [r4, #0]
 8008898:	e7ed      	b.n	8008876 <_free_r+0x1e>
 800889a:	461a      	mov	r2, r3
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	b10b      	cbz	r3, 80088a4 <_free_r+0x4c>
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d9fa      	bls.n	800889a <_free_r+0x42>
 80088a4:	6811      	ldr	r1, [r2, #0]
 80088a6:	1850      	adds	r0, r2, r1
 80088a8:	42a0      	cmp	r0, r4
 80088aa:	d10b      	bne.n	80088c4 <_free_r+0x6c>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	4401      	add	r1, r0
 80088b0:	1850      	adds	r0, r2, r1
 80088b2:	4283      	cmp	r3, r0
 80088b4:	6011      	str	r1, [r2, #0]
 80088b6:	d1e0      	bne.n	800887a <_free_r+0x22>
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4408      	add	r0, r1
 80088be:	6010      	str	r0, [r2, #0]
 80088c0:	6053      	str	r3, [r2, #4]
 80088c2:	e7da      	b.n	800887a <_free_r+0x22>
 80088c4:	d902      	bls.n	80088cc <_free_r+0x74>
 80088c6:	230c      	movs	r3, #12
 80088c8:	602b      	str	r3, [r5, #0]
 80088ca:	e7d6      	b.n	800887a <_free_r+0x22>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	1821      	adds	r1, r4, r0
 80088d0:	428b      	cmp	r3, r1
 80088d2:	bf01      	itttt	eq
 80088d4:	6819      	ldreq	r1, [r3, #0]
 80088d6:	685b      	ldreq	r3, [r3, #4]
 80088d8:	1809      	addeq	r1, r1, r0
 80088da:	6021      	streq	r1, [r4, #0]
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6054      	str	r4, [r2, #4]
 80088e0:	e7cb      	b.n	800887a <_free_r+0x22>
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20000adc 	.word	0x20000adc

080088e8 <malloc>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <malloc+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f000 b823 	b.w	8008938 <_malloc_r>
 80088f2:	bf00      	nop
 80088f4:	2000006c 	.word	0x2000006c

080088f8 <sbrk_aligned>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4e0e      	ldr	r6, [pc, #56]	; (8008934 <sbrk_aligned+0x3c>)
 80088fc:	460c      	mov	r4, r1
 80088fe:	6831      	ldr	r1, [r6, #0]
 8008900:	4605      	mov	r5, r0
 8008902:	b911      	cbnz	r1, 800890a <sbrk_aligned+0x12>
 8008904:	f000 fe38 	bl	8009578 <_sbrk_r>
 8008908:	6030      	str	r0, [r6, #0]
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f000 fe33 	bl	8009578 <_sbrk_r>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d00a      	beq.n	800892c <sbrk_aligned+0x34>
 8008916:	1cc4      	adds	r4, r0, #3
 8008918:	f024 0403 	bic.w	r4, r4, #3
 800891c:	42a0      	cmp	r0, r4
 800891e:	d007      	beq.n	8008930 <sbrk_aligned+0x38>
 8008920:	1a21      	subs	r1, r4, r0
 8008922:	4628      	mov	r0, r5
 8008924:	f000 fe28 	bl	8009578 <_sbrk_r>
 8008928:	3001      	adds	r0, #1
 800892a:	d101      	bne.n	8008930 <sbrk_aligned+0x38>
 800892c:	f04f 34ff 	mov.w	r4, #4294967295
 8008930:	4620      	mov	r0, r4
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	20000ae0 	.word	0x20000ae0

08008938 <_malloc_r>:
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893c:	1ccd      	adds	r5, r1, #3
 800893e:	f025 0503 	bic.w	r5, r5, #3
 8008942:	3508      	adds	r5, #8
 8008944:	2d0c      	cmp	r5, #12
 8008946:	bf38      	it	cc
 8008948:	250c      	movcc	r5, #12
 800894a:	2d00      	cmp	r5, #0
 800894c:	4607      	mov	r7, r0
 800894e:	db01      	blt.n	8008954 <_malloc_r+0x1c>
 8008950:	42a9      	cmp	r1, r5
 8008952:	d905      	bls.n	8008960 <_malloc_r+0x28>
 8008954:	230c      	movs	r3, #12
 8008956:	2600      	movs	r6, #0
 8008958:	603b      	str	r3, [r7, #0]
 800895a:	4630      	mov	r0, r6
 800895c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a34 <_malloc_r+0xfc>
 8008964:	f000 f868 	bl	8008a38 <__malloc_lock>
 8008968:	f8d8 3000 	ldr.w	r3, [r8]
 800896c:	461c      	mov	r4, r3
 800896e:	bb5c      	cbnz	r4, 80089c8 <_malloc_r+0x90>
 8008970:	4629      	mov	r1, r5
 8008972:	4638      	mov	r0, r7
 8008974:	f7ff ffc0 	bl	80088f8 <sbrk_aligned>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	4604      	mov	r4, r0
 800897c:	d155      	bne.n	8008a2a <_malloc_r+0xf2>
 800897e:	f8d8 4000 	ldr.w	r4, [r8]
 8008982:	4626      	mov	r6, r4
 8008984:	2e00      	cmp	r6, #0
 8008986:	d145      	bne.n	8008a14 <_malloc_r+0xdc>
 8008988:	2c00      	cmp	r4, #0
 800898a:	d048      	beq.n	8008a1e <_malloc_r+0xe6>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	4631      	mov	r1, r6
 8008990:	4638      	mov	r0, r7
 8008992:	eb04 0903 	add.w	r9, r4, r3
 8008996:	f000 fdef 	bl	8009578 <_sbrk_r>
 800899a:	4581      	cmp	r9, r0
 800899c:	d13f      	bne.n	8008a1e <_malloc_r+0xe6>
 800899e:	6821      	ldr	r1, [r4, #0]
 80089a0:	4638      	mov	r0, r7
 80089a2:	1a6d      	subs	r5, r5, r1
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7ff ffa7 	bl	80088f8 <sbrk_aligned>
 80089aa:	3001      	adds	r0, #1
 80089ac:	d037      	beq.n	8008a1e <_malloc_r+0xe6>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	442b      	add	r3, r5
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	f8d8 3000 	ldr.w	r3, [r8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d038      	beq.n	8008a2e <_malloc_r+0xf6>
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	42a2      	cmp	r2, r4
 80089c0:	d12b      	bne.n	8008a1a <_malloc_r+0xe2>
 80089c2:	2200      	movs	r2, #0
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	e00f      	b.n	80089e8 <_malloc_r+0xb0>
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	1b52      	subs	r2, r2, r5
 80089cc:	d41f      	bmi.n	8008a0e <_malloc_r+0xd6>
 80089ce:	2a0b      	cmp	r2, #11
 80089d0:	d917      	bls.n	8008a02 <_malloc_r+0xca>
 80089d2:	1961      	adds	r1, r4, r5
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	6025      	str	r5, [r4, #0]
 80089d8:	bf18      	it	ne
 80089da:	6059      	strne	r1, [r3, #4]
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	bf08      	it	eq
 80089e0:	f8c8 1000 	streq.w	r1, [r8]
 80089e4:	5162      	str	r2, [r4, r5]
 80089e6:	604b      	str	r3, [r1, #4]
 80089e8:	4638      	mov	r0, r7
 80089ea:	f104 060b 	add.w	r6, r4, #11
 80089ee:	f000 f829 	bl	8008a44 <__malloc_unlock>
 80089f2:	f026 0607 	bic.w	r6, r6, #7
 80089f6:	1d23      	adds	r3, r4, #4
 80089f8:	1af2      	subs	r2, r6, r3
 80089fa:	d0ae      	beq.n	800895a <_malloc_r+0x22>
 80089fc:	1b9b      	subs	r3, r3, r6
 80089fe:	50a3      	str	r3, [r4, r2]
 8008a00:	e7ab      	b.n	800895a <_malloc_r+0x22>
 8008a02:	42a3      	cmp	r3, r4
 8008a04:	6862      	ldr	r2, [r4, #4]
 8008a06:	d1dd      	bne.n	80089c4 <_malloc_r+0x8c>
 8008a08:	f8c8 2000 	str.w	r2, [r8]
 8008a0c:	e7ec      	b.n	80089e8 <_malloc_r+0xb0>
 8008a0e:	4623      	mov	r3, r4
 8008a10:	6864      	ldr	r4, [r4, #4]
 8008a12:	e7ac      	b.n	800896e <_malloc_r+0x36>
 8008a14:	4634      	mov	r4, r6
 8008a16:	6876      	ldr	r6, [r6, #4]
 8008a18:	e7b4      	b.n	8008984 <_malloc_r+0x4c>
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	e7cc      	b.n	80089b8 <_malloc_r+0x80>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	4638      	mov	r0, r7
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	f000 f80e 	bl	8008a44 <__malloc_unlock>
 8008a28:	e797      	b.n	800895a <_malloc_r+0x22>
 8008a2a:	6025      	str	r5, [r4, #0]
 8008a2c:	e7dc      	b.n	80089e8 <_malloc_r+0xb0>
 8008a2e:	605b      	str	r3, [r3, #4]
 8008a30:	deff      	udf	#255	; 0xff
 8008a32:	bf00      	nop
 8008a34:	20000adc 	.word	0x20000adc

08008a38 <__malloc_lock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__malloc_lock+0x8>)
 8008a3a:	f7ff b890 	b.w	8007b5e <__retarget_lock_acquire_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000ad8 	.word	0x20000ad8

08008a44 <__malloc_unlock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__malloc_unlock+0x8>)
 8008a46:	f7ff b88b 	b.w	8007b60 <__retarget_lock_release_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	20000ad8 	.word	0x20000ad8

08008a50 <_Balloc>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	69c6      	ldr	r6, [r0, #28]
 8008a54:	4604      	mov	r4, r0
 8008a56:	460d      	mov	r5, r1
 8008a58:	b976      	cbnz	r6, 8008a78 <_Balloc+0x28>
 8008a5a:	2010      	movs	r0, #16
 8008a5c:	f7ff ff44 	bl	80088e8 <malloc>
 8008a60:	4602      	mov	r2, r0
 8008a62:	61e0      	str	r0, [r4, #28]
 8008a64:	b920      	cbnz	r0, 8008a70 <_Balloc+0x20>
 8008a66:	216b      	movs	r1, #107	; 0x6b
 8008a68:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <_Balloc+0x78>)
 8008a6a:	4818      	ldr	r0, [pc, #96]	; (8008acc <_Balloc+0x7c>)
 8008a6c:	f000 fda2 	bl	80095b4 <__assert_func>
 8008a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a74:	6006      	str	r6, [r0, #0]
 8008a76:	60c6      	str	r6, [r0, #12]
 8008a78:	69e6      	ldr	r6, [r4, #28]
 8008a7a:	68f3      	ldr	r3, [r6, #12]
 8008a7c:	b183      	cbz	r3, 8008aa0 <_Balloc+0x50>
 8008a7e:	69e3      	ldr	r3, [r4, #28]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a86:	b9b8      	cbnz	r0, 8008ab8 <_Balloc+0x68>
 8008a88:	2101      	movs	r1, #1
 8008a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a8e:	1d72      	adds	r2, r6, #5
 8008a90:	4620      	mov	r0, r4
 8008a92:	0092      	lsls	r2, r2, #2
 8008a94:	f000 fdac 	bl	80095f0 <_calloc_r>
 8008a98:	b160      	cbz	r0, 8008ab4 <_Balloc+0x64>
 8008a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a9e:	e00e      	b.n	8008abe <_Balloc+0x6e>
 8008aa0:	2221      	movs	r2, #33	; 0x21
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fda3 	bl	80095f0 <_calloc_r>
 8008aaa:	69e3      	ldr	r3, [r4, #28]
 8008aac:	60f0      	str	r0, [r6, #12]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e4      	bne.n	8008a7e <_Balloc+0x2e>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	6802      	ldr	r2, [r0, #0]
 8008aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ac4:	e7f7      	b.n	8008ab6 <_Balloc+0x66>
 8008ac6:	bf00      	nop
 8008ac8:	0800ad02 	.word	0x0800ad02
 8008acc:	0800ad82 	.word	0x0800ad82

08008ad0 <_Bfree>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	69c6      	ldr	r6, [r0, #28]
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	b976      	cbnz	r6, 8008af8 <_Bfree+0x28>
 8008ada:	2010      	movs	r0, #16
 8008adc:	f7ff ff04 	bl	80088e8 <malloc>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	61e8      	str	r0, [r5, #28]
 8008ae4:	b920      	cbnz	r0, 8008af0 <_Bfree+0x20>
 8008ae6:	218f      	movs	r1, #143	; 0x8f
 8008ae8:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <_Bfree+0x3c>)
 8008aea:	4809      	ldr	r0, [pc, #36]	; (8008b10 <_Bfree+0x40>)
 8008aec:	f000 fd62 	bl	80095b4 <__assert_func>
 8008af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af4:	6006      	str	r6, [r0, #0]
 8008af6:	60c6      	str	r6, [r0, #12]
 8008af8:	b13c      	cbz	r4, 8008b0a <_Bfree+0x3a>
 8008afa:	69eb      	ldr	r3, [r5, #28]
 8008afc:	6862      	ldr	r2, [r4, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b04:	6021      	str	r1, [r4, #0]
 8008b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	0800ad02 	.word	0x0800ad02
 8008b10:	0800ad82 	.word	0x0800ad82

08008b14 <__multadd>:
 8008b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	4607      	mov	r7, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	461e      	mov	r6, r3
 8008b1e:	2000      	movs	r0, #0
 8008b20:	690d      	ldr	r5, [r1, #16]
 8008b22:	f101 0c14 	add.w	ip, r1, #20
 8008b26:	f8dc 3000 	ldr.w	r3, [ip]
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	b299      	uxth	r1, r3
 8008b2e:	fb02 6101 	mla	r1, r2, r1, r6
 8008b32:	0c1e      	lsrs	r6, r3, #16
 8008b34:	0c0b      	lsrs	r3, r1, #16
 8008b36:	fb02 3306 	mla	r3, r2, r6, r3
 8008b3a:	b289      	uxth	r1, r1
 8008b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b40:	4285      	cmp	r5, r0
 8008b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b46:	f84c 1b04 	str.w	r1, [ip], #4
 8008b4a:	dcec      	bgt.n	8008b26 <__multadd+0x12>
 8008b4c:	b30e      	cbz	r6, 8008b92 <__multadd+0x7e>
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dc19      	bgt.n	8008b88 <__multadd+0x74>
 8008b54:	6861      	ldr	r1, [r4, #4]
 8008b56:	4638      	mov	r0, r7
 8008b58:	3101      	adds	r1, #1
 8008b5a:	f7ff ff79 	bl	8008a50 <_Balloc>
 8008b5e:	4680      	mov	r8, r0
 8008b60:	b928      	cbnz	r0, 8008b6e <__multadd+0x5a>
 8008b62:	4602      	mov	r2, r0
 8008b64:	21ba      	movs	r1, #186	; 0xba
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <__multadd+0x84>)
 8008b68:	480c      	ldr	r0, [pc, #48]	; (8008b9c <__multadd+0x88>)
 8008b6a:	f000 fd23 	bl	80095b4 <__assert_func>
 8008b6e:	6922      	ldr	r2, [r4, #16]
 8008b70:	f104 010c 	add.w	r1, r4, #12
 8008b74:	3202      	adds	r2, #2
 8008b76:	0092      	lsls	r2, r2, #2
 8008b78:	300c      	adds	r0, #12
 8008b7a:	f000 fd0d 	bl	8009598 <memcpy>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7ff ffa5 	bl	8008ad0 <_Bfree>
 8008b86:	4644      	mov	r4, r8
 8008b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	615e      	str	r6, [r3, #20]
 8008b90:	6125      	str	r5, [r4, #16]
 8008b92:	4620      	mov	r0, r4
 8008b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b98:	0800ad71 	.word	0x0800ad71
 8008b9c:	0800ad82 	.word	0x0800ad82

08008ba0 <__hi0bits>:
 8008ba0:	0c02      	lsrs	r2, r0, #16
 8008ba2:	0412      	lsls	r2, r2, #16
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	b9ca      	cbnz	r2, 8008bdc <__hi0bits+0x3c>
 8008ba8:	0403      	lsls	r3, r0, #16
 8008baa:	2010      	movs	r0, #16
 8008bac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008bb0:	bf04      	itt	eq
 8008bb2:	021b      	lsleq	r3, r3, #8
 8008bb4:	3008      	addeq	r0, #8
 8008bb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008bba:	bf04      	itt	eq
 8008bbc:	011b      	lsleq	r3, r3, #4
 8008bbe:	3004      	addeq	r0, #4
 8008bc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008bc4:	bf04      	itt	eq
 8008bc6:	009b      	lsleq	r3, r3, #2
 8008bc8:	3002      	addeq	r0, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	db05      	blt.n	8008bda <__hi0bits+0x3a>
 8008bce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008bd2:	f100 0001 	add.w	r0, r0, #1
 8008bd6:	bf08      	it	eq
 8008bd8:	2020      	moveq	r0, #32
 8008bda:	4770      	bx	lr
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7e5      	b.n	8008bac <__hi0bits+0xc>

08008be0 <__lo0bits>:
 8008be0:	6803      	ldr	r3, [r0, #0]
 8008be2:	4602      	mov	r2, r0
 8008be4:	f013 0007 	ands.w	r0, r3, #7
 8008be8:	d00b      	beq.n	8008c02 <__lo0bits+0x22>
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	d421      	bmi.n	8008c32 <__lo0bits+0x52>
 8008bee:	0798      	lsls	r0, r3, #30
 8008bf0:	bf49      	itett	mi
 8008bf2:	085b      	lsrmi	r3, r3, #1
 8008bf4:	089b      	lsrpl	r3, r3, #2
 8008bf6:	2001      	movmi	r0, #1
 8008bf8:	6013      	strmi	r3, [r2, #0]
 8008bfa:	bf5c      	itt	pl
 8008bfc:	2002      	movpl	r0, #2
 8008bfe:	6013      	strpl	r3, [r2, #0]
 8008c00:	4770      	bx	lr
 8008c02:	b299      	uxth	r1, r3
 8008c04:	b909      	cbnz	r1, 8008c0a <__lo0bits+0x2a>
 8008c06:	2010      	movs	r0, #16
 8008c08:	0c1b      	lsrs	r3, r3, #16
 8008c0a:	b2d9      	uxtb	r1, r3
 8008c0c:	b909      	cbnz	r1, 8008c12 <__lo0bits+0x32>
 8008c0e:	3008      	adds	r0, #8
 8008c10:	0a1b      	lsrs	r3, r3, #8
 8008c12:	0719      	lsls	r1, r3, #28
 8008c14:	bf04      	itt	eq
 8008c16:	091b      	lsreq	r3, r3, #4
 8008c18:	3004      	addeq	r0, #4
 8008c1a:	0799      	lsls	r1, r3, #30
 8008c1c:	bf04      	itt	eq
 8008c1e:	089b      	lsreq	r3, r3, #2
 8008c20:	3002      	addeq	r0, #2
 8008c22:	07d9      	lsls	r1, r3, #31
 8008c24:	d403      	bmi.n	8008c2e <__lo0bits+0x4e>
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	f100 0001 	add.w	r0, r0, #1
 8008c2c:	d003      	beq.n	8008c36 <__lo0bits+0x56>
 8008c2e:	6013      	str	r3, [r2, #0]
 8008c30:	4770      	bx	lr
 8008c32:	2000      	movs	r0, #0
 8008c34:	4770      	bx	lr
 8008c36:	2020      	movs	r0, #32
 8008c38:	4770      	bx	lr
	...

08008c3c <__i2b>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	2101      	movs	r1, #1
 8008c42:	f7ff ff05 	bl	8008a50 <_Balloc>
 8008c46:	4602      	mov	r2, r0
 8008c48:	b928      	cbnz	r0, 8008c56 <__i2b+0x1a>
 8008c4a:	f240 1145 	movw	r1, #325	; 0x145
 8008c4e:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <__i2b+0x24>)
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <__i2b+0x28>)
 8008c52:	f000 fcaf 	bl	80095b4 <__assert_func>
 8008c56:	2301      	movs	r3, #1
 8008c58:	6144      	str	r4, [r0, #20]
 8008c5a:	6103      	str	r3, [r0, #16]
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	bf00      	nop
 8008c60:	0800ad71 	.word	0x0800ad71
 8008c64:	0800ad82 	.word	0x0800ad82

08008c68 <__multiply>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	4691      	mov	r9, r2
 8008c6e:	690a      	ldr	r2, [r1, #16]
 8008c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c74:	460c      	mov	r4, r1
 8008c76:	429a      	cmp	r2, r3
 8008c78:	bfbe      	ittt	lt
 8008c7a:	460b      	movlt	r3, r1
 8008c7c:	464c      	movlt	r4, r9
 8008c7e:	4699      	movlt	r9, r3
 8008c80:	6927      	ldr	r7, [r4, #16]
 8008c82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c86:	68a3      	ldr	r3, [r4, #8]
 8008c88:	6861      	ldr	r1, [r4, #4]
 8008c8a:	eb07 060a 	add.w	r6, r7, sl
 8008c8e:	42b3      	cmp	r3, r6
 8008c90:	b085      	sub	sp, #20
 8008c92:	bfb8      	it	lt
 8008c94:	3101      	addlt	r1, #1
 8008c96:	f7ff fedb 	bl	8008a50 <_Balloc>
 8008c9a:	b930      	cbnz	r0, 8008caa <__multiply+0x42>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ca2:	4b43      	ldr	r3, [pc, #268]	; (8008db0 <__multiply+0x148>)
 8008ca4:	4843      	ldr	r0, [pc, #268]	; (8008db4 <__multiply+0x14c>)
 8008ca6:	f000 fc85 	bl	80095b4 <__assert_func>
 8008caa:	f100 0514 	add.w	r5, r0, #20
 8008cae:	462b      	mov	r3, r5
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cb6:	4543      	cmp	r3, r8
 8008cb8:	d321      	bcc.n	8008cfe <__multiply+0x96>
 8008cba:	f104 0314 	add.w	r3, r4, #20
 8008cbe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cc2:	f109 0314 	add.w	r3, r9, #20
 8008cc6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cca:	9202      	str	r2, [sp, #8]
 8008ccc:	1b3a      	subs	r2, r7, r4
 8008cce:	3a15      	subs	r2, #21
 8008cd0:	f022 0203 	bic.w	r2, r2, #3
 8008cd4:	3204      	adds	r2, #4
 8008cd6:	f104 0115 	add.w	r1, r4, #21
 8008cda:	428f      	cmp	r7, r1
 8008cdc:	bf38      	it	cc
 8008cde:	2204      	movcc	r2, #4
 8008ce0:	9201      	str	r2, [sp, #4]
 8008ce2:	9a02      	ldr	r2, [sp, #8]
 8008ce4:	9303      	str	r3, [sp, #12]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d80c      	bhi.n	8008d04 <__multiply+0x9c>
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	dd03      	ble.n	8008cf6 <__multiply+0x8e>
 8008cee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d05a      	beq.n	8008dac <__multiply+0x144>
 8008cf6:	6106      	str	r6, [r0, #16]
 8008cf8:	b005      	add	sp, #20
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	f843 2b04 	str.w	r2, [r3], #4
 8008d02:	e7d8      	b.n	8008cb6 <__multiply+0x4e>
 8008d04:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d08:	f1ba 0f00 	cmp.w	sl, #0
 8008d0c:	d023      	beq.n	8008d56 <__multiply+0xee>
 8008d0e:	46a9      	mov	r9, r5
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	f104 0e14 	add.w	lr, r4, #20
 8008d18:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d1c:	f8d9 1000 	ldr.w	r1, [r9]
 8008d20:	fa1f fb82 	uxth.w	fp, r2
 8008d24:	b289      	uxth	r1, r1
 8008d26:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d2a:	4461      	add	r1, ip
 8008d2c:	f8d9 c000 	ldr.w	ip, [r9]
 8008d30:	0c12      	lsrs	r2, r2, #16
 8008d32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d36:	fb0a c202 	mla	r2, sl, r2, ip
 8008d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d3e:	b289      	uxth	r1, r1
 8008d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d44:	4577      	cmp	r7, lr
 8008d46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d4a:	f849 1b04 	str.w	r1, [r9], #4
 8008d4e:	d8e3      	bhi.n	8008d18 <__multiply+0xb0>
 8008d50:	9a01      	ldr	r2, [sp, #4]
 8008d52:	f845 c002 	str.w	ip, [r5, r2]
 8008d56:	9a03      	ldr	r2, [sp, #12]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d5e:	f1b9 0f00 	cmp.w	r9, #0
 8008d62:	d021      	beq.n	8008da8 <__multiply+0x140>
 8008d64:	46ae      	mov	lr, r5
 8008d66:	f04f 0a00 	mov.w	sl, #0
 8008d6a:	6829      	ldr	r1, [r5, #0]
 8008d6c:	f104 0c14 	add.w	ip, r4, #20
 8008d70:	f8bc b000 	ldrh.w	fp, [ip]
 8008d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d78:	b289      	uxth	r1, r1
 8008d7a:	fb09 220b 	mla	r2, r9, fp, r2
 8008d7e:	4452      	add	r2, sl
 8008d80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d84:	f84e 1b04 	str.w	r1, [lr], #4
 8008d88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d90:	f8be 1000 	ldrh.w	r1, [lr]
 8008d94:	4567      	cmp	r7, ip
 8008d96:	fb09 110a 	mla	r1, r9, sl, r1
 8008d9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008da2:	d8e5      	bhi.n	8008d70 <__multiply+0x108>
 8008da4:	9a01      	ldr	r2, [sp, #4]
 8008da6:	50a9      	str	r1, [r5, r2]
 8008da8:	3504      	adds	r5, #4
 8008daa:	e79a      	b.n	8008ce2 <__multiply+0x7a>
 8008dac:	3e01      	subs	r6, #1
 8008dae:	e79c      	b.n	8008cea <__multiply+0x82>
 8008db0:	0800ad71 	.word	0x0800ad71
 8008db4:	0800ad82 	.word	0x0800ad82

08008db8 <__pow5mult>:
 8008db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	4615      	mov	r5, r2
 8008dbe:	f012 0203 	ands.w	r2, r2, #3
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	d007      	beq.n	8008dd8 <__pow5mult+0x20>
 8008dc8:	4c25      	ldr	r4, [pc, #148]	; (8008e60 <__pow5mult+0xa8>)
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dd2:	f7ff fe9f 	bl	8008b14 <__multadd>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	10ad      	asrs	r5, r5, #2
 8008dda:	d03d      	beq.n	8008e58 <__pow5mult+0xa0>
 8008ddc:	69f4      	ldr	r4, [r6, #28]
 8008dde:	b97c      	cbnz	r4, 8008e00 <__pow5mult+0x48>
 8008de0:	2010      	movs	r0, #16
 8008de2:	f7ff fd81 	bl	80088e8 <malloc>
 8008de6:	4602      	mov	r2, r0
 8008de8:	61f0      	str	r0, [r6, #28]
 8008dea:	b928      	cbnz	r0, 8008df8 <__pow5mult+0x40>
 8008dec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008df0:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <__pow5mult+0xac>)
 8008df2:	481d      	ldr	r0, [pc, #116]	; (8008e68 <__pow5mult+0xb0>)
 8008df4:	f000 fbde 	bl	80095b4 <__assert_func>
 8008df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dfc:	6004      	str	r4, [r0, #0]
 8008dfe:	60c4      	str	r4, [r0, #12]
 8008e00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e08:	b94c      	cbnz	r4, 8008e1e <__pow5mult+0x66>
 8008e0a:	f240 2171 	movw	r1, #625	; 0x271
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff ff14 	bl	8008c3c <__i2b>
 8008e14:	2300      	movs	r3, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e1c:	6003      	str	r3, [r0, #0]
 8008e1e:	f04f 0900 	mov.w	r9, #0
 8008e22:	07eb      	lsls	r3, r5, #31
 8008e24:	d50a      	bpl.n	8008e3c <__pow5mult+0x84>
 8008e26:	4639      	mov	r1, r7
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ff1c 	bl	8008c68 <__multiply>
 8008e30:	4680      	mov	r8, r0
 8008e32:	4639      	mov	r1, r7
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff fe4b 	bl	8008ad0 <_Bfree>
 8008e3a:	4647      	mov	r7, r8
 8008e3c:	106d      	asrs	r5, r5, #1
 8008e3e:	d00b      	beq.n	8008e58 <__pow5mult+0xa0>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	b938      	cbnz	r0, 8008e54 <__pow5mult+0x9c>
 8008e44:	4622      	mov	r2, r4
 8008e46:	4621      	mov	r1, r4
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ff0d 	bl	8008c68 <__multiply>
 8008e4e:	6020      	str	r0, [r4, #0]
 8008e50:	f8c0 9000 	str.w	r9, [r0]
 8008e54:	4604      	mov	r4, r0
 8008e56:	e7e4      	b.n	8008e22 <__pow5mult+0x6a>
 8008e58:	4638      	mov	r0, r7
 8008e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5e:	bf00      	nop
 8008e60:	0800aed0 	.word	0x0800aed0
 8008e64:	0800ad02 	.word	0x0800ad02
 8008e68:	0800ad82 	.word	0x0800ad82

08008e6c <__lshift>:
 8008e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	460c      	mov	r4, r1
 8008e72:	4607      	mov	r7, r0
 8008e74:	4691      	mov	r9, r2
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	6849      	ldr	r1, [r1, #4]
 8008e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e84:	f108 0601 	add.w	r6, r8, #1
 8008e88:	42b3      	cmp	r3, r6
 8008e8a:	db0b      	blt.n	8008ea4 <__lshift+0x38>
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f7ff fddf 	bl	8008a50 <_Balloc>
 8008e92:	4605      	mov	r5, r0
 8008e94:	b948      	cbnz	r0, 8008eaa <__lshift+0x3e>
 8008e96:	4602      	mov	r2, r0
 8008e98:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e9c:	4b27      	ldr	r3, [pc, #156]	; (8008f3c <__lshift+0xd0>)
 8008e9e:	4828      	ldr	r0, [pc, #160]	; (8008f40 <__lshift+0xd4>)
 8008ea0:	f000 fb88 	bl	80095b4 <__assert_func>
 8008ea4:	3101      	adds	r1, #1
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	e7ee      	b.n	8008e88 <__lshift+0x1c>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f100 0114 	add.w	r1, r0, #20
 8008eb0:	f100 0210 	add.w	r2, r0, #16
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	4553      	cmp	r3, sl
 8008eb8:	db33      	blt.n	8008f22 <__lshift+0xb6>
 8008eba:	6920      	ldr	r0, [r4, #16]
 8008ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ec0:	f104 0314 	add.w	r3, r4, #20
 8008ec4:	f019 091f 	ands.w	r9, r9, #31
 8008ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ed0:	d02b      	beq.n	8008f2a <__lshift+0xbe>
 8008ed2:	468a      	mov	sl, r1
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	fa00 f009 	lsl.w	r0, r0, r9
 8008ee0:	4310      	orrs	r0, r2
 8008ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	459c      	cmp	ip, r3
 8008eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ef0:	d8f3      	bhi.n	8008eda <__lshift+0x6e>
 8008ef2:	ebac 0304 	sub.w	r3, ip, r4
 8008ef6:	3b15      	subs	r3, #21
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3304      	adds	r3, #4
 8008efe:	f104 0015 	add.w	r0, r4, #21
 8008f02:	4584      	cmp	ip, r0
 8008f04:	bf38      	it	cc
 8008f06:	2304      	movcc	r3, #4
 8008f08:	50ca      	str	r2, [r1, r3]
 8008f0a:	b10a      	cbz	r2, 8008f10 <__lshift+0xa4>
 8008f0c:	f108 0602 	add.w	r6, r8, #2
 8008f10:	3e01      	subs	r6, #1
 8008f12:	4638      	mov	r0, r7
 8008f14:	4621      	mov	r1, r4
 8008f16:	612e      	str	r6, [r5, #16]
 8008f18:	f7ff fdda 	bl	8008ad0 <_Bfree>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f26:	3301      	adds	r3, #1
 8008f28:	e7c5      	b.n	8008eb6 <__lshift+0x4a>
 8008f2a:	3904      	subs	r1, #4
 8008f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f30:	459c      	cmp	ip, r3
 8008f32:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f36:	d8f9      	bhi.n	8008f2c <__lshift+0xc0>
 8008f38:	e7ea      	b.n	8008f10 <__lshift+0xa4>
 8008f3a:	bf00      	nop
 8008f3c:	0800ad71 	.word	0x0800ad71
 8008f40:	0800ad82 	.word	0x0800ad82

08008f44 <__mcmp>:
 8008f44:	4603      	mov	r3, r0
 8008f46:	690a      	ldr	r2, [r1, #16]
 8008f48:	6900      	ldr	r0, [r0, #16]
 8008f4a:	b530      	push	{r4, r5, lr}
 8008f4c:	1a80      	subs	r0, r0, r2
 8008f4e:	d10d      	bne.n	8008f6c <__mcmp+0x28>
 8008f50:	3314      	adds	r3, #20
 8008f52:	3114      	adds	r1, #20
 8008f54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f64:	4295      	cmp	r5, r2
 8008f66:	d002      	beq.n	8008f6e <__mcmp+0x2a>
 8008f68:	d304      	bcc.n	8008f74 <__mcmp+0x30>
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	bd30      	pop	{r4, r5, pc}
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	d3f4      	bcc.n	8008f5c <__mcmp+0x18>
 8008f72:	e7fb      	b.n	8008f6c <__mcmp+0x28>
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	e7f8      	b.n	8008f6c <__mcmp+0x28>
	...

08008f7c <__mdiff>:
 8008f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	460d      	mov	r5, r1
 8008f82:	4607      	mov	r7, r0
 8008f84:	4611      	mov	r1, r2
 8008f86:	4628      	mov	r0, r5
 8008f88:	4614      	mov	r4, r2
 8008f8a:	f7ff ffdb 	bl	8008f44 <__mcmp>
 8008f8e:	1e06      	subs	r6, r0, #0
 8008f90:	d111      	bne.n	8008fb6 <__mdiff+0x3a>
 8008f92:	4631      	mov	r1, r6
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff fd5b 	bl	8008a50 <_Balloc>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <__mdiff+0x2e>
 8008f9e:	f240 2137 	movw	r1, #567	; 0x237
 8008fa2:	4b3a      	ldr	r3, [pc, #232]	; (800908c <__mdiff+0x110>)
 8008fa4:	483a      	ldr	r0, [pc, #232]	; (8009090 <__mdiff+0x114>)
 8008fa6:	f000 fb05 	bl	80095b4 <__assert_func>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	bfa4      	itt	ge
 8008fb8:	4623      	movge	r3, r4
 8008fba:	462c      	movge	r4, r5
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	bfa6      	itte	ge
 8008fc2:	461d      	movge	r5, r3
 8008fc4:	2600      	movge	r6, #0
 8008fc6:	2601      	movlt	r6, #1
 8008fc8:	f7ff fd42 	bl	8008a50 <_Balloc>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	b918      	cbnz	r0, 8008fd8 <__mdiff+0x5c>
 8008fd0:	f240 2145 	movw	r1, #581	; 0x245
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	; (800908c <__mdiff+0x110>)
 8008fd6:	e7e5      	b.n	8008fa4 <__mdiff+0x28>
 8008fd8:	f102 0814 	add.w	r8, r2, #20
 8008fdc:	46c2      	mov	sl, r8
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	6927      	ldr	r7, [r4, #16]
 8008fe4:	60c6      	str	r6, [r0, #12]
 8008fe6:	692e      	ldr	r6, [r5, #16]
 8008fe8:	f104 0014 	add.w	r0, r4, #20
 8008fec:	f105 0914 	add.w	r9, r5, #20
 8008ff0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008ff4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ff8:	3410      	adds	r4, #16
 8008ffa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008ffe:	f859 3b04 	ldr.w	r3, [r9], #4
 8009002:	fa1f f18b 	uxth.w	r1, fp
 8009006:	4461      	add	r1, ip
 8009008:	fa1f fc83 	uxth.w	ip, r3
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	eba1 010c 	sub.w	r1, r1, ip
 8009012:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009016:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800901a:	b289      	uxth	r1, r1
 800901c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009020:	454e      	cmp	r6, r9
 8009022:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009026:	f84a 1b04 	str.w	r1, [sl], #4
 800902a:	d8e6      	bhi.n	8008ffa <__mdiff+0x7e>
 800902c:	1b73      	subs	r3, r6, r5
 800902e:	3b15      	subs	r3, #21
 8009030:	f023 0303 	bic.w	r3, r3, #3
 8009034:	3515      	adds	r5, #21
 8009036:	3304      	adds	r3, #4
 8009038:	42ae      	cmp	r6, r5
 800903a:	bf38      	it	cc
 800903c:	2304      	movcc	r3, #4
 800903e:	4418      	add	r0, r3
 8009040:	4443      	add	r3, r8
 8009042:	461e      	mov	r6, r3
 8009044:	4605      	mov	r5, r0
 8009046:	4575      	cmp	r5, lr
 8009048:	d30e      	bcc.n	8009068 <__mdiff+0xec>
 800904a:	f10e 0103 	add.w	r1, lr, #3
 800904e:	1a09      	subs	r1, r1, r0
 8009050:	f021 0103 	bic.w	r1, r1, #3
 8009054:	3803      	subs	r0, #3
 8009056:	4586      	cmp	lr, r0
 8009058:	bf38      	it	cc
 800905a:	2100      	movcc	r1, #0
 800905c:	440b      	add	r3, r1
 800905e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009062:	b189      	cbz	r1, 8009088 <__mdiff+0x10c>
 8009064:	6117      	str	r7, [r2, #16]
 8009066:	e7a3      	b.n	8008fb0 <__mdiff+0x34>
 8009068:	f855 8b04 	ldr.w	r8, [r5], #4
 800906c:	fa1f f188 	uxth.w	r1, r8
 8009070:	4461      	add	r1, ip
 8009072:	140c      	asrs	r4, r1, #16
 8009074:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009078:	b289      	uxth	r1, r1
 800907a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800907e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009082:	f846 1b04 	str.w	r1, [r6], #4
 8009086:	e7de      	b.n	8009046 <__mdiff+0xca>
 8009088:	3f01      	subs	r7, #1
 800908a:	e7e8      	b.n	800905e <__mdiff+0xe2>
 800908c:	0800ad71 	.word	0x0800ad71
 8009090:	0800ad82 	.word	0x0800ad82

08009094 <__d2b>:
 8009094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009096:	2101      	movs	r1, #1
 8009098:	4617      	mov	r7, r2
 800909a:	461c      	mov	r4, r3
 800909c:	9e08      	ldr	r6, [sp, #32]
 800909e:	f7ff fcd7 	bl	8008a50 <_Balloc>
 80090a2:	4605      	mov	r5, r0
 80090a4:	b930      	cbnz	r0, 80090b4 <__d2b+0x20>
 80090a6:	4602      	mov	r2, r0
 80090a8:	f240 310f 	movw	r1, #783	; 0x30f
 80090ac:	4b22      	ldr	r3, [pc, #136]	; (8009138 <__d2b+0xa4>)
 80090ae:	4823      	ldr	r0, [pc, #140]	; (800913c <__d2b+0xa8>)
 80090b0:	f000 fa80 	bl	80095b4 <__assert_func>
 80090b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80090b8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80090bc:	bb24      	cbnz	r4, 8009108 <__d2b+0x74>
 80090be:	2f00      	cmp	r7, #0
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	d026      	beq.n	8009112 <__d2b+0x7e>
 80090c4:	4668      	mov	r0, sp
 80090c6:	9700      	str	r7, [sp, #0]
 80090c8:	f7ff fd8a 	bl	8008be0 <__lo0bits>
 80090cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090d0:	b1e8      	cbz	r0, 800910e <__d2b+0x7a>
 80090d2:	f1c0 0320 	rsb	r3, r0, #32
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	430b      	orrs	r3, r1
 80090dc:	40c2      	lsrs	r2, r0
 80090de:	616b      	str	r3, [r5, #20]
 80090e0:	9201      	str	r2, [sp, #4]
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bf14      	ite	ne
 80090e8:	2102      	movne	r1, #2
 80090ea:	2101      	moveq	r1, #1
 80090ec:	61ab      	str	r3, [r5, #24]
 80090ee:	6129      	str	r1, [r5, #16]
 80090f0:	b1bc      	cbz	r4, 8009122 <__d2b+0x8e>
 80090f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090f6:	4404      	add	r4, r0
 80090f8:	6034      	str	r4, [r6, #0]
 80090fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	6018      	str	r0, [r3, #0]
 8009102:	4628      	mov	r0, r5
 8009104:	b003      	add	sp, #12
 8009106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800910c:	e7d7      	b.n	80090be <__d2b+0x2a>
 800910e:	6169      	str	r1, [r5, #20]
 8009110:	e7e7      	b.n	80090e2 <__d2b+0x4e>
 8009112:	a801      	add	r0, sp, #4
 8009114:	f7ff fd64 	bl	8008be0 <__lo0bits>
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	2101      	movs	r1, #1
 800911c:	616b      	str	r3, [r5, #20]
 800911e:	3020      	adds	r0, #32
 8009120:	e7e5      	b.n	80090ee <__d2b+0x5a>
 8009122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009126:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800912a:	6030      	str	r0, [r6, #0]
 800912c:	6918      	ldr	r0, [r3, #16]
 800912e:	f7ff fd37 	bl	8008ba0 <__hi0bits>
 8009132:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009136:	e7e2      	b.n	80090fe <__d2b+0x6a>
 8009138:	0800ad71 	.word	0x0800ad71
 800913c:	0800ad82 	.word	0x0800ad82

08009140 <__ssputs_r>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	461f      	mov	r7, r3
 8009146:	688e      	ldr	r6, [r1, #8]
 8009148:	4682      	mov	sl, r0
 800914a:	42be      	cmp	r6, r7
 800914c:	460c      	mov	r4, r1
 800914e:	4690      	mov	r8, r2
 8009150:	680b      	ldr	r3, [r1, #0]
 8009152:	d82c      	bhi.n	80091ae <__ssputs_r+0x6e>
 8009154:	898a      	ldrh	r2, [r1, #12]
 8009156:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800915a:	d026      	beq.n	80091aa <__ssputs_r+0x6a>
 800915c:	6965      	ldr	r5, [r4, #20]
 800915e:	6909      	ldr	r1, [r1, #16]
 8009160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009164:	eba3 0901 	sub.w	r9, r3, r1
 8009168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800916c:	1c7b      	adds	r3, r7, #1
 800916e:	444b      	add	r3, r9
 8009170:	106d      	asrs	r5, r5, #1
 8009172:	429d      	cmp	r5, r3
 8009174:	bf38      	it	cc
 8009176:	461d      	movcc	r5, r3
 8009178:	0553      	lsls	r3, r2, #21
 800917a:	d527      	bpl.n	80091cc <__ssputs_r+0x8c>
 800917c:	4629      	mov	r1, r5
 800917e:	f7ff fbdb 	bl	8008938 <_malloc_r>
 8009182:	4606      	mov	r6, r0
 8009184:	b360      	cbz	r0, 80091e0 <__ssputs_r+0xa0>
 8009186:	464a      	mov	r2, r9
 8009188:	6921      	ldr	r1, [r4, #16]
 800918a:	f000 fa05 	bl	8009598 <memcpy>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	6126      	str	r6, [r4, #16]
 800919c:	444e      	add	r6, r9
 800919e:	6026      	str	r6, [r4, #0]
 80091a0:	463e      	mov	r6, r7
 80091a2:	6165      	str	r5, [r4, #20]
 80091a4:	eba5 0509 	sub.w	r5, r5, r9
 80091a8:	60a5      	str	r5, [r4, #8]
 80091aa:	42be      	cmp	r6, r7
 80091ac:	d900      	bls.n	80091b0 <__ssputs_r+0x70>
 80091ae:	463e      	mov	r6, r7
 80091b0:	4632      	mov	r2, r6
 80091b2:	4641      	mov	r1, r8
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	f000 f9c5 	bl	8009544 <memmove>
 80091ba:	2000      	movs	r0, #0
 80091bc:	68a3      	ldr	r3, [r4, #8]
 80091be:	1b9b      	subs	r3, r3, r6
 80091c0:	60a3      	str	r3, [r4, #8]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	4433      	add	r3, r6
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091cc:	462a      	mov	r2, r5
 80091ce:	f000 fa35 	bl	800963c <_realloc_r>
 80091d2:	4606      	mov	r6, r0
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d1e0      	bne.n	800919a <__ssputs_r+0x5a>
 80091d8:	4650      	mov	r0, sl
 80091da:	6921      	ldr	r1, [r4, #16]
 80091dc:	f7ff fb3c 	bl	8008858 <_free_r>
 80091e0:	230c      	movs	r3, #12
 80091e2:	f8ca 3000 	str.w	r3, [sl]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	e7e9      	b.n	80091c8 <__ssputs_r+0x88>

080091f4 <_svfiprintf_r>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	4698      	mov	r8, r3
 80091fa:	898b      	ldrh	r3, [r1, #12]
 80091fc:	4607      	mov	r7, r0
 80091fe:	061b      	lsls	r3, r3, #24
 8009200:	460d      	mov	r5, r1
 8009202:	4614      	mov	r4, r2
 8009204:	b09d      	sub	sp, #116	; 0x74
 8009206:	d50e      	bpl.n	8009226 <_svfiprintf_r+0x32>
 8009208:	690b      	ldr	r3, [r1, #16]
 800920a:	b963      	cbnz	r3, 8009226 <_svfiprintf_r+0x32>
 800920c:	2140      	movs	r1, #64	; 0x40
 800920e:	f7ff fb93 	bl	8008938 <_malloc_r>
 8009212:	6028      	str	r0, [r5, #0]
 8009214:	6128      	str	r0, [r5, #16]
 8009216:	b920      	cbnz	r0, 8009222 <_svfiprintf_r+0x2e>
 8009218:	230c      	movs	r3, #12
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e0d0      	b.n	80093c4 <_svfiprintf_r+0x1d0>
 8009222:	2340      	movs	r3, #64	; 0x40
 8009224:	616b      	str	r3, [r5, #20]
 8009226:	2300      	movs	r3, #0
 8009228:	9309      	str	r3, [sp, #36]	; 0x24
 800922a:	2320      	movs	r3, #32
 800922c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009230:	2330      	movs	r3, #48	; 0x30
 8009232:	f04f 0901 	mov.w	r9, #1
 8009236:	f8cd 800c 	str.w	r8, [sp, #12]
 800923a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80093dc <_svfiprintf_r+0x1e8>
 800923e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009242:	4623      	mov	r3, r4
 8009244:	469a      	mov	sl, r3
 8009246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924a:	b10a      	cbz	r2, 8009250 <_svfiprintf_r+0x5c>
 800924c:	2a25      	cmp	r2, #37	; 0x25
 800924e:	d1f9      	bne.n	8009244 <_svfiprintf_r+0x50>
 8009250:	ebba 0b04 	subs.w	fp, sl, r4
 8009254:	d00b      	beq.n	800926e <_svfiprintf_r+0x7a>
 8009256:	465b      	mov	r3, fp
 8009258:	4622      	mov	r2, r4
 800925a:	4629      	mov	r1, r5
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff ff6f 	bl	8009140 <__ssputs_r>
 8009262:	3001      	adds	r0, #1
 8009264:	f000 80a9 	beq.w	80093ba <_svfiprintf_r+0x1c6>
 8009268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926a:	445a      	add	r2, fp
 800926c:	9209      	str	r2, [sp, #36]	; 0x24
 800926e:	f89a 3000 	ldrb.w	r3, [sl]
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80a1 	beq.w	80093ba <_svfiprintf_r+0x1c6>
 8009278:	2300      	movs	r3, #0
 800927a:	f04f 32ff 	mov.w	r2, #4294967295
 800927e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009282:	f10a 0a01 	add.w	sl, sl, #1
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	9307      	str	r3, [sp, #28]
 800928a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800928e:	931a      	str	r3, [sp, #104]	; 0x68
 8009290:	4654      	mov	r4, sl
 8009292:	2205      	movs	r2, #5
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	4850      	ldr	r0, [pc, #320]	; (80093dc <_svfiprintf_r+0x1e8>)
 800929a:	f7fe fc62 	bl	8007b62 <memchr>
 800929e:	9a04      	ldr	r2, [sp, #16]
 80092a0:	b9d8      	cbnz	r0, 80092da <_svfiprintf_r+0xe6>
 80092a2:	06d0      	lsls	r0, r2, #27
 80092a4:	bf44      	itt	mi
 80092a6:	2320      	movmi	r3, #32
 80092a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ac:	0711      	lsls	r1, r2, #28
 80092ae:	bf44      	itt	mi
 80092b0:	232b      	movmi	r3, #43	; 0x2b
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b2a      	cmp	r3, #42	; 0x2a
 80092bc:	d015      	beq.n	80092ea <_svfiprintf_r+0xf6>
 80092be:	4654      	mov	r4, sl
 80092c0:	2000      	movs	r0, #0
 80092c2:	f04f 0c0a 	mov.w	ip, #10
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	4621      	mov	r1, r4
 80092ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ce:	3b30      	subs	r3, #48	; 0x30
 80092d0:	2b09      	cmp	r3, #9
 80092d2:	d94d      	bls.n	8009370 <_svfiprintf_r+0x17c>
 80092d4:	b1b0      	cbz	r0, 8009304 <_svfiprintf_r+0x110>
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	e014      	b.n	8009304 <_svfiprintf_r+0x110>
 80092da:	eba0 0308 	sub.w	r3, r0, r8
 80092de:	fa09 f303 	lsl.w	r3, r9, r3
 80092e2:	4313      	orrs	r3, r2
 80092e4:	46a2      	mov	sl, r4
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	e7d2      	b.n	8009290 <_svfiprintf_r+0x9c>
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	1d19      	adds	r1, r3, #4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	9103      	str	r1, [sp, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfbb      	ittet	lt
 80092f6:	425b      	neglt	r3, r3
 80092f8:	f042 0202 	orrlt.w	r2, r2, #2
 80092fc:	9307      	strge	r3, [sp, #28]
 80092fe:	9307      	strlt	r3, [sp, #28]
 8009300:	bfb8      	it	lt
 8009302:	9204      	strlt	r2, [sp, #16]
 8009304:	7823      	ldrb	r3, [r4, #0]
 8009306:	2b2e      	cmp	r3, #46	; 0x2e
 8009308:	d10c      	bne.n	8009324 <_svfiprintf_r+0x130>
 800930a:	7863      	ldrb	r3, [r4, #1]
 800930c:	2b2a      	cmp	r3, #42	; 0x2a
 800930e:	d134      	bne.n	800937a <_svfiprintf_r+0x186>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	3402      	adds	r4, #2
 8009314:	1d1a      	adds	r2, r3, #4
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	9203      	str	r2, [sp, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfb8      	it	lt
 800931e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80093e0 <_svfiprintf_r+0x1ec>
 8009328:	2203      	movs	r2, #3
 800932a:	4650      	mov	r0, sl
 800932c:	7821      	ldrb	r1, [r4, #0]
 800932e:	f7fe fc18 	bl	8007b62 <memchr>
 8009332:	b138      	cbz	r0, 8009344 <_svfiprintf_r+0x150>
 8009334:	2240      	movs	r2, #64	; 0x40
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	eba0 000a 	sub.w	r0, r0, sl
 800933c:	4082      	lsls	r2, r0
 800933e:	4313      	orrs	r3, r2
 8009340:	3401      	adds	r4, #1
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009348:	2206      	movs	r2, #6
 800934a:	4826      	ldr	r0, [pc, #152]	; (80093e4 <_svfiprintf_r+0x1f0>)
 800934c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009350:	f7fe fc07 	bl	8007b62 <memchr>
 8009354:	2800      	cmp	r0, #0
 8009356:	d038      	beq.n	80093ca <_svfiprintf_r+0x1d6>
 8009358:	4b23      	ldr	r3, [pc, #140]	; (80093e8 <_svfiprintf_r+0x1f4>)
 800935a:	bb1b      	cbnz	r3, 80093a4 <_svfiprintf_r+0x1b0>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	3307      	adds	r3, #7
 8009360:	f023 0307 	bic.w	r3, r3, #7
 8009364:	3308      	adds	r3, #8
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936a:	4433      	add	r3, r6
 800936c:	9309      	str	r3, [sp, #36]	; 0x24
 800936e:	e768      	b.n	8009242 <_svfiprintf_r+0x4e>
 8009370:	460c      	mov	r4, r1
 8009372:	2001      	movs	r0, #1
 8009374:	fb0c 3202 	mla	r2, ip, r2, r3
 8009378:	e7a6      	b.n	80092c8 <_svfiprintf_r+0xd4>
 800937a:	2300      	movs	r3, #0
 800937c:	f04f 0c0a 	mov.w	ip, #10
 8009380:	4619      	mov	r1, r3
 8009382:	3401      	adds	r4, #1
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	4620      	mov	r0, r4
 8009388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938c:	3a30      	subs	r2, #48	; 0x30
 800938e:	2a09      	cmp	r2, #9
 8009390:	d903      	bls.n	800939a <_svfiprintf_r+0x1a6>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0c6      	beq.n	8009324 <_svfiprintf_r+0x130>
 8009396:	9105      	str	r1, [sp, #20]
 8009398:	e7c4      	b.n	8009324 <_svfiprintf_r+0x130>
 800939a:	4604      	mov	r4, r0
 800939c:	2301      	movs	r3, #1
 800939e:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a2:	e7f0      	b.n	8009386 <_svfiprintf_r+0x192>
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <_svfiprintf_r+0x1f8>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	f7fd fe70 	bl	8007094 <_printf_float>
 80093b4:	1c42      	adds	r2, r0, #1
 80093b6:	4606      	mov	r6, r0
 80093b8:	d1d6      	bne.n	8009368 <_svfiprintf_r+0x174>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	065b      	lsls	r3, r3, #25
 80093be:	f53f af2d 	bmi.w	800921c <_svfiprintf_r+0x28>
 80093c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c4:	b01d      	add	sp, #116	; 0x74
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	ab03      	add	r3, sp, #12
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	462a      	mov	r2, r5
 80093d0:	4638      	mov	r0, r7
 80093d2:	4b06      	ldr	r3, [pc, #24]	; (80093ec <_svfiprintf_r+0x1f8>)
 80093d4:	a904      	add	r1, sp, #16
 80093d6:	f7fe f8fd 	bl	80075d4 <_printf_i>
 80093da:	e7eb      	b.n	80093b4 <_svfiprintf_r+0x1c0>
 80093dc:	0800aedc 	.word	0x0800aedc
 80093e0:	0800aee2 	.word	0x0800aee2
 80093e4:	0800aee6 	.word	0x0800aee6
 80093e8:	08007095 	.word	0x08007095
 80093ec:	08009141 	.word	0x08009141

080093f0 <__sflush_r>:
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f4:	4605      	mov	r5, r0
 80093f6:	0710      	lsls	r0, r2, #28
 80093f8:	460c      	mov	r4, r1
 80093fa:	d457      	bmi.n	80094ac <__sflush_r+0xbc>
 80093fc:	684b      	ldr	r3, [r1, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dc04      	bgt.n	800940c <__sflush_r+0x1c>
 8009402:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	dc01      	bgt.n	800940c <__sflush_r+0x1c>
 8009408:	2000      	movs	r0, #0
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940e:	2e00      	cmp	r6, #0
 8009410:	d0fa      	beq.n	8009408 <__sflush_r+0x18>
 8009412:	2300      	movs	r3, #0
 8009414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009418:	682f      	ldr	r7, [r5, #0]
 800941a:	6a21      	ldr	r1, [r4, #32]
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	d032      	beq.n	8009486 <__sflush_r+0x96>
 8009420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	075a      	lsls	r2, r3, #29
 8009426:	d505      	bpl.n	8009434 <__sflush_r+0x44>
 8009428:	6863      	ldr	r3, [r4, #4]
 800942a:	1ac0      	subs	r0, r0, r3
 800942c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800942e:	b10b      	cbz	r3, 8009434 <__sflush_r+0x44>
 8009430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009432:	1ac0      	subs	r0, r0, r3
 8009434:	2300      	movs	r3, #0
 8009436:	4602      	mov	r2, r0
 8009438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943a:	4628      	mov	r0, r5
 800943c:	6a21      	ldr	r1, [r4, #32]
 800943e:	47b0      	blx	r6
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	d106      	bne.n	8009454 <__sflush_r+0x64>
 8009446:	6829      	ldr	r1, [r5, #0]
 8009448:	291d      	cmp	r1, #29
 800944a:	d82b      	bhi.n	80094a4 <__sflush_r+0xb4>
 800944c:	4a28      	ldr	r2, [pc, #160]	; (80094f0 <__sflush_r+0x100>)
 800944e:	410a      	asrs	r2, r1
 8009450:	07d6      	lsls	r6, r2, #31
 8009452:	d427      	bmi.n	80094a4 <__sflush_r+0xb4>
 8009454:	2200      	movs	r2, #0
 8009456:	6062      	str	r2, [r4, #4]
 8009458:	6922      	ldr	r2, [r4, #16]
 800945a:	04d9      	lsls	r1, r3, #19
 800945c:	6022      	str	r2, [r4, #0]
 800945e:	d504      	bpl.n	800946a <__sflush_r+0x7a>
 8009460:	1c42      	adds	r2, r0, #1
 8009462:	d101      	bne.n	8009468 <__sflush_r+0x78>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b903      	cbnz	r3, 800946a <__sflush_r+0x7a>
 8009468:	6560      	str	r0, [r4, #84]	; 0x54
 800946a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946c:	602f      	str	r7, [r5, #0]
 800946e:	2900      	cmp	r1, #0
 8009470:	d0ca      	beq.n	8009408 <__sflush_r+0x18>
 8009472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009476:	4299      	cmp	r1, r3
 8009478:	d002      	beq.n	8009480 <__sflush_r+0x90>
 800947a:	4628      	mov	r0, r5
 800947c:	f7ff f9ec 	bl	8008858 <_free_r>
 8009480:	2000      	movs	r0, #0
 8009482:	6360      	str	r0, [r4, #52]	; 0x34
 8009484:	e7c1      	b.n	800940a <__sflush_r+0x1a>
 8009486:	2301      	movs	r3, #1
 8009488:	4628      	mov	r0, r5
 800948a:	47b0      	blx	r6
 800948c:	1c41      	adds	r1, r0, #1
 800948e:	d1c8      	bne.n	8009422 <__sflush_r+0x32>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0c5      	beq.n	8009422 <__sflush_r+0x32>
 8009496:	2b1d      	cmp	r3, #29
 8009498:	d001      	beq.n	800949e <__sflush_r+0xae>
 800949a:	2b16      	cmp	r3, #22
 800949c:	d101      	bne.n	80094a2 <__sflush_r+0xb2>
 800949e:	602f      	str	r7, [r5, #0]
 80094a0:	e7b2      	b.n	8009408 <__sflush_r+0x18>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	e7ae      	b.n	800940a <__sflush_r+0x1a>
 80094ac:	690f      	ldr	r7, [r1, #16]
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	d0aa      	beq.n	8009408 <__sflush_r+0x18>
 80094b2:	0793      	lsls	r3, r2, #30
 80094b4:	bf18      	it	ne
 80094b6:	2300      	movne	r3, #0
 80094b8:	680e      	ldr	r6, [r1, #0]
 80094ba:	bf08      	it	eq
 80094bc:	694b      	ldreq	r3, [r1, #20]
 80094be:	1bf6      	subs	r6, r6, r7
 80094c0:	600f      	str	r7, [r1, #0]
 80094c2:	608b      	str	r3, [r1, #8]
 80094c4:	2e00      	cmp	r6, #0
 80094c6:	dd9f      	ble.n	8009408 <__sflush_r+0x18>
 80094c8:	4633      	mov	r3, r6
 80094ca:	463a      	mov	r2, r7
 80094cc:	4628      	mov	r0, r5
 80094ce:	6a21      	ldr	r1, [r4, #32]
 80094d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80094d4:	47e0      	blx	ip
 80094d6:	2800      	cmp	r0, #0
 80094d8:	dc06      	bgt.n	80094e8 <__sflush_r+0xf8>
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	e790      	b.n	800940a <__sflush_r+0x1a>
 80094e8:	4407      	add	r7, r0
 80094ea:	1a36      	subs	r6, r6, r0
 80094ec:	e7ea      	b.n	80094c4 <__sflush_r+0xd4>
 80094ee:	bf00      	nop
 80094f0:	dfbffffe 	.word	0xdfbffffe

080094f4 <_fflush_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	690b      	ldr	r3, [r1, #16]
 80094f8:	4605      	mov	r5, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	b913      	cbnz	r3, 8009504 <_fflush_r+0x10>
 80094fe:	2500      	movs	r5, #0
 8009500:	4628      	mov	r0, r5
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	b118      	cbz	r0, 800950e <_fflush_r+0x1a>
 8009506:	6a03      	ldr	r3, [r0, #32]
 8009508:	b90b      	cbnz	r3, 800950e <_fflush_r+0x1a>
 800950a:	f7fe fa11 	bl	8007930 <__sinit>
 800950e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f3      	beq.n	80094fe <_fflush_r+0xa>
 8009516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009518:	07d0      	lsls	r0, r2, #31
 800951a:	d404      	bmi.n	8009526 <_fflush_r+0x32>
 800951c:	0599      	lsls	r1, r3, #22
 800951e:	d402      	bmi.n	8009526 <_fflush_r+0x32>
 8009520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009522:	f7fe fb1c 	bl	8007b5e <__retarget_lock_acquire_recursive>
 8009526:	4628      	mov	r0, r5
 8009528:	4621      	mov	r1, r4
 800952a:	f7ff ff61 	bl	80093f0 <__sflush_r>
 800952e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009530:	4605      	mov	r5, r0
 8009532:	07da      	lsls	r2, r3, #31
 8009534:	d4e4      	bmi.n	8009500 <_fflush_r+0xc>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	059b      	lsls	r3, r3, #22
 800953a:	d4e1      	bmi.n	8009500 <_fflush_r+0xc>
 800953c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953e:	f7fe fb0f 	bl	8007b60 <__retarget_lock_release_recursive>
 8009542:	e7dd      	b.n	8009500 <_fflush_r+0xc>

08009544 <memmove>:
 8009544:	4288      	cmp	r0, r1
 8009546:	b510      	push	{r4, lr}
 8009548:	eb01 0402 	add.w	r4, r1, r2
 800954c:	d902      	bls.n	8009554 <memmove+0x10>
 800954e:	4284      	cmp	r4, r0
 8009550:	4623      	mov	r3, r4
 8009552:	d807      	bhi.n	8009564 <memmove+0x20>
 8009554:	1e43      	subs	r3, r0, #1
 8009556:	42a1      	cmp	r1, r4
 8009558:	d008      	beq.n	800956c <memmove+0x28>
 800955a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800955e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009562:	e7f8      	b.n	8009556 <memmove+0x12>
 8009564:	4601      	mov	r1, r0
 8009566:	4402      	add	r2, r0
 8009568:	428a      	cmp	r2, r1
 800956a:	d100      	bne.n	800956e <memmove+0x2a>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009576:	e7f7      	b.n	8009568 <memmove+0x24>

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	2300      	movs	r3, #0
 800957c:	4d05      	ldr	r5, [pc, #20]	; (8009594 <_sbrk_r+0x1c>)
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f8 fa04 	bl	8001990 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000ad4 	.word	0x20000ad4

08009598 <memcpy>:
 8009598:	440a      	add	r2, r1
 800959a:	4291      	cmp	r1, r2
 800959c:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a0:	d100      	bne.n	80095a4 <memcpy+0xc>
 80095a2:	4770      	bx	lr
 80095a4:	b510      	push	{r4, lr}
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b0:	d1f9      	bne.n	80095a6 <memcpy+0xe>
 80095b2:	bd10      	pop	{r4, pc}

080095b4 <__assert_func>:
 80095b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095b6:	4614      	mov	r4, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <__assert_func+0x2c>)
 80095bc:	4605      	mov	r5, r0
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68d8      	ldr	r0, [r3, #12]
 80095c2:	b14c      	cbz	r4, 80095d8 <__assert_func+0x24>
 80095c4:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <__assert_func+0x30>)
 80095c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ca:	9100      	str	r1, [sp, #0]
 80095cc:	462b      	mov	r3, r5
 80095ce:	4906      	ldr	r1, [pc, #24]	; (80095e8 <__assert_func+0x34>)
 80095d0:	f000 f870 	bl	80096b4 <fiprintf>
 80095d4:	f000 f880 	bl	80096d8 <abort>
 80095d8:	4b04      	ldr	r3, [pc, #16]	; (80095ec <__assert_func+0x38>)
 80095da:	461c      	mov	r4, r3
 80095dc:	e7f3      	b.n	80095c6 <__assert_func+0x12>
 80095de:	bf00      	nop
 80095e0:	2000006c 	.word	0x2000006c
 80095e4:	0800aef7 	.word	0x0800aef7
 80095e8:	0800af04 	.word	0x0800af04
 80095ec:	0800af32 	.word	0x0800af32

080095f0 <_calloc_r>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	fba1 5402 	umull	r5, r4, r1, r2
 80095f6:	b934      	cbnz	r4, 8009606 <_calloc_r+0x16>
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7ff f99d 	bl	8008938 <_malloc_r>
 80095fe:	4606      	mov	r6, r0
 8009600:	b928      	cbnz	r0, 800960e <_calloc_r+0x1e>
 8009602:	4630      	mov	r0, r6
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	220c      	movs	r2, #12
 8009608:	2600      	movs	r6, #0
 800960a:	6002      	str	r2, [r0, #0]
 800960c:	e7f9      	b.n	8009602 <_calloc_r+0x12>
 800960e:	462a      	mov	r2, r5
 8009610:	4621      	mov	r1, r4
 8009612:	f7fe fa26 	bl	8007a62 <memset>
 8009616:	e7f4      	b.n	8009602 <_calloc_r+0x12>

08009618 <__ascii_mbtowc>:
 8009618:	b082      	sub	sp, #8
 800961a:	b901      	cbnz	r1, 800961e <__ascii_mbtowc+0x6>
 800961c:	a901      	add	r1, sp, #4
 800961e:	b142      	cbz	r2, 8009632 <__ascii_mbtowc+0x1a>
 8009620:	b14b      	cbz	r3, 8009636 <__ascii_mbtowc+0x1e>
 8009622:	7813      	ldrb	r3, [r2, #0]
 8009624:	600b      	str	r3, [r1, #0]
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	1e10      	subs	r0, r2, #0
 800962a:	bf18      	it	ne
 800962c:	2001      	movne	r0, #1
 800962e:	b002      	add	sp, #8
 8009630:	4770      	bx	lr
 8009632:	4610      	mov	r0, r2
 8009634:	e7fb      	b.n	800962e <__ascii_mbtowc+0x16>
 8009636:	f06f 0001 	mvn.w	r0, #1
 800963a:	e7f8      	b.n	800962e <__ascii_mbtowc+0x16>

0800963c <_realloc_r>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	4680      	mov	r8, r0
 8009642:	4614      	mov	r4, r2
 8009644:	460e      	mov	r6, r1
 8009646:	b921      	cbnz	r1, 8009652 <_realloc_r+0x16>
 8009648:	4611      	mov	r1, r2
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f7ff b973 	b.w	8008938 <_malloc_r>
 8009652:	b92a      	cbnz	r2, 8009660 <_realloc_r+0x24>
 8009654:	f7ff f900 	bl	8008858 <_free_r>
 8009658:	4625      	mov	r5, r4
 800965a:	4628      	mov	r0, r5
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	f000 f841 	bl	80096e6 <_malloc_usable_size_r>
 8009664:	4284      	cmp	r4, r0
 8009666:	4607      	mov	r7, r0
 8009668:	d802      	bhi.n	8009670 <_realloc_r+0x34>
 800966a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800966e:	d812      	bhi.n	8009696 <_realloc_r+0x5a>
 8009670:	4621      	mov	r1, r4
 8009672:	4640      	mov	r0, r8
 8009674:	f7ff f960 	bl	8008938 <_malloc_r>
 8009678:	4605      	mov	r5, r0
 800967a:	2800      	cmp	r0, #0
 800967c:	d0ed      	beq.n	800965a <_realloc_r+0x1e>
 800967e:	42bc      	cmp	r4, r7
 8009680:	4622      	mov	r2, r4
 8009682:	4631      	mov	r1, r6
 8009684:	bf28      	it	cs
 8009686:	463a      	movcs	r2, r7
 8009688:	f7ff ff86 	bl	8009598 <memcpy>
 800968c:	4631      	mov	r1, r6
 800968e:	4640      	mov	r0, r8
 8009690:	f7ff f8e2 	bl	8008858 <_free_r>
 8009694:	e7e1      	b.n	800965a <_realloc_r+0x1e>
 8009696:	4635      	mov	r5, r6
 8009698:	e7df      	b.n	800965a <_realloc_r+0x1e>

0800969a <__ascii_wctomb>:
 800969a:	4603      	mov	r3, r0
 800969c:	4608      	mov	r0, r1
 800969e:	b141      	cbz	r1, 80096b2 <__ascii_wctomb+0x18>
 80096a0:	2aff      	cmp	r2, #255	; 0xff
 80096a2:	d904      	bls.n	80096ae <__ascii_wctomb+0x14>
 80096a4:	228a      	movs	r2, #138	; 0x8a
 80096a6:	f04f 30ff 	mov.w	r0, #4294967295
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	4770      	bx	lr
 80096ae:	2001      	movs	r0, #1
 80096b0:	700a      	strb	r2, [r1, #0]
 80096b2:	4770      	bx	lr

080096b4 <fiprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	b503      	push	{r0, r1, lr}
 80096b8:	4601      	mov	r1, r0
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	4805      	ldr	r0, [pc, #20]	; (80096d4 <fiprintf+0x20>)
 80096be:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	f000 f83d 	bl	8009744 <_vfiprintf_r>
 80096ca:	b002      	add	sp, #8
 80096cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d0:	b003      	add	sp, #12
 80096d2:	4770      	bx	lr
 80096d4:	2000006c 	.word	0x2000006c

080096d8 <abort>:
 80096d8:	2006      	movs	r0, #6
 80096da:	b508      	push	{r3, lr}
 80096dc:	f000 fa0a 	bl	8009af4 <raise>
 80096e0:	2001      	movs	r0, #1
 80096e2:	f7f8 f8e2 	bl	80018aa <_exit>

080096e6 <_malloc_usable_size_r>:
 80096e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ea:	1f18      	subs	r0, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bfbc      	itt	lt
 80096f0:	580b      	ldrlt	r3, [r1, r0]
 80096f2:	18c0      	addlt	r0, r0, r3
 80096f4:	4770      	bx	lr

080096f6 <__sfputc_r>:
 80096f6:	6893      	ldr	r3, [r2, #8]
 80096f8:	b410      	push	{r4}
 80096fa:	3b01      	subs	r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	6093      	str	r3, [r2, #8]
 8009700:	da07      	bge.n	8009712 <__sfputc_r+0x1c>
 8009702:	6994      	ldr	r4, [r2, #24]
 8009704:	42a3      	cmp	r3, r4
 8009706:	db01      	blt.n	800970c <__sfputc_r+0x16>
 8009708:	290a      	cmp	r1, #10
 800970a:	d102      	bne.n	8009712 <__sfputc_r+0x1c>
 800970c:	bc10      	pop	{r4}
 800970e:	f000 b933 	b.w	8009978 <__swbuf_r>
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	1c58      	adds	r0, r3, #1
 8009716:	6010      	str	r0, [r2, #0]
 8009718:	7019      	strb	r1, [r3, #0]
 800971a:	4608      	mov	r0, r1
 800971c:	bc10      	pop	{r4}
 800971e:	4770      	bx	lr

08009720 <__sfputs_r>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	4614      	mov	r4, r2
 8009728:	18d5      	adds	r5, r2, r3
 800972a:	42ac      	cmp	r4, r5
 800972c:	d101      	bne.n	8009732 <__sfputs_r+0x12>
 800972e:	2000      	movs	r0, #0
 8009730:	e007      	b.n	8009742 <__sfputs_r+0x22>
 8009732:	463a      	mov	r2, r7
 8009734:	4630      	mov	r0, r6
 8009736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973a:	f7ff ffdc 	bl	80096f6 <__sfputc_r>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d1f3      	bne.n	800972a <__sfputs_r+0xa>
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009744 <_vfiprintf_r>:
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	460d      	mov	r5, r1
 800974a:	4614      	mov	r4, r2
 800974c:	4698      	mov	r8, r3
 800974e:	4606      	mov	r6, r0
 8009750:	b09d      	sub	sp, #116	; 0x74
 8009752:	b118      	cbz	r0, 800975c <_vfiprintf_r+0x18>
 8009754:	6a03      	ldr	r3, [r0, #32]
 8009756:	b90b      	cbnz	r3, 800975c <_vfiprintf_r+0x18>
 8009758:	f7fe f8ea 	bl	8007930 <__sinit>
 800975c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d405      	bmi.n	800976e <_vfiprintf_r+0x2a>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d402      	bmi.n	800976e <_vfiprintf_r+0x2a>
 8009768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800976a:	f7fe f9f8 	bl	8007b5e <__retarget_lock_acquire_recursive>
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	071b      	lsls	r3, r3, #28
 8009772:	d501      	bpl.n	8009778 <_vfiprintf_r+0x34>
 8009774:	692b      	ldr	r3, [r5, #16]
 8009776:	b99b      	cbnz	r3, 80097a0 <_vfiprintf_r+0x5c>
 8009778:	4629      	mov	r1, r5
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f93a 	bl	80099f4 <__swsetup_r>
 8009780:	b170      	cbz	r0, 80097a0 <_vfiprintf_r+0x5c>
 8009782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009784:	07dc      	lsls	r4, r3, #31
 8009786:	d504      	bpl.n	8009792 <_vfiprintf_r+0x4e>
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	b01d      	add	sp, #116	; 0x74
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	0598      	lsls	r0, r3, #22
 8009796:	d4f7      	bmi.n	8009788 <_vfiprintf_r+0x44>
 8009798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800979a:	f7fe f9e1 	bl	8007b60 <__retarget_lock_release_recursive>
 800979e:	e7f3      	b.n	8009788 <_vfiprintf_r+0x44>
 80097a0:	2300      	movs	r3, #0
 80097a2:	9309      	str	r3, [sp, #36]	; 0x24
 80097a4:	2320      	movs	r3, #32
 80097a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097aa:	2330      	movs	r3, #48	; 0x30
 80097ac:	f04f 0901 	mov.w	r9, #1
 80097b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009964 <_vfiprintf_r+0x220>
 80097b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097bc:	4623      	mov	r3, r4
 80097be:	469a      	mov	sl, r3
 80097c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c4:	b10a      	cbz	r2, 80097ca <_vfiprintf_r+0x86>
 80097c6:	2a25      	cmp	r2, #37	; 0x25
 80097c8:	d1f9      	bne.n	80097be <_vfiprintf_r+0x7a>
 80097ca:	ebba 0b04 	subs.w	fp, sl, r4
 80097ce:	d00b      	beq.n	80097e8 <_vfiprintf_r+0xa4>
 80097d0:	465b      	mov	r3, fp
 80097d2:	4622      	mov	r2, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ffa2 	bl	8009720 <__sfputs_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	f000 80a9 	beq.w	8009934 <_vfiprintf_r+0x1f0>
 80097e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e4:	445a      	add	r2, fp
 80097e6:	9209      	str	r2, [sp, #36]	; 0x24
 80097e8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80a1 	beq.w	8009934 <_vfiprintf_r+0x1f0>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295
 80097f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097fc:	f10a 0a01 	add.w	sl, sl, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009808:	931a      	str	r3, [sp, #104]	; 0x68
 800980a:	4654      	mov	r4, sl
 800980c:	2205      	movs	r2, #5
 800980e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009812:	4854      	ldr	r0, [pc, #336]	; (8009964 <_vfiprintf_r+0x220>)
 8009814:	f7fe f9a5 	bl	8007b62 <memchr>
 8009818:	9a04      	ldr	r2, [sp, #16]
 800981a:	b9d8      	cbnz	r0, 8009854 <_vfiprintf_r+0x110>
 800981c:	06d1      	lsls	r1, r2, #27
 800981e:	bf44      	itt	mi
 8009820:	2320      	movmi	r3, #32
 8009822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009826:	0713      	lsls	r3, r2, #28
 8009828:	bf44      	itt	mi
 800982a:	232b      	movmi	r3, #43	; 0x2b
 800982c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009830:	f89a 3000 	ldrb.w	r3, [sl]
 8009834:	2b2a      	cmp	r3, #42	; 0x2a
 8009836:	d015      	beq.n	8009864 <_vfiprintf_r+0x120>
 8009838:	4654      	mov	r4, sl
 800983a:	2000      	movs	r0, #0
 800983c:	f04f 0c0a 	mov.w	ip, #10
 8009840:	9a07      	ldr	r2, [sp, #28]
 8009842:	4621      	mov	r1, r4
 8009844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009848:	3b30      	subs	r3, #48	; 0x30
 800984a:	2b09      	cmp	r3, #9
 800984c:	d94d      	bls.n	80098ea <_vfiprintf_r+0x1a6>
 800984e:	b1b0      	cbz	r0, 800987e <_vfiprintf_r+0x13a>
 8009850:	9207      	str	r2, [sp, #28]
 8009852:	e014      	b.n	800987e <_vfiprintf_r+0x13a>
 8009854:	eba0 0308 	sub.w	r3, r0, r8
 8009858:	fa09 f303 	lsl.w	r3, r9, r3
 800985c:	4313      	orrs	r3, r2
 800985e:	46a2      	mov	sl, r4
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	e7d2      	b.n	800980a <_vfiprintf_r+0xc6>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	1d19      	adds	r1, r3, #4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	9103      	str	r1, [sp, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bfbb      	ittet	lt
 8009870:	425b      	neglt	r3, r3
 8009872:	f042 0202 	orrlt.w	r2, r2, #2
 8009876:	9307      	strge	r3, [sp, #28]
 8009878:	9307      	strlt	r3, [sp, #28]
 800987a:	bfb8      	it	lt
 800987c:	9204      	strlt	r2, [sp, #16]
 800987e:	7823      	ldrb	r3, [r4, #0]
 8009880:	2b2e      	cmp	r3, #46	; 0x2e
 8009882:	d10c      	bne.n	800989e <_vfiprintf_r+0x15a>
 8009884:	7863      	ldrb	r3, [r4, #1]
 8009886:	2b2a      	cmp	r3, #42	; 0x2a
 8009888:	d134      	bne.n	80098f4 <_vfiprintf_r+0x1b0>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	3402      	adds	r4, #2
 800988e:	1d1a      	adds	r2, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9203      	str	r2, [sp, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	bfb8      	it	lt
 8009898:	f04f 33ff 	movlt.w	r3, #4294967295
 800989c:	9305      	str	r3, [sp, #20]
 800989e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009968 <_vfiprintf_r+0x224>
 80098a2:	2203      	movs	r2, #3
 80098a4:	4650      	mov	r0, sl
 80098a6:	7821      	ldrb	r1, [r4, #0]
 80098a8:	f7fe f95b 	bl	8007b62 <memchr>
 80098ac:	b138      	cbz	r0, 80098be <_vfiprintf_r+0x17a>
 80098ae:	2240      	movs	r2, #64	; 0x40
 80098b0:	9b04      	ldr	r3, [sp, #16]
 80098b2:	eba0 000a 	sub.w	r0, r0, sl
 80098b6:	4082      	lsls	r2, r0
 80098b8:	4313      	orrs	r3, r2
 80098ba:	3401      	adds	r4, #1
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c2:	2206      	movs	r2, #6
 80098c4:	4829      	ldr	r0, [pc, #164]	; (800996c <_vfiprintf_r+0x228>)
 80098c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ca:	f7fe f94a 	bl	8007b62 <memchr>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d03f      	beq.n	8009952 <_vfiprintf_r+0x20e>
 80098d2:	4b27      	ldr	r3, [pc, #156]	; (8009970 <_vfiprintf_r+0x22c>)
 80098d4:	bb1b      	cbnz	r3, 800991e <_vfiprintf_r+0x1da>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	3307      	adds	r3, #7
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	3308      	adds	r3, #8
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e4:	443b      	add	r3, r7
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	e768      	b.n	80097bc <_vfiprintf_r+0x78>
 80098ea:	460c      	mov	r4, r1
 80098ec:	2001      	movs	r0, #1
 80098ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f2:	e7a6      	b.n	8009842 <_vfiprintf_r+0xfe>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f04f 0c0a 	mov.w	ip, #10
 80098fa:	4619      	mov	r1, r3
 80098fc:	3401      	adds	r4, #1
 80098fe:	9305      	str	r3, [sp, #20]
 8009900:	4620      	mov	r0, r4
 8009902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009906:	3a30      	subs	r2, #48	; 0x30
 8009908:	2a09      	cmp	r2, #9
 800990a:	d903      	bls.n	8009914 <_vfiprintf_r+0x1d0>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0c6      	beq.n	800989e <_vfiprintf_r+0x15a>
 8009910:	9105      	str	r1, [sp, #20]
 8009912:	e7c4      	b.n	800989e <_vfiprintf_r+0x15a>
 8009914:	4604      	mov	r4, r0
 8009916:	2301      	movs	r3, #1
 8009918:	fb0c 2101 	mla	r1, ip, r1, r2
 800991c:	e7f0      	b.n	8009900 <_vfiprintf_r+0x1bc>
 800991e:	ab03      	add	r3, sp, #12
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	462a      	mov	r2, r5
 8009924:	4630      	mov	r0, r6
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <_vfiprintf_r+0x230>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	f7fd fbb3 	bl	8007094 <_printf_float>
 800992e:	4607      	mov	r7, r0
 8009930:	1c78      	adds	r0, r7, #1
 8009932:	d1d6      	bne.n	80098e2 <_vfiprintf_r+0x19e>
 8009934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009936:	07d9      	lsls	r1, r3, #31
 8009938:	d405      	bmi.n	8009946 <_vfiprintf_r+0x202>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	059a      	lsls	r2, r3, #22
 800993e:	d402      	bmi.n	8009946 <_vfiprintf_r+0x202>
 8009940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009942:	f7fe f90d 	bl	8007b60 <__retarget_lock_release_recursive>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	065b      	lsls	r3, r3, #25
 800994a:	f53f af1d 	bmi.w	8009788 <_vfiprintf_r+0x44>
 800994e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009950:	e71c      	b.n	800978c <_vfiprintf_r+0x48>
 8009952:	ab03      	add	r3, sp, #12
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	462a      	mov	r2, r5
 8009958:	4630      	mov	r0, r6
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <_vfiprintf_r+0x230>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	f7fd fe39 	bl	80075d4 <_printf_i>
 8009962:	e7e4      	b.n	800992e <_vfiprintf_r+0x1ea>
 8009964:	0800aedc 	.word	0x0800aedc
 8009968:	0800aee2 	.word	0x0800aee2
 800996c:	0800aee6 	.word	0x0800aee6
 8009970:	08007095 	.word	0x08007095
 8009974:	08009721 	.word	0x08009721

08009978 <__swbuf_r>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	4614      	mov	r4, r2
 800997e:	4605      	mov	r5, r0
 8009980:	b118      	cbz	r0, 800998a <__swbuf_r+0x12>
 8009982:	6a03      	ldr	r3, [r0, #32]
 8009984:	b90b      	cbnz	r3, 800998a <__swbuf_r+0x12>
 8009986:	f7fd ffd3 	bl	8007930 <__sinit>
 800998a:	69a3      	ldr	r3, [r4, #24]
 800998c:	60a3      	str	r3, [r4, #8]
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	071a      	lsls	r2, r3, #28
 8009992:	d525      	bpl.n	80099e0 <__swbuf_r+0x68>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	b31b      	cbz	r3, 80099e0 <__swbuf_r+0x68>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	6922      	ldr	r2, [r4, #16]
 800999c:	b2f6      	uxtb	r6, r6
 800999e:	1a98      	subs	r0, r3, r2
 80099a0:	6963      	ldr	r3, [r4, #20]
 80099a2:	4637      	mov	r7, r6
 80099a4:	4283      	cmp	r3, r0
 80099a6:	dc04      	bgt.n	80099b2 <__swbuf_r+0x3a>
 80099a8:	4621      	mov	r1, r4
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7ff fda2 	bl	80094f4 <_fflush_r>
 80099b0:	b9e0      	cbnz	r0, 80099ec <__swbuf_r+0x74>
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	60a3      	str	r3, [r4, #8]
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	6022      	str	r2, [r4, #0]
 80099be:	701e      	strb	r6, [r3, #0]
 80099c0:	6962      	ldr	r2, [r4, #20]
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d004      	beq.n	80099d2 <__swbuf_r+0x5a>
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	07db      	lsls	r3, r3, #31
 80099cc:	d506      	bpl.n	80099dc <__swbuf_r+0x64>
 80099ce:	2e0a      	cmp	r6, #10
 80099d0:	d104      	bne.n	80099dc <__swbuf_r+0x64>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7ff fd8d 	bl	80094f4 <_fflush_r>
 80099da:	b938      	cbnz	r0, 80099ec <__swbuf_r+0x74>
 80099dc:	4638      	mov	r0, r7
 80099de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f806 	bl	80099f4 <__swsetup_r>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d0d5      	beq.n	8009998 <__swbuf_r+0x20>
 80099ec:	f04f 37ff 	mov.w	r7, #4294967295
 80099f0:	e7f4      	b.n	80099dc <__swbuf_r+0x64>
	...

080099f4 <__swsetup_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4b2a      	ldr	r3, [pc, #168]	; (8009aa0 <__swsetup_r+0xac>)
 80099f8:	4605      	mov	r5, r0
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	460c      	mov	r4, r1
 80099fe:	b118      	cbz	r0, 8009a08 <__swsetup_r+0x14>
 8009a00:	6a03      	ldr	r3, [r0, #32]
 8009a02:	b90b      	cbnz	r3, 8009a08 <__swsetup_r+0x14>
 8009a04:	f7fd ff94 	bl	8007930 <__sinit>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a0e:	0718      	lsls	r0, r3, #28
 8009a10:	d422      	bmi.n	8009a58 <__swsetup_r+0x64>
 8009a12:	06d9      	lsls	r1, r3, #27
 8009a14:	d407      	bmi.n	8009a26 <__swsetup_r+0x32>
 8009a16:	2309      	movs	r3, #9
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	e034      	b.n	8009a90 <__swsetup_r+0x9c>
 8009a26:	0758      	lsls	r0, r3, #29
 8009a28:	d512      	bpl.n	8009a50 <__swsetup_r+0x5c>
 8009a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2c:	b141      	cbz	r1, 8009a40 <__swsetup_r+0x4c>
 8009a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a32:	4299      	cmp	r1, r3
 8009a34:	d002      	beq.n	8009a3c <__swsetup_r+0x48>
 8009a36:	4628      	mov	r0, r5
 8009a38:	f7fe ff0e 	bl	8008858 <_free_r>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6063      	str	r3, [r4, #4]
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f043 0308 	orr.w	r3, r3, #8
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	b94b      	cbnz	r3, 8009a70 <__swsetup_r+0x7c>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a66:	d003      	beq.n	8009a70 <__swsetup_r+0x7c>
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f000 f883 	bl	8009b76 <__smakebuf_r>
 8009a70:	89a0      	ldrh	r0, [r4, #12]
 8009a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a76:	f010 0301 	ands.w	r3, r0, #1
 8009a7a:	d00a      	beq.n	8009a92 <__swsetup_r+0x9e>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60a3      	str	r3, [r4, #8]
 8009a80:	6963      	ldr	r3, [r4, #20]
 8009a82:	425b      	negs	r3, r3
 8009a84:	61a3      	str	r3, [r4, #24]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	b943      	cbnz	r3, 8009a9c <__swsetup_r+0xa8>
 8009a8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a8e:	d1c4      	bne.n	8009a1a <__swsetup_r+0x26>
 8009a90:	bd38      	pop	{r3, r4, r5, pc}
 8009a92:	0781      	lsls	r1, r0, #30
 8009a94:	bf58      	it	pl
 8009a96:	6963      	ldrpl	r3, [r4, #20]
 8009a98:	60a3      	str	r3, [r4, #8]
 8009a9a:	e7f4      	b.n	8009a86 <__swsetup_r+0x92>
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e7f7      	b.n	8009a90 <__swsetup_r+0x9c>
 8009aa0:	2000006c 	.word	0x2000006c

08009aa4 <_raise_r>:
 8009aa4:	291f      	cmp	r1, #31
 8009aa6:	b538      	push	{r3, r4, r5, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	d904      	bls.n	8009ab8 <_raise_r+0x14>
 8009aae:	2316      	movs	r3, #22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009aba:	b112      	cbz	r2, 8009ac2 <_raise_r+0x1e>
 8009abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <_raise_r+0x32>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f830 	bl	8009b28 <_getpid_r>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad2:	f000 b817 	b.w	8009b04 <_kill_r>
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d00a      	beq.n	8009af0 <_raise_r+0x4c>
 8009ada:	1c59      	adds	r1, r3, #1
 8009adc:	d103      	bne.n	8009ae6 <_raise_r+0x42>
 8009ade:	2316      	movs	r3, #22
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e7e7      	b.n	8009ab6 <_raise_r+0x12>
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	4628      	mov	r0, r5
 8009aea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aee:	4798      	blx	r3
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7e0      	b.n	8009ab6 <_raise_r+0x12>

08009af4 <raise>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <raise+0xc>)
 8009af6:	4601      	mov	r1, r0
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f7ff bfd3 	b.w	8009aa4 <_raise_r>
 8009afe:	bf00      	nop
 8009b00:	2000006c 	.word	0x2000006c

08009b04 <_kill_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	2300      	movs	r3, #0
 8009b08:	4d06      	ldr	r5, [pc, #24]	; (8009b24 <_kill_r+0x20>)
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f7f7 feba 	bl	800188a <_kill>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d102      	bne.n	8009b20 <_kill_r+0x1c>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	b103      	cbz	r3, 8009b20 <_kill_r+0x1c>
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	20000ad4 	.word	0x20000ad4

08009b28 <_getpid_r>:
 8009b28:	f7f7 bea8 	b.w	800187c <_getpid>

08009b2c <__swhatbuf_r>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	4615      	mov	r5, r2
 8009b36:	2900      	cmp	r1, #0
 8009b38:	461e      	mov	r6, r3
 8009b3a:	b096      	sub	sp, #88	; 0x58
 8009b3c:	da0c      	bge.n	8009b58 <__swhatbuf_r+0x2c>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	2100      	movs	r1, #0
 8009b42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b46:	bf0c      	ite	eq
 8009b48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b4c:	2340      	movne	r3, #64	; 0x40
 8009b4e:	2000      	movs	r0, #0
 8009b50:	6031      	str	r1, [r6, #0]
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	b016      	add	sp, #88	; 0x58
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	466a      	mov	r2, sp
 8009b5a:	f000 f849 	bl	8009bf0 <_fstat_r>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	dbed      	blt.n	8009b3e <__swhatbuf_r+0x12>
 8009b62:	9901      	ldr	r1, [sp, #4]
 8009b64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b6c:	4259      	negs	r1, r3
 8009b6e:	4159      	adcs	r1, r3
 8009b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b74:	e7eb      	b.n	8009b4e <__swhatbuf_r+0x22>

08009b76 <__smakebuf_r>:
 8009b76:	898b      	ldrh	r3, [r1, #12]
 8009b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b7a:	079d      	lsls	r5, r3, #30
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	d507      	bpl.n	8009b92 <__smakebuf_r+0x1c>
 8009b82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	6163      	str	r3, [r4, #20]
 8009b8e:	b002      	add	sp, #8
 8009b90:	bd70      	pop	{r4, r5, r6, pc}
 8009b92:	466a      	mov	r2, sp
 8009b94:	ab01      	add	r3, sp, #4
 8009b96:	f7ff ffc9 	bl	8009b2c <__swhatbuf_r>
 8009b9a:	9900      	ldr	r1, [sp, #0]
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7fe feca 	bl	8008938 <_malloc_r>
 8009ba4:	b948      	cbnz	r0, 8009bba <__smakebuf_r+0x44>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	059a      	lsls	r2, r3, #22
 8009bac:	d4ef      	bmi.n	8009b8e <__smakebuf_r+0x18>
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0302 	orr.w	r3, r3, #2
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	e7e3      	b.n	8009b82 <__smakebuf_r+0xc>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	6020      	str	r0, [r4, #0]
 8009bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	9b00      	ldr	r3, [sp, #0]
 8009bc6:	6120      	str	r0, [r4, #16]
 8009bc8:	6163      	str	r3, [r4, #20]
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	b15b      	cbz	r3, 8009be6 <__smakebuf_r+0x70>
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd4:	f000 f81e 	bl	8009c14 <_isatty_r>
 8009bd8:	b128      	cbz	r0, 8009be6 <__smakebuf_r+0x70>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	f043 0301 	orr.w	r3, r3, #1
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	431d      	orrs	r5, r3
 8009bea:	81a5      	strh	r5, [r4, #12]
 8009bec:	e7cf      	b.n	8009b8e <__smakebuf_r+0x18>
	...

08009bf0 <_fstat_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	4d06      	ldr	r5, [pc, #24]	; (8009c10 <_fstat_r+0x20>)
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	f7f7 fea2 	bl	8001946 <_fstat>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	d102      	bne.n	8009c0c <_fstat_r+0x1c>
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	b103      	cbz	r3, 8009c0c <_fstat_r+0x1c>
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	bd38      	pop	{r3, r4, r5, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000ad4 	.word	0x20000ad4

08009c14 <_isatty_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	2300      	movs	r3, #0
 8009c18:	4d05      	ldr	r5, [pc, #20]	; (8009c30 <_isatty_r+0x1c>)
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	602b      	str	r3, [r5, #0]
 8009c20:	f7f7 fea0 	bl	8001964 <_isatty>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_isatty_r+0x1a>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_isatty_r+0x1a>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20000ad4 	.word	0x20000ad4

08009c34 <pow>:
 8009c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c38:	4614      	mov	r4, r2
 8009c3a:	461d      	mov	r5, r3
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4689      	mov	r9, r1
 8009c40:	f000 f866 	bl	8009d10 <__ieee754_pow>
 8009c44:	4622      	mov	r2, r4
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	f7f6 fee6 	bl	8000a20 <__aeabi_dcmpun>
 8009c54:	bbc8      	cbnz	r0, 8009cca <pow+0x96>
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f6 fead 	bl	80009bc <__aeabi_dcmpeq>
 8009c62:	b1b8      	cbz	r0, 8009c94 <pow+0x60>
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fea6 	bl	80009bc <__aeabi_dcmpeq>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d141      	bne.n	8009cf8 <pow+0xc4>
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f000 f844 	bl	8009d04 <finite>
 8009c7c:	b328      	cbz	r0, 8009cca <pow+0x96>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2300      	movs	r3, #0
 8009c82:	4620      	mov	r0, r4
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7f6 fea3 	bl	80009d0 <__aeabi_dcmplt>
 8009c8a:	b1f0      	cbz	r0, 8009cca <pow+0x96>
 8009c8c:	f7fd ff3c 	bl	8007b08 <__errno>
 8009c90:	2322      	movs	r3, #34	; 0x22
 8009c92:	e019      	b.n	8009cc8 <pow+0x94>
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f000 f834 	bl	8009d04 <finite>
 8009c9c:	b9c8      	cbnz	r0, 8009cd2 <pow+0x9e>
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f000 f82f 	bl	8009d04 <finite>
 8009ca6:	b1a0      	cbz	r0, 8009cd2 <pow+0x9e>
 8009ca8:	4620      	mov	r0, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	f000 f82a 	bl	8009d04 <finite>
 8009cb0:	b178      	cbz	r0, 8009cd2 <pow+0x9e>
 8009cb2:	4632      	mov	r2, r6
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	4639      	mov	r1, r7
 8009cba:	f7f6 feb1 	bl	8000a20 <__aeabi_dcmpun>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0e4      	beq.n	8009c8c <pow+0x58>
 8009cc2:	f7fd ff21 	bl	8007b08 <__errno>
 8009cc6:	2321      	movs	r3, #33	; 0x21
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	4639      	mov	r1, r7
 8009cda:	f7f6 fe6f 	bl	80009bc <__aeabi_dcmpeq>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d0f3      	beq.n	8009cca <pow+0x96>
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	f000 f80d 	bl	8009d04 <finite>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0ed      	beq.n	8009cca <pow+0x96>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f000 f807 	bl	8009d04 <finite>
 8009cf6:	e7c8      	b.n	8009c8a <pow+0x56>
 8009cf8:	2600      	movs	r6, #0
 8009cfa:	4f01      	ldr	r7, [pc, #4]	; (8009d00 <pow+0xcc>)
 8009cfc:	e7e5      	b.n	8009cca <pow+0x96>
 8009cfe:	bf00      	nop
 8009d00:	3ff00000 	.word	0x3ff00000

08009d04 <finite>:
 8009d04:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009d08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d0c:	0fc0      	lsrs	r0, r0, #31
 8009d0e:	4770      	bx	lr

08009d10 <__ieee754_pow>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	b093      	sub	sp, #76	; 0x4c
 8009d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d1a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009d1e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009d22:	4689      	mov	r9, r1
 8009d24:	ea56 0102 	orrs.w	r1, r6, r2
 8009d28:	4680      	mov	r8, r0
 8009d2a:	d111      	bne.n	8009d50 <__ieee754_pow+0x40>
 8009d2c:	1803      	adds	r3, r0, r0
 8009d2e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009d32:	4152      	adcs	r2, r2
 8009d34:	4299      	cmp	r1, r3
 8009d36:	4b82      	ldr	r3, [pc, #520]	; (8009f40 <__ieee754_pow+0x230>)
 8009d38:	4193      	sbcs	r3, r2
 8009d3a:	f080 84ba 	bcs.w	800a6b2 <__ieee754_pow+0x9a2>
 8009d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f6 fa1b 	bl	8000180 <__adddf3>
 8009d4a:	4683      	mov	fp, r0
 8009d4c:	468c      	mov	ip, r1
 8009d4e:	e06f      	b.n	8009e30 <__ieee754_pow+0x120>
 8009d50:	4b7c      	ldr	r3, [pc, #496]	; (8009f44 <__ieee754_pow+0x234>)
 8009d52:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009d56:	429c      	cmp	r4, r3
 8009d58:	464d      	mov	r5, r9
 8009d5a:	4682      	mov	sl, r0
 8009d5c:	dc06      	bgt.n	8009d6c <__ieee754_pow+0x5c>
 8009d5e:	d101      	bne.n	8009d64 <__ieee754_pow+0x54>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d1ec      	bne.n	8009d3e <__ieee754_pow+0x2e>
 8009d64:	429e      	cmp	r6, r3
 8009d66:	dc01      	bgt.n	8009d6c <__ieee754_pow+0x5c>
 8009d68:	d10f      	bne.n	8009d8a <__ieee754_pow+0x7a>
 8009d6a:	b172      	cbz	r2, 8009d8a <__ieee754_pow+0x7a>
 8009d6c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009d70:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009d74:	ea55 050a 	orrs.w	r5, r5, sl
 8009d78:	d1e1      	bne.n	8009d3e <__ieee754_pow+0x2e>
 8009d7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d7e:	18db      	adds	r3, r3, r3
 8009d80:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009d84:	4152      	adcs	r2, r2
 8009d86:	429d      	cmp	r5, r3
 8009d88:	e7d5      	b.n	8009d36 <__ieee754_pow+0x26>
 8009d8a:	2d00      	cmp	r5, #0
 8009d8c:	da39      	bge.n	8009e02 <__ieee754_pow+0xf2>
 8009d8e:	4b6e      	ldr	r3, [pc, #440]	; (8009f48 <__ieee754_pow+0x238>)
 8009d90:	429e      	cmp	r6, r3
 8009d92:	dc52      	bgt.n	8009e3a <__ieee754_pow+0x12a>
 8009d94:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	f340 849d 	ble.w	800a6d8 <__ieee754_pow+0x9c8>
 8009d9e:	1533      	asrs	r3, r6, #20
 8009da0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009da4:	2b14      	cmp	r3, #20
 8009da6:	dd0f      	ble.n	8009dc8 <__ieee754_pow+0xb8>
 8009da8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009dac:	fa22 f103 	lsr.w	r1, r2, r3
 8009db0:	fa01 f303 	lsl.w	r3, r1, r3
 8009db4:	4293      	cmp	r3, r2
 8009db6:	f040 848f 	bne.w	800a6d8 <__ieee754_pow+0x9c8>
 8009dba:	f001 0101 	and.w	r1, r1, #1
 8009dbe:	f1c1 0302 	rsb	r3, r1, #2
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	b182      	cbz	r2, 8009de8 <__ieee754_pow+0xd8>
 8009dc6:	e05d      	b.n	8009e84 <__ieee754_pow+0x174>
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	d159      	bne.n	8009e80 <__ieee754_pow+0x170>
 8009dcc:	f1c3 0314 	rsb	r3, r3, #20
 8009dd0:	fa46 f103 	asr.w	r1, r6, r3
 8009dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd8:	42b3      	cmp	r3, r6
 8009dda:	f040 847a 	bne.w	800a6d2 <__ieee754_pow+0x9c2>
 8009dde:	f001 0101 	and.w	r1, r1, #1
 8009de2:	f1c1 0302 	rsb	r3, r1, #2
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4b58      	ldr	r3, [pc, #352]	; (8009f4c <__ieee754_pow+0x23c>)
 8009dea:	429e      	cmp	r6, r3
 8009dec:	d132      	bne.n	8009e54 <__ieee754_pow+0x144>
 8009dee:	2f00      	cmp	r7, #0
 8009df0:	f280 846b 	bge.w	800a6ca <__ieee754_pow+0x9ba>
 8009df4:	4642      	mov	r2, r8
 8009df6:	464b      	mov	r3, r9
 8009df8:	2000      	movs	r0, #0
 8009dfa:	4954      	ldr	r1, [pc, #336]	; (8009f4c <__ieee754_pow+0x23c>)
 8009dfc:	f7f6 fca0 	bl	8000740 <__aeabi_ddiv>
 8009e00:	e7a3      	b.n	8009d4a <__ieee754_pow+0x3a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	d13c      	bne.n	8009e84 <__ieee754_pow+0x174>
 8009e0a:	4b4e      	ldr	r3, [pc, #312]	; (8009f44 <__ieee754_pow+0x234>)
 8009e0c:	429e      	cmp	r6, r3
 8009e0e:	d1eb      	bne.n	8009de8 <__ieee754_pow+0xd8>
 8009e10:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e14:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e18:	ea53 030a 	orrs.w	r3, r3, sl
 8009e1c:	f000 8449 	beq.w	800a6b2 <__ieee754_pow+0x9a2>
 8009e20:	4b4b      	ldr	r3, [pc, #300]	; (8009f50 <__ieee754_pow+0x240>)
 8009e22:	429c      	cmp	r4, r3
 8009e24:	dd0b      	ble.n	8009e3e <__ieee754_pow+0x12e>
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	f2c0 8449 	blt.w	800a6be <__ieee754_pow+0x9ae>
 8009e2c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009e30:	4658      	mov	r0, fp
 8009e32:	4661      	mov	r1, ip
 8009e34:	b013      	add	sp, #76	; 0x4c
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e7e2      	b.n	8009e04 <__ieee754_pow+0xf4>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	f04f 0b00 	mov.w	fp, #0
 8009e44:	f04f 0c00 	mov.w	ip, #0
 8009e48:	daf2      	bge.n	8009e30 <__ieee754_pow+0x120>
 8009e4a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009e4e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009e52:	e7ed      	b.n	8009e30 <__ieee754_pow+0x120>
 8009e54:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009e58:	d106      	bne.n	8009e68 <__ieee754_pow+0x158>
 8009e5a:	4642      	mov	r2, r8
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	4640      	mov	r0, r8
 8009e60:	4649      	mov	r1, r9
 8009e62:	f7f6 fb43 	bl	80004ec <__aeabi_dmul>
 8009e66:	e770      	b.n	8009d4a <__ieee754_pow+0x3a>
 8009e68:	4b3a      	ldr	r3, [pc, #232]	; (8009f54 <__ieee754_pow+0x244>)
 8009e6a:	429f      	cmp	r7, r3
 8009e6c:	d10a      	bne.n	8009e84 <__ieee754_pow+0x174>
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	db08      	blt.n	8009e84 <__ieee754_pow+0x174>
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	b013      	add	sp, #76	; 0x4c
 8009e78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	f000 bd0a 	b.w	800a894 <__ieee754_sqrt>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f000 fc58 	bl	800a73c <fabs>
 8009e8c:	4683      	mov	fp, r0
 8009e8e:	468c      	mov	ip, r1
 8009e90:	f1ba 0f00 	cmp.w	sl, #0
 8009e94:	d128      	bne.n	8009ee8 <__ieee754_pow+0x1d8>
 8009e96:	b124      	cbz	r4, 8009ea2 <__ieee754_pow+0x192>
 8009e98:	4b2c      	ldr	r3, [pc, #176]	; (8009f4c <__ieee754_pow+0x23c>)
 8009e9a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d122      	bne.n	8009ee8 <__ieee754_pow+0x1d8>
 8009ea2:	2f00      	cmp	r7, #0
 8009ea4:	da07      	bge.n	8009eb6 <__ieee754_pow+0x1a6>
 8009ea6:	465a      	mov	r2, fp
 8009ea8:	4663      	mov	r3, ip
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4927      	ldr	r1, [pc, #156]	; (8009f4c <__ieee754_pow+0x23c>)
 8009eae:	f7f6 fc47 	bl	8000740 <__aeabi_ddiv>
 8009eb2:	4683      	mov	fp, r0
 8009eb4:	468c      	mov	ip, r1
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	daba      	bge.n	8009e30 <__ieee754_pow+0x120>
 8009eba:	9b00      	ldr	r3, [sp, #0]
 8009ebc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ec0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ec4:	431c      	orrs	r4, r3
 8009ec6:	d108      	bne.n	8009eda <__ieee754_pow+0x1ca>
 8009ec8:	465a      	mov	r2, fp
 8009eca:	4663      	mov	r3, ip
 8009ecc:	4658      	mov	r0, fp
 8009ece:	4661      	mov	r1, ip
 8009ed0:	f7f6 f954 	bl	800017c <__aeabi_dsub>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	e790      	b.n	8009dfc <__ieee754_pow+0xec>
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d1a7      	bne.n	8009e30 <__ieee754_pow+0x120>
 8009ee0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009ee4:	469c      	mov	ip, r3
 8009ee6:	e7a3      	b.n	8009e30 <__ieee754_pow+0x120>
 8009ee8:	0feb      	lsrs	r3, r5, #31
 8009eea:	3b01      	subs	r3, #1
 8009eec:	930c      	str	r3, [sp, #48]	; 0x30
 8009eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ef0:	9b00      	ldr	r3, [sp, #0]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	d104      	bne.n	8009f00 <__ieee754_pow+0x1f0>
 8009ef6:	4642      	mov	r2, r8
 8009ef8:	464b      	mov	r3, r9
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	e7e7      	b.n	8009ed0 <__ieee754_pow+0x1c0>
 8009f00:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <__ieee754_pow+0x248>)
 8009f02:	429e      	cmp	r6, r3
 8009f04:	f340 80f6 	ble.w	800a0f4 <__ieee754_pow+0x3e4>
 8009f08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f0c:	429e      	cmp	r6, r3
 8009f0e:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <__ieee754_pow+0x240>)
 8009f10:	dd09      	ble.n	8009f26 <__ieee754_pow+0x216>
 8009f12:	429c      	cmp	r4, r3
 8009f14:	dc0c      	bgt.n	8009f30 <__ieee754_pow+0x220>
 8009f16:	2f00      	cmp	r7, #0
 8009f18:	da0c      	bge.n	8009f34 <__ieee754_pow+0x224>
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	b013      	add	sp, #76	; 0x4c
 8009f1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f22:	f000 bcb2 	b.w	800a88a <__math_oflow>
 8009f26:	429c      	cmp	r4, r3
 8009f28:	dbf5      	blt.n	8009f16 <__ieee754_pow+0x206>
 8009f2a:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <__ieee754_pow+0x23c>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	dd15      	ble.n	8009f5c <__ieee754_pow+0x24c>
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	dcf2      	bgt.n	8009f1a <__ieee754_pow+0x20a>
 8009f34:	2000      	movs	r0, #0
 8009f36:	b013      	add	sp, #76	; 0x4c
 8009f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	f000 bca0 	b.w	800a880 <__math_uflow>
 8009f40:	fff00000 	.word	0xfff00000
 8009f44:	7ff00000 	.word	0x7ff00000
 8009f48:	433fffff 	.word	0x433fffff
 8009f4c:	3ff00000 	.word	0x3ff00000
 8009f50:	3fefffff 	.word	0x3fefffff
 8009f54:	3fe00000 	.word	0x3fe00000
 8009f58:	41e00000 	.word	0x41e00000
 8009f5c:	4661      	mov	r1, ip
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4658      	mov	r0, fp
 8009f62:	4b5f      	ldr	r3, [pc, #380]	; (800a0e0 <__ieee754_pow+0x3d0>)
 8009f64:	f7f6 f90a 	bl	800017c <__aeabi_dsub>
 8009f68:	a355      	add	r3, pc, #340	; (adr r3, 800a0c0 <__ieee754_pow+0x3b0>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4604      	mov	r4, r0
 8009f70:	460d      	mov	r5, r1
 8009f72:	f7f6 fabb 	bl	80004ec <__aeabi_dmul>
 8009f76:	a354      	add	r3, pc, #336	; (adr r3, 800a0c8 <__ieee754_pow+0x3b8>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	4620      	mov	r0, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 fab2 	bl	80004ec <__aeabi_dmul>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	468b      	mov	fp, r1
 8009f8e:	4620      	mov	r0, r4
 8009f90:	4629      	mov	r1, r5
 8009f92:	4b54      	ldr	r3, [pc, #336]	; (800a0e4 <__ieee754_pow+0x3d4>)
 8009f94:	f7f6 faaa 	bl	80004ec <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	a14c      	add	r1, pc, #304	; (adr r1, 800a0d0 <__ieee754_pow+0x3c0>)
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	f7f6 f8eb 	bl	800017c <__aeabi_dsub>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	f7f6 fa9f 	bl	80004ec <__aeabi_dmul>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	494c      	ldr	r1, [pc, #304]	; (800a0e8 <__ieee754_pow+0x3d8>)
 8009fb6:	f7f6 f8e1 	bl	800017c <__aeabi_dsub>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	4680      	mov	r8, r0
 8009fc0:	4689      	mov	r9, r1
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7f6 fa91 	bl	80004ec <__aeabi_dmul>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 fa8b 	bl	80004ec <__aeabi_dmul>
 8009fd6:	a340      	add	r3, pc, #256	; (adr r3, 800a0d8 <__ieee754_pow+0x3c8>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 fa86 	bl	80004ec <__aeabi_dmul>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	4659      	mov	r1, fp
 8009fe8:	f7f6 f8c8 	bl	800017c <__aeabi_dsub>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f7f6 f8c2 	bl	8000180 <__adddf3>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	4632      	mov	r2, r6
 800a000:	463b      	mov	r3, r7
 800a002:	4682      	mov	sl, r0
 800a004:	468b      	mov	fp, r1
 800a006:	f7f6 f8b9 	bl	800017c <__aeabi_dsub>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 f8b3 	bl	800017c <__aeabi_dsub>
 800a016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a01e:	3b01      	subs	r3, #1
 800a020:	4313      	orrs	r3, r2
 800a022:	f04f 0600 	mov.w	r6, #0
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	bf0c      	ite	eq
 800a02c:	4b2f      	ldreq	r3, [pc, #188]	; (800a0ec <__ieee754_pow+0x3dc>)
 800a02e:	4b2c      	ldrne	r3, [pc, #176]	; (800a0e0 <__ieee754_pow+0x3d0>)
 800a030:	4604      	mov	r4, r0
 800a032:	460d      	mov	r5, r1
 800a034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a038:	e9cd 2300 	strd	r2, r3, [sp]
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	f7f6 f89c 	bl	800017c <__aeabi_dsub>
 800a044:	4652      	mov	r2, sl
 800a046:	465b      	mov	r3, fp
 800a048:	f7f6 fa50 	bl	80004ec <__aeabi_dmul>
 800a04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a050:	4680      	mov	r8, r0
 800a052:	4689      	mov	r9, r1
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fa48 	bl	80004ec <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4640      	mov	r0, r8
 800a062:	4649      	mov	r1, r9
 800a064:	f7f6 f88c 	bl	8000180 <__adddf3>
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	4680      	mov	r8, r0
 800a06e:	4689      	mov	r9, r1
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	f7f6 fa3a 	bl	80004ec <__aeabi_dmul>
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	460b      	mov	r3, r1
 800a07e:	4602      	mov	r2, r0
 800a080:	4649      	mov	r1, r9
 800a082:	4640      	mov	r0, r8
 800a084:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a088:	f7f6 f87a 	bl	8000180 <__adddf3>
 800a08c:	4b18      	ldr	r3, [pc, #96]	; (800a0f0 <__ieee754_pow+0x3e0>)
 800a08e:	4682      	mov	sl, r0
 800a090:	4299      	cmp	r1, r3
 800a092:	460f      	mov	r7, r1
 800a094:	460e      	mov	r6, r1
 800a096:	f340 82e7 	ble.w	800a668 <__ieee754_pow+0x958>
 800a09a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a09e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0a2:	4303      	orrs	r3, r0
 800a0a4:	f000 81e2 	beq.w	800a46c <__ieee754_pow+0x75c>
 800a0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f7f6 fc8e 	bl	80009d0 <__aeabi_dcmplt>
 800a0b4:	3800      	subs	r0, #0
 800a0b6:	bf18      	it	ne
 800a0b8:	2001      	movne	r0, #1
 800a0ba:	e72f      	b.n	8009f1c <__ieee754_pow+0x20c>
 800a0bc:	f3af 8000 	nop.w
 800a0c0:	60000000 	.word	0x60000000
 800a0c4:	3ff71547 	.word	0x3ff71547
 800a0c8:	f85ddf44 	.word	0xf85ddf44
 800a0cc:	3e54ae0b 	.word	0x3e54ae0b
 800a0d0:	55555555 	.word	0x55555555
 800a0d4:	3fd55555 	.word	0x3fd55555
 800a0d8:	652b82fe 	.word	0x652b82fe
 800a0dc:	3ff71547 	.word	0x3ff71547
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	3fd00000 	.word	0x3fd00000
 800a0e8:	3fe00000 	.word	0x3fe00000
 800a0ec:	bff00000 	.word	0xbff00000
 800a0f0:	408fffff 	.word	0x408fffff
 800a0f4:	4bd4      	ldr	r3, [pc, #848]	; (800a448 <__ieee754_pow+0x738>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	402b      	ands	r3, r5
 800a0fa:	b943      	cbnz	r3, 800a10e <__ieee754_pow+0x3fe>
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	4661      	mov	r1, ip
 800a100:	4bd2      	ldr	r3, [pc, #840]	; (800a44c <__ieee754_pow+0x73c>)
 800a102:	f7f6 f9f3 	bl	80004ec <__aeabi_dmul>
 800a106:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a10a:	4683      	mov	fp, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	1523      	asrs	r3, r4, #20
 800a110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a114:	4413      	add	r3, r2
 800a116:	930b      	str	r3, [sp, #44]	; 0x2c
 800a118:	4bcd      	ldr	r3, [pc, #820]	; (800a450 <__ieee754_pow+0x740>)
 800a11a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a11e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a122:	429c      	cmp	r4, r3
 800a124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a128:	dd08      	ble.n	800a13c <__ieee754_pow+0x42c>
 800a12a:	4bca      	ldr	r3, [pc, #808]	; (800a454 <__ieee754_pow+0x744>)
 800a12c:	429c      	cmp	r4, r3
 800a12e:	f340 8164 	ble.w	800a3fa <__ieee754_pow+0x6ea>
 800a132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a134:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a138:	3301      	adds	r3, #1
 800a13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a13c:	2600      	movs	r6, #0
 800a13e:	00f3      	lsls	r3, r6, #3
 800a140:	930d      	str	r3, [sp, #52]	; 0x34
 800a142:	4bc5      	ldr	r3, [pc, #788]	; (800a458 <__ieee754_pow+0x748>)
 800a144:	4658      	mov	r0, fp
 800a146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a14a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a14e:	4629      	mov	r1, r5
 800a150:	461a      	mov	r2, r3
 800a152:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a156:	4623      	mov	r3, r4
 800a158:	f7f6 f810 	bl	800017c <__aeabi_dsub>
 800a15c:	46da      	mov	sl, fp
 800a15e:	462b      	mov	r3, r5
 800a160:	4652      	mov	r2, sl
 800a162:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a16a:	f7f6 f809 	bl	8000180 <__adddf3>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	2000      	movs	r0, #0
 800a174:	49b9      	ldr	r1, [pc, #740]	; (800a45c <__ieee754_pow+0x74c>)
 800a176:	f7f6 fae3 	bl	8000740 <__aeabi_ddiv>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a182:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a186:	f7f6 f9b1 	bl	80004ec <__aeabi_dmul>
 800a18a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a18e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a192:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a196:	2300      	movs	r3, #0
 800a198:	2200      	movs	r2, #0
 800a19a:	46ab      	mov	fp, r5
 800a19c:	106d      	asrs	r5, r5, #1
 800a19e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a1ac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	461d      	mov	r5, r3
 800a1b8:	f7f6 f998 	bl	80004ec <__aeabi_dmul>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a1c4:	f7f5 ffda 	bl	800017c <__aeabi_dsub>
 800a1c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f5 ffd2 	bl	800017c <__aeabi_dsub>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f5 ffcc 	bl	800017c <__aeabi_dsub>
 800a1e4:	4642      	mov	r2, r8
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	f7f6 f980 	bl	80004ec <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f5 ffc2 	bl	800017c <__aeabi_dsub>
 800a1f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1fc:	f7f6 f976 	bl	80004ec <__aeabi_dmul>
 800a200:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a204:	4682      	mov	sl, r0
 800a206:	468b      	mov	fp, r1
 800a208:	4610      	mov	r0, r2
 800a20a:	4619      	mov	r1, r3
 800a20c:	f7f6 f96e 	bl	80004ec <__aeabi_dmul>
 800a210:	a37b      	add	r3, pc, #492	; (adr r3, 800a400 <__ieee754_pow+0x6f0>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	4604      	mov	r4, r0
 800a218:	460d      	mov	r5, r1
 800a21a:	f7f6 f967 	bl	80004ec <__aeabi_dmul>
 800a21e:	a37a      	add	r3, pc, #488	; (adr r3, 800a408 <__ieee754_pow+0x6f8>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f5 ffac 	bl	8000180 <__adddf3>
 800a228:	4622      	mov	r2, r4
 800a22a:	462b      	mov	r3, r5
 800a22c:	f7f6 f95e 	bl	80004ec <__aeabi_dmul>
 800a230:	a377      	add	r3, pc, #476	; (adr r3, 800a410 <__ieee754_pow+0x700>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f5 ffa3 	bl	8000180 <__adddf3>
 800a23a:	4622      	mov	r2, r4
 800a23c:	462b      	mov	r3, r5
 800a23e:	f7f6 f955 	bl	80004ec <__aeabi_dmul>
 800a242:	a375      	add	r3, pc, #468	; (adr r3, 800a418 <__ieee754_pow+0x708>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f5 ff9a 	bl	8000180 <__adddf3>
 800a24c:	4622      	mov	r2, r4
 800a24e:	462b      	mov	r3, r5
 800a250:	f7f6 f94c 	bl	80004ec <__aeabi_dmul>
 800a254:	a372      	add	r3, pc, #456	; (adr r3, 800a420 <__ieee754_pow+0x710>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f5 ff91 	bl	8000180 <__adddf3>
 800a25e:	4622      	mov	r2, r4
 800a260:	462b      	mov	r3, r5
 800a262:	f7f6 f943 	bl	80004ec <__aeabi_dmul>
 800a266:	a370      	add	r3, pc, #448	; (adr r3, 800a428 <__ieee754_pow+0x718>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f5 ff88 	bl	8000180 <__adddf3>
 800a270:	4622      	mov	r2, r4
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	462b      	mov	r3, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	f7f6 f936 	bl	80004ec <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4630      	mov	r0, r6
 800a286:	4639      	mov	r1, r7
 800a288:	f7f6 f930 	bl	80004ec <__aeabi_dmul>
 800a28c:	4604      	mov	r4, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a294:	4642      	mov	r2, r8
 800a296:	464b      	mov	r3, r9
 800a298:	f7f5 ff72 	bl	8000180 <__adddf3>
 800a29c:	4652      	mov	r2, sl
 800a29e:	465b      	mov	r3, fp
 800a2a0:	f7f6 f924 	bl	80004ec <__aeabi_dmul>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	f7f5 ff6a 	bl	8000180 <__adddf3>
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7f6 f918 	bl	80004ec <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4b66      	ldr	r3, [pc, #408]	; (800a460 <__ieee754_pow+0x750>)
 800a2c8:	f7f5 ff5a 	bl	8000180 <__adddf3>
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	f7f5 ff56 	bl	8000180 <__adddf3>
 800a2d4:	2400      	movs	r4, #0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	4622      	mov	r2, r4
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f6 f904 	bl	80004ec <__aeabi_dmul>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	4689      	mov	r9, r1
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4b5c      	ldr	r3, [pc, #368]	; (800a460 <__ieee754_pow+0x750>)
 800a2f0:	f7f5 ff44 	bl	800017c <__aeabi_dsub>
 800a2f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2f8:	f7f5 ff40 	bl	800017c <__aeabi_dsub>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4630      	mov	r0, r6
 800a302:	4639      	mov	r1, r7
 800a304:	f7f5 ff3a 	bl	800017c <__aeabi_dsub>
 800a308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a30c:	f7f6 f8ee 	bl	80004ec <__aeabi_dmul>
 800a310:	4622      	mov	r2, r4
 800a312:	4606      	mov	r6, r0
 800a314:	460f      	mov	r7, r1
 800a316:	462b      	mov	r3, r5
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f6 f8e6 	bl	80004ec <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f5 ff2a 	bl	8000180 <__adddf3>
 800a32c:	2400      	movs	r4, #0
 800a32e:	4606      	mov	r6, r0
 800a330:	460f      	mov	r7, r1
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f5 ff21 	bl	8000180 <__adddf3>
 800a33e:	a33c      	add	r3, pc, #240	; (adr r3, 800a430 <__ieee754_pow+0x720>)
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	4620      	mov	r0, r4
 800a346:	460d      	mov	r5, r1
 800a348:	f7f6 f8d0 	bl	80004ec <__aeabi_dmul>
 800a34c:	4642      	mov	r2, r8
 800a34e:	464b      	mov	r3, r9
 800a350:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ff10 	bl	800017c <__aeabi_dsub>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ff0a 	bl	800017c <__aeabi_dsub>
 800a368:	a333      	add	r3, pc, #204	; (adr r3, 800a438 <__ieee754_pow+0x728>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f6 f8bd 	bl	80004ec <__aeabi_dmul>
 800a372:	a333      	add	r3, pc, #204	; (adr r3, 800a440 <__ieee754_pow+0x730>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	4606      	mov	r6, r0
 800a37a:	460f      	mov	r7, r1
 800a37c:	4620      	mov	r0, r4
 800a37e:	4629      	mov	r1, r5
 800a380:	f7f6 f8b4 	bl	80004ec <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f5 fef8 	bl	8000180 <__adddf3>
 800a390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a392:	4b34      	ldr	r3, [pc, #208]	; (800a464 <__ieee754_pow+0x754>)
 800a394:	4413      	add	r3, r2
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f5 fef1 	bl	8000180 <__adddf3>
 800a39e:	4680      	mov	r8, r0
 800a3a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	f7f6 f838 	bl	8000418 <__aeabi_i2d>
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3b2:	4b2d      	ldr	r3, [pc, #180]	; (800a468 <__ieee754_pow+0x758>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a3ba:	4642      	mov	r2, r8
 800a3bc:	464b      	mov	r3, r9
 800a3be:	f7f5 fedf 	bl	8000180 <__adddf3>
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	f7f5 fedb 	bl	8000180 <__adddf3>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	f7f5 fed7 	bl	8000180 <__adddf3>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	4682      	mov	sl, r0
 800a3da:	468b      	mov	fp, r1
 800a3dc:	f7f5 fece 	bl	800017c <__aeabi_dsub>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	f7f5 feca 	bl	800017c <__aeabi_dsub>
 800a3e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3ec:	f7f5 fec6 	bl	800017c <__aeabi_dsub>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	e60b      	b.n	800a012 <__ieee754_pow+0x302>
 800a3fa:	2601      	movs	r6, #1
 800a3fc:	e69f      	b.n	800a13e <__ieee754_pow+0x42e>
 800a3fe:	bf00      	nop
 800a400:	4a454eef 	.word	0x4a454eef
 800a404:	3fca7e28 	.word	0x3fca7e28
 800a408:	93c9db65 	.word	0x93c9db65
 800a40c:	3fcd864a 	.word	0x3fcd864a
 800a410:	a91d4101 	.word	0xa91d4101
 800a414:	3fd17460 	.word	0x3fd17460
 800a418:	518f264d 	.word	0x518f264d
 800a41c:	3fd55555 	.word	0x3fd55555
 800a420:	db6fabff 	.word	0xdb6fabff
 800a424:	3fdb6db6 	.word	0x3fdb6db6
 800a428:	33333303 	.word	0x33333303
 800a42c:	3fe33333 	.word	0x3fe33333
 800a430:	e0000000 	.word	0xe0000000
 800a434:	3feec709 	.word	0x3feec709
 800a438:	dc3a03fd 	.word	0xdc3a03fd
 800a43c:	3feec709 	.word	0x3feec709
 800a440:	145b01f5 	.word	0x145b01f5
 800a444:	be3e2fe0 	.word	0xbe3e2fe0
 800a448:	7ff00000 	.word	0x7ff00000
 800a44c:	43400000 	.word	0x43400000
 800a450:	0003988e 	.word	0x0003988e
 800a454:	000bb679 	.word	0x000bb679
 800a458:	0800af38 	.word	0x0800af38
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	40080000 	.word	0x40080000
 800a464:	0800af58 	.word	0x0800af58
 800a468:	0800af48 	.word	0x0800af48
 800a46c:	a39c      	add	r3, pc, #624	; (adr r3, 800a6e0 <__ieee754_pow+0x9d0>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f5 fe83 	bl	8000180 <__adddf3>
 800a47a:	4622      	mov	r2, r4
 800a47c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a480:	462b      	mov	r3, r5
 800a482:	4650      	mov	r0, sl
 800a484:	4639      	mov	r1, r7
 800a486:	f7f5 fe79 	bl	800017c <__aeabi_dsub>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a492:	f7f6 fabb 	bl	8000a0c <__aeabi_dcmpgt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f47f ae06 	bne.w	800a0a8 <__ieee754_pow+0x398>
 800a49c:	4aa2      	ldr	r2, [pc, #648]	; (800a728 <__ieee754_pow+0xa18>)
 800a49e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	f340 8100 	ble.w	800a6a8 <__ieee754_pow+0x998>
 800a4a8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4ac:	151b      	asrs	r3, r3, #20
 800a4ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a4b2:	fa4a fa03 	asr.w	sl, sl, r3
 800a4b6:	44b2      	add	sl, r6
 800a4b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a4bc:	489b      	ldr	r0, [pc, #620]	; (800a72c <__ieee754_pow+0xa1c>)
 800a4be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a4c2:	4108      	asrs	r0, r1
 800a4c4:	ea00 030a 	and.w	r3, r0, sl
 800a4c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a4cc:	f1c1 0114 	rsb	r1, r1, #20
 800a4d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a4d4:	fa4a fa01 	asr.w	sl, sl, r1
 800a4d8:	2e00      	cmp	r6, #0
 800a4da:	f04f 0200 	mov.w	r2, #0
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	bfb8      	it	lt
 800a4e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a4e8:	f7f5 fe48 	bl	800017c <__aeabi_dsub>
 800a4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f4:	2400      	movs	r4, #0
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	464b      	mov	r3, r9
 800a4fa:	f7f5 fe41 	bl	8000180 <__adddf3>
 800a4fe:	a37a      	add	r3, pc, #488	; (adr r3, 800a6e8 <__ieee754_pow+0x9d8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4620      	mov	r0, r4
 800a506:	460d      	mov	r5, r1
 800a508:	f7f5 fff0 	bl	80004ec <__aeabi_dmul>
 800a50c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a510:	4606      	mov	r6, r0
 800a512:	460f      	mov	r7, r1
 800a514:	4620      	mov	r0, r4
 800a516:	4629      	mov	r1, r5
 800a518:	f7f5 fe30 	bl	800017c <__aeabi_dsub>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4640      	mov	r0, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f7f5 fe2a 	bl	800017c <__aeabi_dsub>
 800a528:	a371      	add	r3, pc, #452	; (adr r3, 800a6f0 <__ieee754_pow+0x9e0>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f5 ffdd 	bl	80004ec <__aeabi_dmul>
 800a532:	a371      	add	r3, pc, #452	; (adr r3, 800a6f8 <__ieee754_pow+0x9e8>)
 800a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a538:	4680      	mov	r8, r0
 800a53a:	4689      	mov	r9, r1
 800a53c:	4620      	mov	r0, r4
 800a53e:	4629      	mov	r1, r5
 800a540:	f7f5 ffd4 	bl	80004ec <__aeabi_dmul>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f5 fe18 	bl	8000180 <__adddf3>
 800a550:	4604      	mov	r4, r0
 800a552:	460d      	mov	r5, r1
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fe10 	bl	8000180 <__adddf3>
 800a560:	4632      	mov	r2, r6
 800a562:	463b      	mov	r3, r7
 800a564:	4680      	mov	r8, r0
 800a566:	4689      	mov	r9, r1
 800a568:	f7f5 fe08 	bl	800017c <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fe02 	bl	800017c <__aeabi_dsub>
 800a578:	4642      	mov	r2, r8
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	464b      	mov	r3, r9
 800a580:	4640      	mov	r0, r8
 800a582:	4649      	mov	r1, r9
 800a584:	f7f5 ffb2 	bl	80004ec <__aeabi_dmul>
 800a588:	a35d      	add	r3, pc, #372	; (adr r3, 800a700 <__ieee754_pow+0x9f0>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	4604      	mov	r4, r0
 800a590:	460d      	mov	r5, r1
 800a592:	f7f5 ffab 	bl	80004ec <__aeabi_dmul>
 800a596:	a35c      	add	r3, pc, #368	; (adr r3, 800a708 <__ieee754_pow+0x9f8>)
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f7f5 fdee 	bl	800017c <__aeabi_dsub>
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	f7f5 ffa2 	bl	80004ec <__aeabi_dmul>
 800a5a8:	a359      	add	r3, pc, #356	; (adr r3, 800a710 <__ieee754_pow+0xa00>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f5 fde7 	bl	8000180 <__adddf3>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f7f5 ff99 	bl	80004ec <__aeabi_dmul>
 800a5ba:	a357      	add	r3, pc, #348	; (adr r3, 800a718 <__ieee754_pow+0xa08>)
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f7f5 fddc 	bl	800017c <__aeabi_dsub>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f7f5 ff90 	bl	80004ec <__aeabi_dmul>
 800a5cc:	a354      	add	r3, pc, #336	; (adr r3, 800a720 <__ieee754_pow+0xa10>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fdd5 	bl	8000180 <__adddf3>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	f7f5 ff87 	bl	80004ec <__aeabi_dmul>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f5 fdc9 	bl	800017c <__aeabi_dsub>
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	f7f5 ff79 	bl	80004ec <__aeabi_dmul>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a604:	4620      	mov	r0, r4
 800a606:	4629      	mov	r1, r5
 800a608:	f7f5 fdb8 	bl	800017c <__aeabi_dsub>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a614:	f7f6 f894 	bl	8000740 <__aeabi_ddiv>
 800a618:	4632      	mov	r2, r6
 800a61a:	4604      	mov	r4, r0
 800a61c:	460d      	mov	r5, r1
 800a61e:	463b      	mov	r3, r7
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 ff62 	bl	80004ec <__aeabi_dmul>
 800a628:	4632      	mov	r2, r6
 800a62a:	463b      	mov	r3, r7
 800a62c:	f7f5 fda8 	bl	8000180 <__adddf3>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 fda0 	bl	800017c <__aeabi_dsub>
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	f7f5 fd9c 	bl	800017c <__aeabi_dsub>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	2000      	movs	r0, #0
 800a64a:	4939      	ldr	r1, [pc, #228]	; (800a730 <__ieee754_pow+0xa20>)
 800a64c:	f7f5 fd96 	bl	800017c <__aeabi_dsub>
 800a650:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a654:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a658:	da29      	bge.n	800a6ae <__ieee754_pow+0x99e>
 800a65a:	4652      	mov	r2, sl
 800a65c:	f000 f874 	bl	800a748 <scalbn>
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	f7ff bbfd 	b.w	8009e62 <__ieee754_pow+0x152>
 800a668:	4b32      	ldr	r3, [pc, #200]	; (800a734 <__ieee754_pow+0xa24>)
 800a66a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a66e:	429f      	cmp	r7, r3
 800a670:	f77f af14 	ble.w	800a49c <__ieee754_pow+0x78c>
 800a674:	4b30      	ldr	r3, [pc, #192]	; (800a738 <__ieee754_pow+0xa28>)
 800a676:	440b      	add	r3, r1
 800a678:	4303      	orrs	r3, r0
 800a67a:	d009      	beq.n	800a690 <__ieee754_pow+0x980>
 800a67c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a680:	2200      	movs	r2, #0
 800a682:	2300      	movs	r3, #0
 800a684:	f7f6 f9a4 	bl	80009d0 <__aeabi_dcmplt>
 800a688:	3800      	subs	r0, #0
 800a68a:	bf18      	it	ne
 800a68c:	2001      	movne	r0, #1
 800a68e:	e452      	b.n	8009f36 <__ieee754_pow+0x226>
 800a690:	4622      	mov	r2, r4
 800a692:	462b      	mov	r3, r5
 800a694:	f7f5 fd72 	bl	800017c <__aeabi_dsub>
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	f7f6 f9ac 	bl	80009f8 <__aeabi_dcmpge>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	f43f aefb 	beq.w	800a49c <__ieee754_pow+0x78c>
 800a6a6:	e7e9      	b.n	800a67c <__ieee754_pow+0x96c>
 800a6a8:	f04f 0a00 	mov.w	sl, #0
 800a6ac:	e720      	b.n	800a4f0 <__ieee754_pow+0x7e0>
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	e7d6      	b.n	800a660 <__ieee754_pow+0x950>
 800a6b2:	f04f 0b00 	mov.w	fp, #0
 800a6b6:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a730 <__ieee754_pow+0xa20>
 800a6ba:	f7ff bbb9 	b.w	8009e30 <__ieee754_pow+0x120>
 800a6be:	f04f 0b00 	mov.w	fp, #0
 800a6c2:	f04f 0c00 	mov.w	ip, #0
 800a6c6:	f7ff bbb3 	b.w	8009e30 <__ieee754_pow+0x120>
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7ff bb3c 	b.w	8009d4a <__ieee754_pow+0x3a>
 800a6d2:	9200      	str	r2, [sp, #0]
 800a6d4:	f7ff bb88 	b.w	8009de8 <__ieee754_pow+0xd8>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f7ff bb72 	b.w	8009dc2 <__ieee754_pow+0xb2>
 800a6de:	bf00      	nop
 800a6e0:	652b82fe 	.word	0x652b82fe
 800a6e4:	3c971547 	.word	0x3c971547
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	3fe62e43 	.word	0x3fe62e43
 800a6f0:	fefa39ef 	.word	0xfefa39ef
 800a6f4:	3fe62e42 	.word	0x3fe62e42
 800a6f8:	0ca86c39 	.word	0x0ca86c39
 800a6fc:	be205c61 	.word	0xbe205c61
 800a700:	72bea4d0 	.word	0x72bea4d0
 800a704:	3e663769 	.word	0x3e663769
 800a708:	c5d26bf1 	.word	0xc5d26bf1
 800a70c:	3ebbbd41 	.word	0x3ebbbd41
 800a710:	af25de2c 	.word	0xaf25de2c
 800a714:	3f11566a 	.word	0x3f11566a
 800a718:	16bebd93 	.word	0x16bebd93
 800a71c:	3f66c16c 	.word	0x3f66c16c
 800a720:	5555553e 	.word	0x5555553e
 800a724:	3fc55555 	.word	0x3fc55555
 800a728:	3fe00000 	.word	0x3fe00000
 800a72c:	fff00000 	.word	0xfff00000
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	4090cbff 	.word	0x4090cbff
 800a738:	3f6f3400 	.word	0x3f6f3400

0800a73c <fabs>:
 800a73c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a740:	4619      	mov	r1, r3
 800a742:	4770      	bx	lr
 800a744:	0000      	movs	r0, r0
	...

0800a748 <scalbn>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	4616      	mov	r6, r2
 800a74c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	460b      	mov	r3, r1
 800a756:	b992      	cbnz	r2, 800a77e <scalbn+0x36>
 800a758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a75c:	4303      	orrs	r3, r0
 800a75e:	d03c      	beq.n	800a7da <scalbn+0x92>
 800a760:	4b31      	ldr	r3, [pc, #196]	; (800a828 <scalbn+0xe0>)
 800a762:	2200      	movs	r2, #0
 800a764:	f7f5 fec2 	bl	80004ec <__aeabi_dmul>
 800a768:	4b30      	ldr	r3, [pc, #192]	; (800a82c <scalbn+0xe4>)
 800a76a:	4604      	mov	r4, r0
 800a76c:	429e      	cmp	r6, r3
 800a76e:	460d      	mov	r5, r1
 800a770:	da0f      	bge.n	800a792 <scalbn+0x4a>
 800a772:	a329      	add	r3, pc, #164	; (adr r3, 800a818 <scalbn+0xd0>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 feb8 	bl	80004ec <__aeabi_dmul>
 800a77c:	e006      	b.n	800a78c <scalbn+0x44>
 800a77e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a782:	42ba      	cmp	r2, r7
 800a784:	d109      	bne.n	800a79a <scalbn+0x52>
 800a786:	4602      	mov	r2, r0
 800a788:	f7f5 fcfa 	bl	8000180 <__adddf3>
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	e023      	b.n	800a7da <scalbn+0x92>
 800a792:	460b      	mov	r3, r1
 800a794:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a798:	3a36      	subs	r2, #54	; 0x36
 800a79a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a79e:	428e      	cmp	r6, r1
 800a7a0:	dd0e      	ble.n	800a7c0 <scalbn+0x78>
 800a7a2:	a31f      	add	r3, pc, #124	; (adr r3, 800a820 <scalbn+0xd8>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a7ac:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a7b0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a7b4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a7b8:	481d      	ldr	r0, [pc, #116]	; (800a830 <scalbn+0xe8>)
 800a7ba:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a7be:	e7db      	b.n	800a778 <scalbn+0x30>
 800a7c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7c4:	4432      	add	r2, r6
 800a7c6:	428a      	cmp	r2, r1
 800a7c8:	dceb      	bgt.n	800a7a2 <scalbn+0x5a>
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	dd08      	ble.n	800a7e0 <scalbn+0x98>
 800a7ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4629      	mov	r1, r5
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a7e4:	da0c      	bge.n	800a800 <scalbn+0xb8>
 800a7e6:	a30c      	add	r3, pc, #48	; (adr r3, 800a818 <scalbn+0xd0>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a7f0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a7f4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a7f8:	480e      	ldr	r0, [pc, #56]	; (800a834 <scalbn+0xec>)
 800a7fa:	f041 011f 	orr.w	r1, r1, #31
 800a7fe:	e7bb      	b.n	800a778 <scalbn+0x30>
 800a800:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a804:	3236      	adds	r2, #54	; 0x36
 800a806:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a80a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a80e:	4620      	mov	r0, r4
 800a810:	4629      	mov	r1, r5
 800a812:	2200      	movs	r2, #0
 800a814:	4b08      	ldr	r3, [pc, #32]	; (800a838 <scalbn+0xf0>)
 800a816:	e7af      	b.n	800a778 <scalbn+0x30>
 800a818:	c2f8f359 	.word	0xc2f8f359
 800a81c:	01a56e1f 	.word	0x01a56e1f
 800a820:	8800759c 	.word	0x8800759c
 800a824:	7e37e43c 	.word	0x7e37e43c
 800a828:	43500000 	.word	0x43500000
 800a82c:	ffff3cb0 	.word	0xffff3cb0
 800a830:	8800759c 	.word	0x8800759c
 800a834:	c2f8f359 	.word	0xc2f8f359
 800a838:	3c900000 	.word	0x3c900000

0800a83c <with_errno>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	4616      	mov	r6, r2
 800a844:	f7fd f960 	bl	8007b08 <__errno>
 800a848:	4629      	mov	r1, r5
 800a84a:	6006      	str	r6, [r0, #0]
 800a84c:	4620      	mov	r0, r4
 800a84e:	bd70      	pop	{r4, r5, r6, pc}

0800a850 <xflow>:
 800a850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a852:	4615      	mov	r5, r2
 800a854:	461c      	mov	r4, r3
 800a856:	b180      	cbz	r0, 800a87a <xflow+0x2a>
 800a858:	4610      	mov	r0, r2
 800a85a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a85e:	e9cd 0100 	strd	r0, r1, [sp]
 800a862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a866:	4628      	mov	r0, r5
 800a868:	4621      	mov	r1, r4
 800a86a:	f7f5 fe3f 	bl	80004ec <__aeabi_dmul>
 800a86e:	2222      	movs	r2, #34	; 0x22
 800a870:	b003      	add	sp, #12
 800a872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a876:	f7ff bfe1 	b.w	800a83c <with_errno>
 800a87a:	4610      	mov	r0, r2
 800a87c:	4619      	mov	r1, r3
 800a87e:	e7ee      	b.n	800a85e <xflow+0xe>

0800a880 <__math_uflow>:
 800a880:	2200      	movs	r2, #0
 800a882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a886:	f7ff bfe3 	b.w	800a850 <xflow>

0800a88a <__math_oflow>:
 800a88a:	2200      	movs	r2, #0
 800a88c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a890:	f7ff bfde 	b.w	800a850 <xflow>

0800a894 <__ieee754_sqrt>:
 800a894:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800aa38 <__ieee754_sqrt+0x1a4>
 800a898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	ea3c 0c01 	bics.w	ip, ip, r1
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	460a      	mov	r2, r1
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	d10e      	bne.n	800a8ca <__ieee754_sqrt+0x36>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	f7f5 fe1d 	bl	80004ec <__aeabi_dmul>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f5 fc61 	bl	8000180 <__adddf3>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ca:	2900      	cmp	r1, #0
 800a8cc:	dc0d      	bgt.n	800a8ea <__ieee754_sqrt+0x56>
 800a8ce:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a8d2:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a8d6:	d0f4      	beq.n	800a8c2 <__ieee754_sqrt+0x2e>
 800a8d8:	b139      	cbz	r1, 800a8ea <__ieee754_sqrt+0x56>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	f7f5 fc4e 	bl	800017c <__aeabi_dsub>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	f7f5 ff2c 	bl	8000740 <__aeabi_ddiv>
 800a8e8:	e7e9      	b.n	800a8be <__ieee754_sqrt+0x2a>
 800a8ea:	1512      	asrs	r2, r2, #20
 800a8ec:	f000 8089 	beq.w	800aa02 <__ieee754_sqrt+0x16e>
 800a8f0:	2500      	movs	r5, #0
 800a8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a8fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8fe:	07d2      	lsls	r2, r2, #31
 800a900:	bf5c      	itt	pl
 800a902:	005b      	lslpl	r3, r3, #1
 800a904:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a90c:	bf58      	it	pl
 800a90e:	0064      	lslpl	r4, r4, #1
 800a910:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a914:	0062      	lsls	r2, r4, #1
 800a916:	2016      	movs	r0, #22
 800a918:	4629      	mov	r1, r5
 800a91a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800a91e:	1076      	asrs	r6, r6, #1
 800a920:	190f      	adds	r7, r1, r4
 800a922:	429f      	cmp	r7, r3
 800a924:	bfde      	ittt	le
 800a926:	1bdb      	suble	r3, r3, r7
 800a928:	1939      	addle	r1, r7, r4
 800a92a:	192d      	addle	r5, r5, r4
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	3801      	subs	r0, #1
 800a930:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a934:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a938:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a93c:	d1f0      	bne.n	800a920 <__ieee754_sqrt+0x8c>
 800a93e:	4604      	mov	r4, r0
 800a940:	2720      	movs	r7, #32
 800a942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800a946:	428b      	cmp	r3, r1
 800a948:	eb0c 0e00 	add.w	lr, ip, r0
 800a94c:	dc02      	bgt.n	800a954 <__ieee754_sqrt+0xc0>
 800a94e:	d113      	bne.n	800a978 <__ieee754_sqrt+0xe4>
 800a950:	4596      	cmp	lr, r2
 800a952:	d811      	bhi.n	800a978 <__ieee754_sqrt+0xe4>
 800a954:	f1be 0f00 	cmp.w	lr, #0
 800a958:	eb0e 000c 	add.w	r0, lr, ip
 800a95c:	da56      	bge.n	800aa0c <__ieee754_sqrt+0x178>
 800a95e:	2800      	cmp	r0, #0
 800a960:	db54      	blt.n	800aa0c <__ieee754_sqrt+0x178>
 800a962:	f101 0801 	add.w	r8, r1, #1
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	4641      	mov	r1, r8
 800a96a:	4596      	cmp	lr, r2
 800a96c:	bf88      	it	hi
 800a96e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a972:	eba2 020e 	sub.w	r2, r2, lr
 800a976:	4464      	add	r4, ip
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	3f01      	subs	r7, #1
 800a97c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a980:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a984:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a988:	d1dd      	bne.n	800a946 <__ieee754_sqrt+0xb2>
 800a98a:	4313      	orrs	r3, r2
 800a98c:	d01b      	beq.n	800a9c6 <__ieee754_sqrt+0x132>
 800a98e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aa3c <__ieee754_sqrt+0x1a8>
 800a992:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aa40 <__ieee754_sqrt+0x1ac>
 800a996:	e9da 0100 	ldrd	r0, r1, [sl]
 800a99a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a99e:	f7f5 fbed 	bl	800017c <__aeabi_dsub>
 800a9a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	f7f6 f819 	bl	80009e4 <__aeabi_dcmple>
 800a9b2:	b140      	cbz	r0, 800a9c6 <__ieee754_sqrt+0x132>
 800a9b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a9c0:	d126      	bne.n	800aa10 <__ieee754_sqrt+0x17c>
 800a9c2:	463c      	mov	r4, r7
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	106b      	asrs	r3, r5, #1
 800a9c8:	0864      	lsrs	r4, r4, #1
 800a9ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a9ce:	07ea      	lsls	r2, r5, #31
 800a9d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a9d4:	bf48      	it	mi
 800a9d6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800a9da:	4620      	mov	r0, r4
 800a9dc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a9e0:	e76d      	b.n	800a8be <__ieee754_sqrt+0x2a>
 800a9e2:	0ae3      	lsrs	r3, r4, #11
 800a9e4:	3915      	subs	r1, #21
 800a9e6:	0564      	lsls	r4, r4, #21
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0fa      	beq.n	800a9e2 <__ieee754_sqrt+0x14e>
 800a9ec:	02d8      	lsls	r0, r3, #11
 800a9ee:	d50a      	bpl.n	800aa06 <__ieee754_sqrt+0x172>
 800a9f0:	f1c2 0020 	rsb	r0, r2, #32
 800a9f4:	fa24 f000 	lsr.w	r0, r4, r0
 800a9f8:	1e55      	subs	r5, r2, #1
 800a9fa:	4094      	lsls	r4, r2
 800a9fc:	4303      	orrs	r3, r0
 800a9fe:	1b4a      	subs	r2, r1, r5
 800aa00:	e776      	b.n	800a8f0 <__ieee754_sqrt+0x5c>
 800aa02:	4611      	mov	r1, r2
 800aa04:	e7f0      	b.n	800a9e8 <__ieee754_sqrt+0x154>
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	3201      	adds	r2, #1
 800aa0a:	e7ef      	b.n	800a9ec <__ieee754_sqrt+0x158>
 800aa0c:	4688      	mov	r8, r1
 800aa0e:	e7aa      	b.n	800a966 <__ieee754_sqrt+0xd2>
 800aa10:	f7f5 fbb6 	bl	8000180 <__adddf3>
 800aa14:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 ffd6 	bl	80009d0 <__aeabi_dcmplt>
 800aa24:	b120      	cbz	r0, 800aa30 <__ieee754_sqrt+0x19c>
 800aa26:	1ca1      	adds	r1, r4, #2
 800aa28:	bf08      	it	eq
 800aa2a:	3501      	addeq	r5, #1
 800aa2c:	3402      	adds	r4, #2
 800aa2e:	e7ca      	b.n	800a9c6 <__ieee754_sqrt+0x132>
 800aa30:	3401      	adds	r4, #1
 800aa32:	f024 0401 	bic.w	r4, r4, #1
 800aa36:	e7c6      	b.n	800a9c6 <__ieee754_sqrt+0x132>
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	200001e0 	.word	0x200001e0
 800aa40:	200001e8 	.word	0x200001e8

0800aa44 <_init>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr

0800aa50 <_fini>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr
